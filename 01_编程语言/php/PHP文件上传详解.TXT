
上传文件分为两个部分，HTML显示部分和PHP处理部分，HTML部分主要是让用户来选择所要上传的文件，然后通过PHP中的$_FILES，我们可以把文件上传到服务器的指定目录。 
先来看一下HTML部分。
?<form action="upload.php" method="post" enctype="multipart/form-data"> 
上传：<input type="file" name="myfile" /> 
<input type="submit" name="submit" value="上传" /> 
</form> 
说明：
form标答的action="upload.php"是指点击这个form中的submit的时候，这个上传命令会被发送到这个叫 upload.php的页面去处理。method="post"是指以post方式去送，enctype="multipart/form-data"属性规定了在提交这个表单时要使用哪种内容类型，在表单需要二进制数据时，比如文件内容，请使用"multipart/form-data"，如果要上传文件，这个属性是必要的。input中的type="file"时，规定了应该把输入作为文件来处理，并且在input后面会有一个浏览的按钮。

我们再来看一个PHP处理页面 upload.php
?<?php 
if($_FILES['myfile']['name'] != '') { 
　　if($_FILES['myfile']['error'] > 0) { 
　　　　echo "错误状态：" . $_FILES['myfile']['error']; 
　　} else { 
　　　　move_uploaded_file($_FILES['myfile']['tmp_name'] , "uploads/" . $FILES['myfile']['name']); 
　　　　echo "<script>alert(上传成功！);</script>"; 
　　} 
} else{ 
　　echo "<script>alert(请上传文件！);</script>"; 
} 
?> 
说明：
在解释这篇代码前，我们有必要了解以下知识。

$_FILES['myfile']['name']  是指被上传文件的名称
$_FILES['myfile']['type']  是指被上传文件的类型
$_FILES['myfile']['size']  是指被上传文件的大小，单位为字节(B)
$_FILES['myfile']['tmp_name']  是指被上传文件存在服务器中的临时副本文件名称，文件被移动到指定目录后临文件将被自动消毁。
$_FILES['myfile']["error"]  是指由文件上传中有可能出现的错误的状态码，关于各状态含义后在会说明。
了解了这些，我们再来看一下upload.php的代码。
首先，$_FILES['myfile']['name']中的myfile是指在上面HTML页面中上传文件标签的name值，根据这个我们才能知道我们正在处理的文件是哪一个input提交过来的，然后再来判断一下 $_FILES['myfile']['name'] 不是否为空，根据这个我们可以知道用户有没有上传文件，从而执行不同的操作。如果上传了文件并且状态是0就说明上传成功，我们就可以用 move_uploaded_file方法把上传的文件存放到指定目录，上面这个例子是指把上传的文件移动到同目录下的uploads文件夹下，这个路径是相对于这个PHP文件（既upload.php）的相对目录。比如，我们想把上传的文件移动到upload.php上一层叫user的文件夹中的话，我们就可以这样写：move_uploaded_file($_FILES['myfile']['tmp_name'] , "../user/" . $FILES['myfile']['name'])，这种方法使用起来很方便、灵活，这样一个文件就被上传到服务器中了，可以打开服务器中的目录查看该文件。

允许用户上传文件是一个有巨大的安全风险的行为，因此，通常情况下，我们会对用户上传的文件做一些限制，比如常见的限制文件
类型和文件大小，来看一下。

?<?php 
if($_FILES['myfile']['name'] != '') { 
　　if($_FILES['myfile']['error'] > 0) { 
　　　　echo "错误状态：" . $_FILES['myfile']['error']; 
　　} else { 
　　　　if($_FILES['myfile']['type'] == 'image/jpeg' or $_FILES['myfile']['type'] == 'image/pjpeg' or $_FILES['myfile']['type'] == 'image/gif' && $_FILES['myfile']['size'] < 20480){ 
　　　　　　move_uploaded_file($_FILES['myfile']['tmp_name'] , "uploads/" . $FILES['myfile']['name']); 
　　　　　　echo "<script>alert(上传成功！);</script>"; 
　　　　} else { 
　　　　　　echo "<script>alert(请上传小于2MB的jpeg或Gif类型的附件);<script>"; 
　　　　} 
　　} 
} else { 
　　echo "<script>alert(请上传文件！);</script>"; 
} 
?> 
从上面的代码可以看出，我们规定了上传的文件类型必须是jpeg或者Gif并且必须小于2MB的文件($_FILES['myfile']['size']的默认单位是字节)
这里必须提到的是，对于IE浏览器，它识别jpg文件的类型必须是 pjpeg，而对于 FireFox，则必须是 jpeg，因此，我们必须对jpeg和pjpeg都作判断。
这样一来，我们可以限制用户上传的一些危险的比如木马或者病毒脚本，来保证了服务器的安全运行。
现在，一个上传文件程序就基本成形了。但时在有些时候，考虑到用户体验，我们还可以对用户上传过程中发生的错误作出一些提醒，
让用户明白是哪里出了问题，我们会对$_FILES['myfile']['error']作出一些说明，先来看一下在PHP中对$_FILES['myfile']['error']常见6种状态的定义。

?$_FILES['teacher_pic']['error'] = 1        文件大小超过了PHP.ini中的文件限制 
$_FILES['teacher_pic']['error'] = 2        文件大小超过了浏览器限制 
$_FILES['teacher_pic']['error'] = 3        文件部分被上传 
$_FILES['teacher_pic']['error'] = 4        没有找到要上传的文件 
$_FILES['teacher_pic']['error'] = 5        服务器临时文件夹丢失 
$_FILES['teacher_pic']['error'] = 5        文件写入到临时文件夹出错 
错误信息状态为1时说明上传的文件超过了php.ini中的文件大小限制，我们可以打开php.ini这个文件。

来找一下; Maximum allowed size for uploaded files.upload_max_filesize = 2M
我这里是在第516行，这一句说定义了PHP中上传文件的最大字节数，默认情况下是2MB，这个设置是PHP全局上传限制，权限最高，即使$_FILES['myfile']['size']设为10MB，也只能上传2MB以下的文件。比如，在默认情况下，如果规定$_FILES['myfile']['size'] < 10MB，在用户上传文件大于2MB的情况下，就会现在$_FILES['teacher_pic']['error'] = 1的情况，一般来说，我们须要把$_FILES['myfile']['size']的值设定在upload_max_filesize值之下（设大了也没用，呵呵）。当然，你完全可以把php.ini中的upload_max_filesize值调的更大，但实际应用中，我们考虑到服务器的负载能力，不建议upload_max_filesize的值超过20MB，这样会造成网站附件增大，这在论坛社区上可以很明显的看出来。
了解了这些，我们就可以对错误状态作出定义，我们再来完善一下代码，来看一下。

?<?php 
if($_FILES['myfile']['name'] != ''){ 
　　if($_FILES['myfile']['error'] > 0){ 
　　　　switch($_FILES['myfile']['error']){ 
　　　　　　case 1: 
　　　　　　　　echo "文件大小超过了PHP.ini中的文件限制！"; 
　　　　　　　　break; 
　　　　　　case 2: 
　　　　　　　　echo "文件大小超过了浏览器限制！"; 
　　　　　　　　break; 
　　　　　　case 3: 
　　　　　　　　echo "文件部分被上传！"; 
　　　　　　　　break; 
　　　　　　case 4: 
　　　　　　　　echo "没有找到要上传的文件！"; 
　　　　　　　　break; 
　　　　　　case 5: 
　　　　　　　　echo "服务器临时文件夹丢失，请重新上传！"; 
　　　　　　　　break; 
　　　　　　case 6: 
　　　　　　　　echo "文件写入到临时文件夹出错！"; 
　　　　　　　　break; 
　　　　} 
　　} else { 
　　　　if($_FILES['myfile']['type'] == 'image/jpeg' or $_FILES['myfile']['type'] == 'image/pjpeg' or $_FILES['myfile']['type'] == 'image/gif' && $_FILES['myfile']['size'] < 20480) { 
　　　　　　move_uploaded_file($_FILES['myfile']['tmp_name'] , "uploads/" . $FILES['myfile']['name']); 
　　　　　　echo "<script>alert(上传成功！);</script>"; 
　　　　} else { 
　　　　　　echo "<script>alert(请上传小于2MB的jpeg或Gif类型的附件);<script>"; 
　　　　} 
　　} 
} else { 
　　echo "<script>alert(请上传文件！);</script>"; 
} 
?> 
可以看出，我们使用了switch语句来对6种错状态作出定义，这样来下，在发生错误的时间，用户就会明白，是哪里出了问题。
但是还有一种情况就是，用户上传的文件在指定的目录中已经存在，这里我们可以使用file_exists方法来判断一下：

?<?php 
if($_FILES['myfile']['name'] != ''){ 
　　if($_FILES['myfile']['error'] > 0){ 
　　　　switch($_FILES['myfile']['error']){ 
　　　　　　case 1: 
　　　　　　　　echo "文件大小超过了PHP.ini中的文件限制！"; 
　　　　　　　　break; 
　　　　　　case 2: 
　　　　　　　　echo "文件大小超过了浏览器限制！"; 
　　　　　　　　break; 
　　　　　　case 3: 
　　　　　　　　echo "文件部分被上传！"; 
　　　　　　　　break; 
　　　　　　case 4: 
　　　　　　　　echo "没有找到要上传的文件！"; 
　　　　　　　　break; 
　　　　　　case 5: 
　　　　　　　　echo "服务器临时文件夹丢失，请重新上传！"; 
　　　　　　　　break; 
　　　　　　case 6: 
　　　　　　　　echo "文件写入到临时文件夹出错！"; 
　　　　　　　　break; 
　　　　} 
　　} else { 
　　　　if($_FILES['myfile']['type'] == 'image/jpeg' or $_FILES['myfile']['type'] == 'image/pjpeg' or $_FILES['myfile']['type'] == 'image/gif' && $_FILES['myfile']['size'] < 20480) { 
　　　　　　if (!file_exists("uploads/" . $_FILES["myfile"]["name"])) 
　　　　　　　　move_uploaded_file($_FILES['myfile']['tmp_name'] , "uploads/" . $FILES['myfile']['name']); 
　　　　　　　　echo "<script>alert(上传成功！);</script>"; 
　　　　　　} else{ 
　　　　　　　　echo "<script>alert(您上传的文件已经存在！);</script>"; 
　　　　　　} 
　　　　} else { 
　　　　　　echo "<script>alert(请上传小于2MB的jpeg或Gif类型的附件);<script>"; 
　　　　} 
　　} 
} else { 
　　echo "<script>alert(请上传文件！);</script>"; 
} 
?> 
我的个娘呀，终于写完了，一个完整的上传程序终于完成了，这只是上传文件最原始的方法，这样更容易自己理解，使用时大家可以考虑把它写成类
现在我们再来总结一下上传中的逻辑判断顺吧。


1. 先判断是否上传文件
2. 如果有再来判断上传中是否出错
3. 如果出错，则提示出错信息
4. 如查没出错，再判断文件类型
5. 如果类型符合条件，再判断指定目录中有没有存在该文件
6. 如果没有就把该文件移至指定目录

