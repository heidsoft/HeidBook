关于clock_gettime 


函数头文件
#include <time.h>

函数声明
int clock_gettime(clockid_t clk_id, struct timespec *tp);

参数
clockid_t：
CLOCK_REALTIME 

获取系统级的时钟，如果使用clock_settime进行时间设置则需要相应的权限。 
只有CLOCK_REALTIME可用 
  
 

struct timespec {
  time_t   tv_sec;        /**//* seconds */
  long     tv_nsec;       /**//* nanoseconds */
};
 



返回值
返回0成功，-1失败

关于编译
使用gcc编译需要加参数-lrt，-lrt指向一个小型通用程序库（lists, hash table, socket, etc）, clock_gettime包含在这个库中


函数的原型如下：

int clock_gettime(clockid_t clk_id, struct timespect *tp);clockid_t clk_id用于指定计时时钟的类型，对于我们Programmr以下三种比较常用：

CLOCK_REALTIME, a system-wide realtime clock.CLOCK_PROCESS_CPUTIME_ID, high-resolution timer provided by the CPU for each process.CLOCK_THREAD_CPUTIME_ID, high-resolution timer provided by the CPU for each of the threads.CLOCK_REALTIME, a system-wide realtime clock.
CLOCK_PROCESS_CPUTIME_ID, high-resolution timer provided by the CPU for each process.
CLOCK_THREAD_CPUTIME_ID, high-resolution timer provided by the CPU for each of the threads.
struct timespect *tp用来存储当前的时间，其结构如下：


//////////////////////////////////////////////////////////////////////////////////////
struct timespec {
     time_t tv_sec; /* seconds */
     long tv_nsec; /* nanoseconds */
 };

/////////////////////////////////////////////////////////////////////////////////////
代码
 #include <iostream>
 #include <time.h>
  using namespace std;
  
 timespec diff(timespec start, timespec end);
  
  int main()
 {
     timespec time1, time2;
     int temp;
     clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &time1);
     for (int i = 0; i< 242000000; i++)
         temp+=temp;
     clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &time2);
     cout<<diff(time1,time2).tv_sec<<":"<<diff(time1,time2).tv_nsec<<endl;
     return 0;
 }
  
 timespec diff(timespec start, timespec end)
 {
     timespec temp;
     if ((end.tv_nsec-start.tv_nsec)<0) {
         temp.tv_sec = end.tv_sec-start.tv_sec-1;
         temp.tv_nsec = 1000000000+end.tv_nsec-start.tv_nsec;
     } else {
         temp.tv_sec = end.tv_sec-start.tv_sec;
         temp.tv_nsec = end.tv_nsec-start.tv_nsec;
     }
     return temp;
 }
