From: =?gb2312?B?08kgV2luZG93cyBJbnRlcm5ldCBFeHBsb3JlciA4ILGjtOY=?=
Subject: =?gb2312?B?Y3lnd2luLCBjZHQsIGVjbGlwc2W07r2oYywgY3Bwu7e+syAtIC0gSVRleWU=?=
	=?gb2312?B?vLzK9c341b4=?=
Date: Fri, 20 Apr 2012 14:21:27 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CD1F00.DFC6EF30"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7600.16807

这是 MIME 格式的多方邮件。

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://yuanzhifei89.iteye.com/blog/1062721

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML dir=3Dltr xml:lang=3D"zh-CN"=20
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>cygwin, cdt, =
eclipse=E6=90=AD=E5=BB=BAc, cpp=E7=8E=AF=E5=A2=83 - - =
ITeye=E6=8A=80=E6=9C=AF=E7=BD=91=E7=AB=99</TITLE>
<META content=3D"text/html; charset=3DUTF-8" http-equiv=3DContent-Type>
<META name=3Ddescription=20
content=3D" =
=E4=BB=8A=E5=A4=A9=E9=97=B2=E7=9D=80=E6=97=A0=E8=81=8A=EF=BC=8C=E7=AA=81=E7=
=84=B6=E6=83=B3=E5=88=B0=E4=B8=8A=E6=AC=A1eclipse=E8=A3=85=E4=BA=86cdt=E6=
=8F=92=E4=BB=B6=EF=BC=8C=E4=BA=8E=E6=98=AF=E5=87=86=E5=A4=87=E5=9C=A8ecli=
pse=E4=B8=8B=E6=8A=8Ac,cpp=E7=9A=84=E5=BC=80=E5=8F=91=E7=8E=AF=E5=A2=83=E6=
=90=AD=E5=BB=BA=E4=B8=80=E4=B8=8B=EF=BC=8Cc=E5=9C=A8=E5=A4=A7=E4=B8=80=E7=
=9A=84=E6=97=B6=E5=80=99=E5=AD=A6=E8=BF=87=EF=BC=8C=E5=90=8E=E6=9D=A5=E5=B0=
=B1=E4=B8=80=E7=9B=B4=E7=94=A8java=EF=BC=8Cc=E5=9F=BA=E6=9C=AC=E5=BF=98=E5=
=BE=97=E4=B9=9F=E5=B7=AE=E4=B8=8D=E5=A4=9A=E4=BA=86=EF=BC=8C=E4=B8=8D=E8=BF=
=87=E4=B8=8D=E5=A6=A8=E7=A2=8D=E6=90=AD=E5=BB=BA=E5=BC=80=E5=8F=91=E7=8E=AF=
=E5=A2=83=E3=80=82 =
=E4=B8=BB=E8=A6=81=E5=8F=82=E8=80=83=E4=BA=86=E4=BB=A5=E4=B8=8B=E7=9A=84=E4=
=B8=80=E4=BA=9B=E6=95=99=E7=A8=8B=EF=BC=9A =
cygwin=E7=9A=84=E5=AE=89=E8=A3=85=EF=BC=9Ahttp://blog.csdn.net/jianping_s=
hen/archive/2011/04/03/6300292.aspx =
=E7=8E=AF=E5=A2=83=E7=9A=84=E6=90=AD=E5=BB=BA=EF=BC=9Ah ...">
<META name=3Dkeywords=20
content=3D"C, C++, C#, Eclipse, ITeye cygwin, cdt, =
eclipse=E6=90=AD=E5=BB=BAc, cpp=E7=8E=AF=E5=A2=83"><LINK=20
rel=3D"shortcut icon" type=3Dimage/x-icon =
href=3D"/images/favicon.ico"><LINK=20
title=3DITeye rel=3Dsearch type=3Dapplication/opensearchdescription+xml=20
href=3D"/open_search.xml"><LINK title=3D"" rel=3Dalternate =
type=3Dapplication/rss+xml=20
href=3D"/rss"><LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.iteye.com/stylesheets/blog.css?1334737652" =
media=3Dscreen><LINK=20
rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.iteye.com/stylesheets/themes/blog/blue.css?1326191326"=
=20
media=3Dscreen>
<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.iteye.com/javascripts/application.js?1332732182"></SCRI=
PT>

<SCRIPT type=3Dtext/javascript>=0A=
=0A=
  var _gaq =3D _gaq || [];=0A=
  _gaq.push(['_setAccount', 'UA-535605-1']);=0A=
  _gaq.push(['_setDomainName', 'iteye.com']);=0A=
  _gaq.push(['_trackPageview']);=0A=
=0A=
  (function() {=0A=
    var ga =3D document.createElement('script'); ga.type =3D =
'text/javascript'; ga.async =3D true;=0A=
    ga.src =3D ('https:' =3D=3D document.location.protocol ? =
'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';=0A=
    var s =3D document.getElementsByTagName('script')[0]; =
s.parentNode.insertBefore(ga, s);=0A=
  })();=0A=
=0A=
</SCRIPT>
<LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.iteye.com/javascripts/syntaxhighlighter/SyntaxHighligh=
ter.css?1324994303"=20
media=3Dscreen>
<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.iteye.com/javascripts/syntaxhighlighter/shCoreCommon.js=
?1325907333"></SCRIPT>

<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.iteye.com/javascripts/hotkey.js?1324994303"></SCRIPT>

<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.iteye.com/javascripts/code_favorites.js?1325907333"></S=
CRIPT>

<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.iteye.com/javascripts/weiboshare.js?1324994303"></SCRIP=
T>

<META name=3DGENERATOR content=3D"MSHTML 8.00.7600.16930"></HEAD>
<BODY>
<DIV id=3Dheader>
<DIV id=3Dblog_site_nav><A class=3Dhomepage =
href=3D"http://www.iteye.com/">=E9=A6=96=E9=A1=B5</A> <A=20
href=3D"http://www.iteye.com/news">=E8=B5=84=E8=AE=AF</A> <A=20
href=3D"http://www.iteye.com/magazines">=E7=B2=BE=E5=8D=8E</A> <A=20
href=3D"http://www.iteye.com/forums">=E8=AE=BA=E5=9D=9B</A> <A=20
href=3D"http://www.iteye.com/ask">=E9=97=AE=E7=AD=94</A> <A=20
href=3D"http://www.iteye.com/blogs">=E5=8D=9A=E5=AE=A2</A> <A=20
href=3D"http://www.iteye.com/blogs/subjects">=E4=B8=93=E6=A0=8F</A> <A=20
href=3D"http://www.iteye.com/groups">=E7=BE=A4=E7=BB=84</A> <A id=3Dmsna =
onclick=3D"return false;"=20
href=3D"http://yuanzhifei89.iteye.com/blog/1062721#"><U>=E6=9B=B4=E5=A4=9A=
</U>=20
<SMALL>=E2=96=BC</SMALL></A>=20
<DIV style=3D"DISPLAY: none" class=3Dquick_menu><A=20
href=3D"http://www.iteye.com/job">=E6=8B=9B=E8=81=98</A> <A=20
href=3D"http://www.iteye.com/search">=E6=90=9C=E7=B4=A2</A> </DIV></DIV>
<DIV id=3Duser_nav><A class=3Dwelcome title=3D=E7=99=BB=E5=BD=95=20
href=3D"http://yuanzhifei89.iteye.com/login">=E6=82=A8=E8=BF=98=E6=9C=AA=E7=
=99=BB=E5=BD=95 !</A> <A=20
href=3D"http://yuanzhifei89.iteye.com/login">=E7=99=BB=E5=BD=95</A> <A =
class=3Dnobg=20
href=3D"http://yuanzhifei89.iteye.com/signup">=E6=B3=A8=E5=86=8C</A> =
</DIV></DIV>
<DIV id=3Dpage>
<DIV id=3Dbranding class=3Dclearfix>
<DIV id=3Dblog_name>
<H1><A =
href=3D"http://yuanzhifei89.iteye.com/">yuanzhifei89</A></H1></DIV>
<DIV id=3Dfd></DIV>
<DIV id=3Dblog_navbar>
<UL>
  <LI class=3Dblog_navbar_for><A=20
  =
href=3D"http://yuanzhifei89.iteye.com/"><STRONG>=E5=8D=9A=E5=AE=A2</STRON=
G></A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/weibo">=E5=BE=AE=E5=8D=9A</A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/album">=E7=9B=B8=E5=86=8C</A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/link">=E6=94=B6=E8=97=8F</A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/guest_book">=E7=95=99=E8=A8=80=
</A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/profile">=E5=85=B3=E4=BA=8E=E6=
=88=91</A></LI></UL>
<DIV class=3Dsearch>
<FORM method=3Dget action=3D/blog/search><INPUT=20
style=3D"WIDTH: 110px; MARGIN-LEFT: 10px" id=3Dquery class=3Dsearch_text =
type=3Dtext=20
name=3Dquery> <INPUT class=3Dsubmit_search type=3Dsubmit> </FORM></DIV>
<DIV id=3Dfd></DIV></DIV></DIV>
<DIV id=3Dcontent class=3Dclearfix>
<DIV id=3Dmain>
<DIV class=3Dblog_main>
<DIV class=3Dblog_title>
<H3><A href=3D"http://yuanzhifei89.iteye.com/blog/1062721">cygwin, cdt,=20
eclipse=E6=90=AD=E5=BB=BAc, cpp=E7=8E=AF=E5=A2=83</A> <EM =
class=3Dactions></EM></H3>
<DIV class=3Dnews_tag><A =
href=3D"http://www.iteye.com/blogs/tag/C">C</A><A=20
href=3D"http://www.iteye.com/blogs/tag/C++">C++</A><A=20
href=3D"http://www.iteye.com/blogs/tag/C%23">C#</A><A=20
href=3D"http://www.iteye.com/blogs/tag/Eclipse">Eclipse</A><A=20
href=3D"http://www.iteye.com/blogs/tag/ITeye">ITeye</A></DIV></DIV>
<DIV id=3Dblog_content class=3Dblog_content><SPAN=20
style=3D"FONT-SIZE: =
medium"><BR>=E4=BB=8A=E5=A4=A9=E9=97=B2=E7=9D=80=E6=97=A0=E8=81=8A=EF=BC=8C=
=E7=AA=81=E7=84=B6=E6=83=B3=E5=88=B0=E4=B8=8A=E6=AC=A1eclipse=E8=A3=85=E4=
=BA=86cdt=E6=8F=92=E4=BB=B6=EF=BC=8C=E4=BA=8E=E6=98=AF=E5=87=86=E5=A4=87=E5=
=9C=A8eclipse=E4=B8=8B=E6=8A=8Ac,cpp=E7=9A=84=E5=BC=80=E5=8F=91=E7=8E=AF=E5=
=A2=83=E6=90=AD=E5=BB=BA=E4=B8=80=E4=B8=8B=EF=BC=8Cc=E5=9C=A8=E5=A4=A7=E4=
=B8=80=E7=9A=84=E6=97=B6=E5=80=99=E5=AD=A6=E8=BF=87=EF=BC=8C=E5=90=8E=E6=9D=
=A5=E5=B0=B1=E4=B8=80=E7=9B=B4=E7=94=A8java=EF=BC=8Cc=E5=9F=BA=E6=9C=AC=E5=
=BF=98=E5=BE=97=E4=B9=9F=E5=B7=AE=E4=B8=8D=E5=A4=9A=E4=BA=86=EF=BC=8C=E4=B8=
=8D=E8=BF=87=E4=B8=8D=E5=A6=A8=E7=A2=8D=E6=90=AD=E5=BB=BA=E5=BC=80=E5=8F=91=
=E7=8E=AF=E5=A2=83=E3=80=82=20
<BR><BR>=E4=B8=BB=E8=A6=81=E5=8F=82=E8=80=83=E4=BA=86=E4=BB=A5=E4=B8=8B=E7=
=9A=84=E4=B8=80=E4=BA=9B=E6=95=99=E7=A8=8B=EF=BC=9A =
<BR>cygwin=E7=9A=84=E5=AE=89=E8=A3=85=EF=BC=9A<A=20
href=3D"http://blog.csdn.net/jianping_shen/archive/2011/04/03/6300292.asp=
x"=20
target=3D_blank>http://blog.csdn.net/jianping_shen/archive/2011/04/03/630=
0292.aspx</A>=20
<BR><BR>=E7=8E=AF=E5=A2=83=E7=9A=84=E6=90=AD=E5=BB=BA=EF=BC=9A<A=20
href=3D"http://blog.csdn.net/jianping_shen/archive/2011/04/03/6300638.asp=
x"=20
target=3D_blank>http://blog.csdn.net/jianping_shen/archive/2011/04/03/630=
0638.aspx</A>=20
<BR><BR>launch failed binary not =
found=E9=94=99=E8=AF=AF=E7=9A=84=E8=A7=A3=E5=86=B3=EF=BC=9A<A=20
href=3D"http://blog.sina.com.cn/s/blog_58844e710100irt2.html"=20
target=3D_blank>http://blog.sina.com.cn/s/blog_58844e710100irt2.html</A> =

<BR></SPAN><BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN=20
style=3D"COLOR: =
blue">java=E5=BC=80=E5=8F=91=E7=8E=AF=E5=A2=83=E7=9A=84=E6=90=AD=E5=BB=BA=
=E5=B0=B1=E4=B8=8D=E5=86=8D=E8=BF=99=E8=BE=B9=E4=BB=8B=E7=BB=8D=E4=BA=86=EF=
=BC=8Cgoogle=E4=B8=80=E4=B8=8B=EF=BC=8C=E7=BD=91=E4=B8=8A=E5=BE=88=E5=A4=9A=
</SPAN></SPAN> <BR><SPAN=20
style=3D"FONT-SIZE: medium"><SPAN style=3D"COLOR: =
blue">1=EF=BC=9A=E9=A6=96=E5=85=88=E6=98=AF=E5=AE=89=E8=A3=85cdt=E6=8F=92=
=E4=BB=B6</SPAN></SPAN>=20
<BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489233/229200b5-52bf-39cf-98=
f7-deab01d37330.png">=20
<BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN=20
style=3D"COLOR: =
blue">2=EF=BC=9A=E5=AE=89=E8=A3=85=E5=AE=8C=E5=90=8E=EF=BC=8C=E6=8C=89=E7=
=85=A7=E4=B8=8A=E9=9D=A2=E6=8F=90=E4=BE=9B=E7=9A=84cygwin=E5=AE=89=E8=A3=85=
=E6=95=99=E7=A8=8B=EF=BC=8C=E6=8A=8Acygwin=E5=AE=89=E8=A3=85=E5=A5=BD=E3=80=
=82=E7=84=B6=E5=90=8E=E6=89=8D=E8=83=BD=E5=9C=A8=E8=BF=99=E8=BE=B9=E9=85=8D=
=E7=BD=AEcygwin</SPAN></SPAN>=20
<BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489239/1c267bc3-220c-3ab2-b6=
ee-2668f37de785.png">=20
<BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN=20
style=3D"COLOR: =
blue">3=EF=BC=9A=E9=85=8D=E7=BD=AE=E5=AE=8C=E5=90=8E=EF=BC=8C=E5=9F=BA=E6=
=9C=AC=E5=B0=B1=E5=8F=AF=E4=BB=A5=E5=88=9B=E5=BB=BA=E4=B8=80=E4=B8=AAcpp=E5=
=B7=A5=E7=A8=8B=E6=9D=A5=E6=B5=8B=E8=AF=95=E4=B8=80=E4=B8=8B=E4=BA=86</SP=
AN></SPAN> <BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489243/68436e3b-d095-3d2d-80=
8d-6aadbb5f6ad8.png">=20
<BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN=20
style=3D"COLOR: =
blue">4=EF=BC=9A=E5=B7=A5=E7=A8=8B=E5=88=9B=E5=BB=BA=E5=A5=BD=E5=90=8E=EF=
=BC=8C=E6=88=91=E4=BB=AC=E8=BF=98=E9=9C=80=E8=A6=81=E5=9C=A8=E5=B7=A5=E7=A8=
=8B=E4=B8=8A -&gt; =
properties=E6=9D=A5=E9=85=8D=E7=BD=AE=E4=B8=80=E4=BA=9B=E5=86=85=E5=AE=B9=
</SPAN></SPAN>=20
<BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489237/d765194f-ac0e-3066-b7=
c5-33863e0758eb.png">=20
<BR><BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489235/76e000ba-274d-3810-92=
f8-c8acd576c9c1.png">=20
<BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN=20
style=3D"COLOR: =
blue">5=EF=BC=9A=E5=88=9B=E5=BB=BA=E5=AE=8C=E6=88=90=E5=90=8E=EF=BC=8C=E9=
=A6=96=E5=85=88=E4=BD=A0=E9=9C=80=E8=A6=81=E7=BC=96=E8=AF=91=E6=95=B4=E4=B8=
=AA=E9=A1=B9=E7=9B=AE</SPAN></SPAN> <BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489241/c4900051-da80-3825-85=
09-3ff34a1cf663.png">=20
<BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN=20
style=3D"COLOR: =
blue">6=EF=BC=9A=E7=BC=96=E8=AF=91=E6=88=90=E5=8A=9F=E4=BC=9A=E5=9C=A8=E6=
=8E=A7=E5=88=B6=E5=8F=B0=E6=98=BE=E7=A4=BA=E4=B8=8B=E9=9D=A2=E7=9A=84=E5=86=
=85=E5=AE=B9</SPAN></SPAN> <BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489245/dedebe8d-e409-386f-b6=
25-92dfb592c501.png">=20
<BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN style=3D"COLOR: =
blue">7=EF=BC=9A=E7=84=B6=E5=90=8E=EF=BC=8Crun as=20
-&gt; local c/c++ =
application=EF=BC=8C=E9=A6=96=E5=85=88=E4=BC=9A=E8=AE=A9=E6=88=91=E4=BB=AC=
=E9=80=89=E6=8B=A9=E8=B0=83=E8=AF=95=E5=99=A8=EF=BC=8C=E9=80=89=E6=8B=A9=E5=
=90=8E=E5=B0=B1=E4=BC=9A=E5=9C=A8=E6=8E=A7=E5=88=B6=E5=8F=B0=E6=98=BE=E7=A4=
=BAhello world</SPAN></SPAN>=20
<BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489247/9ec36874-1502-36d0-9b=
8e-87b57a011d0d.png">=20
<BR><BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489251/c8c6bfe0-cd59-3ed2-89=
8a-8f27b7745ad7.png">=20
<BR><BR><BR><SPAN style=3D"FONT-SIZE: medium"><SPAN=20
style=3D"COLOR: =
blue">8=EF=BC=9A=E5=A6=82=E6=9E=9C=E6=B2=A1=E6=9C=89=E7=BC=96=E8=AF=91=E5=
=B0=B1=E7=9B=B4=E6=8E=A5run as -&gt; local c/c++=20
application=E5=B0=B1=E4=BC=9A=E5=87=BA=E7=8E=B0=E4=B8=80=E4=B8=8B=E9=94=99=
=E8=AF=AF</SPAN></SPAN> <BR><IMG=20
src=3D"http://dl.iteye.com/upload/attachment/489249/6a535926-3129-3f40-84=
ee-736be8e037cc.png">=20
<BR><BR><BR><SPAN style=3D"FONT-SIZE: medium">=E5=85=B6=E5=AE=83</SPAN> =
<BR>win7=E4=B8=8B=E5=AE=89=E8=A3=85vc6=EF=BC=9A<A=20
href=3D"http://club.topsage.com/thread-2279554-1-1.html"=20
target=3D_blank>http://club.topsage.com/thread-2279554-1-1.html</A> =
<BR></DIV>
<DIV class=3Dattachments>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9233/229200b5-52bf-39c=
f-98f7-deab01d37330.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9233/229200b5-52bf-39cf=
-98f7-deab01d37330-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 70.2 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9235/76e000ba-274d-381=
0-92f8-c8acd576c9c1.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9235/76e000ba-274d-3810=
-92f8-c8acd576c9c1-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 33.1 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9237/d765194f-ac0e-306=
6-b7c5-33863e0758eb.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9237/d765194f-ac0e-3066=
-b7c5-33863e0758eb-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 29.6 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9239/1c267bc3-220c-3ab=
2-b6ee-2668f37de785.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9239/1c267bc3-220c-3ab2=
-b6ee-2668f37de785-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 75.7 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9241/c4900051-da80-382=
5-8509-3ff34a1cf663.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9241/c4900051-da80-3825=
-8509-3ff34a1cf663-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 9.4 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9243/68436e3b-d095-3d2=
d-808d-6aadbb5f6ad8.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9243/68436e3b-d095-3d2d=
-808d-6aadbb5f6ad8-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 51.8 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9245/dedebe8d-e409-386=
f-b625-92dfb592c501.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9245/dedebe8d-e409-386f=
-b625-92dfb592c501-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 14.5 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9247/9ec36874-1502-36d=
0-9b8e-87b57a011d0d.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9247/9ec36874-1502-36d0=
-9b8e-87b57a011d0d-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 27.5 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9249/6a535926-3129-3f4=
0-84ee-736be8e037cc.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9249/6a535926-3129-3f40=
-84ee-736be8e037cc-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 19.9 KB</LI></UL>
<UL style=3D"DISPLAY: none">
  <LI><A=20
  =
href=3D"http://dl.iteye.com/upload/attachment/0048/9251/c8c6bfe0-cd59-3ed=
2-898a-8f27b7745ad7.png"=20
  target=3D_blank><IMG class=3Dmagplus =
title=3D=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=
=B0=8F=E5=9B=BE=E7=89=87=20
  =
src=3D"http://dl.iteye.com/upload/attachment/0048/9251/c8c6bfe0-cd59-3ed2=
-898a-8f27b7745ad7-thumb.png"></A></LI>
  <LI>=E5=A4=A7=E5=B0=8F: 4.1 KB</LI></UL>
<UL>
  <LI><A=20
  onclick=3D"$$('div.attachments =
ul').invoke('show');$(this).up(1).hide();return false;"=20
  =
href=3D"http://yuanzhifei89.iteye.com/blog/1062721#">=E6=9F=A5=E7=9C=8B=E5=
=9B=BE=E7=89=87=E9=99=84=E4=BB=B6</A></LI></UL></DIV>
<SCRIPT type=3Dtext/javascript><!--
google_ad_client =3D "ca-pub-1076724771190722";
/* JE=E4=B8=AA=E4=BA=BA=E5=8D=9A=E5=AE=A2468x60 */
google_ad_slot =3D "5506163105";
google_ad_width =3D 468;
google_ad_height =3D 60;
//-->
</SCRIPT>

<SCRIPT type=3Dtext/javascript=20
src=3D"http://pagead2.googlesyndication.com/pagead/show_ads.js">
</SCRIPT>

<DIV id=3Dbottoms class=3Dclearfix>
<DIV id=3Dshare_weibo>=E5=88=86=E4=BA=AB=E5=88=B0=EF=BC=9A <A =
title=3D=E5=88=86=E4=BA=AB=E5=88=B0=E6=96=B0=E6=B5=AA=E5=BE=AE=E5=8D=9A =
href=3D"javascript:;"=20
data-type=3D"sina"><IMG =
src=3D"http://yuanzhifei89.iteye.com/images/sina.jpg"></A>=20
<A =
title=3D=E5=88=86=E4=BA=AB=E5=88=B0=E8=85=BE=E8=AE=AF=E5=BE=AE=E5=8D=9A =
href=3D"javascript:;" data-type=3D"qq"><IMG=20
src=3D"http://yuanzhifei89.iteye.com/images/tec.jpg"></A> </DIV></DIV>
<DIV class=3Dblog_nav>
<DIV class=3Dpre_next><A class=3Dnext =
title=3Dchrome=E5=BF=AB=E6=8D=B7=E9=94=AE=E6=94=B6=E8=97=8F=20
href=3D"http://yuanzhifei89.iteye.com/blog/1081875">chrome=E5=BF=AB=E6=8D=
=B7=E9=94=AE=E6=94=B6=E8=97=8F</A> | <A class=3Dpre=20
title=3D"Android =E5=B1=8F=E5=B9=95=E5=85=BC=E5=AE=B9=E6=80=A7" =
href=3D"http://yuanzhifei89.iteye.com/blog/1010497">Android=20
=E5=B1=8F=E5=B9=95=E5=85=BC=E5=AE=B9=E6=80=A7</A> </DIV></DIV>
<DIV class=3Dblog_bottom>
<UL>
  <LI>2011-05-28 01:47</LI>
  <LI>=E6=B5=8F=E8=A7=88 783</LI>
  <LI><A=20
  =
href=3D"http://yuanzhifei89.iteye.com/blog/1062721#comments">=E8=AF=84=E8=
=AE=BA(0)</A></LI>
  <LI>=E5=88=86=E7=B1=BB:<A =
href=3D"http://www.iteye.com/blogs/category/language">=E7=BC=96=E7=A8=8B=E8=
=AF=AD=E8=A8=80</A></LI>
  <LI class=3Dlast><A class=3Dmore =
href=3D"http://www.iteye.com/wiki/blog/1062721"=20
  =
target=3D_blank>=E7=9B=B8=E5=85=B3=E6=8E=A8=E8=8D=90</A></LI></UL></DIV>
<DIV class=3Dblog_comment>
<H5>=E8=AF=84=E8=AE=BA</H5><A id=3Dcomments name=3Dcomments></A></DIV>
<DIV class=3Dblog_comment>
<H5>=E5=8F=91=E8=A1=A8=E8=AF=84=E8=AE=BA</H5>
<P style=3D"TEXT-ALIGN: center; MARGIN-TOP: 30px; MARGIN-BOTTOM: 0px"><A =

style=3D"BACKGROUND-COLOR: white" =
href=3D"http://yuanzhifei89.iteye.com/login"><IMG=20
style=3D"VERTICAL-ALIGN: middle; MARGIN-RIGHT: 10px"=20
src=3D"http://yuanzhifei89.iteye.com/images/login_icon.png"></A><A=20
href=3D"http://yuanzhifei89.iteye.com/login"> =
=E6=82=A8=E8=BF=98=E6=B2=A1=E6=9C=89=E7=99=BB=E5=BD=95,=E8=AF=B7=E6=82=A8=
=E7=99=BB=E5=BD=95=E5=90=8E=E5=86=8D=E5=8F=91=E8=A1=A8=E8=AF=84=E8=AE=BA =

</A></P></DIV></DIV>
<SCRIPT type=3Dtext/javascript>=0A=
  dp.SyntaxHighlighter.HighlightAll('code', true, true);=0A=
=0A=
  $$('#main .blog_content pre[name=3Dcode]').each(function(pre, index){ =
// blog content=0A=
    var post_id =3D 1062721;=0A=
    var location =3D window.location;=0A=
    source_url =3D location.protocol + "//" + location.host + =
location.pathname + location.search;=0A=
    pre.writeAttribute('codeable_id', post_id);=0A=
    pre.writeAttribute('codeable_type', "Blog");=0A=
    pre.writeAttribute('source_url', source_url);=0A=
    pre.writeAttribute('pre_index', index);=0A=
    pre.writeAttribute('title', 'cygwin, cdt, =
eclipse=E6=90=AD=E5=BB=BAc, cpp=E7=8E=AF=E5=A2=83');=0A=
  });=0A=
  $$('#main .blog_comment > div').each(function(comment){// comment=0A=
    var post_id =3D comment.id.substr(2);=0A=
    $$("#"+comment.id+" pre[name=3Dcode]").each(function(pre, index){=0A=
      var location =3D window.location;=0A=
      source_url =3D location.protocol + "//" + location.host + =
location.pathname + location.search;=0A=
      source_url +=3D "#" + comment.id;=0A=
      pre.writeAttribute('codeable_id', post_id);=0A=
      pre.writeAttribute('codeable_type', "BlogComment");=0A=
      pre.writeAttribute('source_url', source_url);=0A=
      pre.writeAttribute('pre_index', index);=0A=
      pre.writeAttribute('title', 'cygwin, cdt, =
eclipse=E6=90=AD=E5=BB=BAc, cpp=E7=8E=AF=E5=A2=83');=0A=
    });=0A=
  });=0A=
  code_favorites_init();=0A=
=0A=
  fix_image_size($$('div.blog_content img'), 700);=0A=
  function quote_comment(id) {=0A=
    new Ajax.Request('/editor/quote', {=0A=
      parameters: {'id':id, 'type':'BlogComment'},=0A=
      =
onSuccess:function(response){editor.bbcode_editor.textarea.insertAfterSel=
ection(response.responseText);=0A=
        Element.scrollTo(editor.bbcode_editor.textarea.element);}=0A=
    });=0A=
  }=0A=
=0A=
  new WeiboShare({share_buttons: $('share_weibo'), img_scope: =
$('blog_content')});=0A=
</SCRIPT>
</DIV>
<DIV id=3Dlocal>
<DIV class=3Dlocal_top></DIV>
<DIV id=3Dblog_owner>
<DIV id=3Dblog_owner_logo><A =
href=3D"http://yuanzhifei89.iteye.com/"><IMG class=3Dlogo=20
title=3D"yuanzhifei89=E7=9A=84=E5=8D=9A=E5=AE=A2: " =
alt=3Dyuanzhifei89=E7=9A=84=E5=8D=9A=E5=AE=A2=20
src=3D"http://www.iteye.com/upload/logo/user/441759/209c1a13-c246-391a-92=
00-fcb09352a593.png?1300682948"></A></DIV>
<DIV id=3Dblog_owner_name>yuanzhifei89</DIV></DIV>
<DIV id=3Dblog_actions>
<UL>
  <LI>=E6=B5=8F=E8=A7=88: 30982 =E6=AC=A1</LI>
  <LI>=E6=80=A7=E5=88=AB: <IMG title=3D=E7=94=B7 alt=3DIcon_minigender_1 =

  =
src=3D"http://www.iteye.com/images/icon_minigender_1.gif?1324994303"></LI=
>
  <LI>=E6=9D=A5=E8=87=AA: =E8=8B=8F=E5=B7=9E</LI>
  <LI><IMG=20
src=3D"http://yuanzhifei89.iteye.com/images/status/offline.gif"></LI></UL=
></DIV>
<DIV id=3Duser_visits class=3Dclearfix>
<H5>=E6=9C=80=E8=BF=91=E8=AE=BF=E5=AE=A2 <SPAN=20
style=3D"PADDING-LEFT: 30px; FONT-SIZE: 12px; FONT-WEIGHT: normal"><A=20
href=3D"http://yuanzhifei89.iteye.com/blog/user_visits">=E6=9B=B4=E5=A4=9A=
=E8=AE=BF=E5=AE=A2&gt;&gt;</A></SPAN></H5>
<DIV class=3Duser_visit>
<DIV class=3Dlogo><A href=3D"http://huangyuan.iteye.com/" =
target=3D_blank><IMG=20
class=3Dlogo title=3D"folie2006=E7=9A=84=E5=8D=9A=E5=AE=A2: =
=E7=A9=BA=E6=B0=94=E4=B8=AD=E6=B0=B8=E6=81=92=E7=9A=84=E6=98=AF=E4=BB=80=E4=
=B9=88" alt=3Dfolie2006=E7=9A=84=E5=8D=9A=E5=AE=A2=20
src=3D"http://www.iteye.com/upload/logo/user/29902/ae9375dc-96d1-3e29-984=
a-b900df7a1d97-thumb.jpg?1236833165"></A></DIV>
<DIV class=3Dleft><A href=3D"http://huangyuan.iteye.com/"=20
target=3D_blank>folie2006</A></DIV></DIV>
<DIV class=3Duser_visit>
<DIV class=3Dlogo><A href=3D"http://zhugaopeng.iteye.com/" =
target=3D_blank><IMG=20
class=3Dlogo title=3D"zhugaopeng=E7=9A=84=E5=8D=9A=E5=AE=A2: zhugaopeng" =
alt=3Dzhugaopeng=E7=9A=84=E5=8D=9A=E5=AE=A2=20
src=3D"http://www.iteye.com/images/user-logo-thumb.gif?1324994303"></A></=
DIV>
<DIV class=3Dleft><A href=3D"http://zhugaopeng.iteye.com/"=20
target=3D_blank>zhugaopeng</A></DIV></DIV>
<DIV class=3Duser_visit>
<DIV class=3Dlogo><A href=3D"http://computer0112.iteye.com/" =
target=3D_blank><IMG=20
class=3Dlogo title=3D"computer0112=E7=9A=84=E5=8D=9A=E5=AE=A2: " =
alt=3Dcomputer0112=E7=9A=84=E5=8D=9A=E5=AE=A2=20
src=3D"http://www.iteye.com/images/user-logo-thumb.gif?1324994303"></A></=
DIV>
<DIV class=3Dleft><A href=3D"http://computer0112.iteye.com/"=20
target=3D_blank>computer0112</A></DIV></DIV>
<DIV class=3Duser_visit>
<DIV class=3Dlogo><A href=3D"http://sxmxlp.iteye.com/" =
target=3D_blank><IMG class=3Dlogo=20
title=3D"sxmxlp=E7=9A=84=E5=8D=9A=E5=AE=A2: " =
alt=3Dsxmxlp=E7=9A=84=E5=8D=9A=E5=AE=A2=20
src=3D"http://www.iteye.com/images/user-logo-thumb.gif?1324994303"></A></=
DIV>
<DIV class=3Dleft><A href=3D"http://sxmxlp.iteye.com/"=20
target=3D_blank>sxmxlp</A></DIV></DIV></DIV>
<DIV id=3Dblog_menu>
<H5>=E6=96=87=E7=AB=A0=E5=88=86=E7=B1=BB</H5>
<UL>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/">=E5=85=A8=E9=83=A8=E5=8D=9A=E5=AE=
=A2 (41)</A></LI>
  <LI><A href=3D"http://yuanzhifei89.iteye.com/category/163513">android=20
  (21)</A></LI>
  <LI><A href=3D"http://yuanzhifei89.iteye.com/category/163976">eclipse=20
  (2)</A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/category/167961">=E8=AE=BE=E8=AE=A1=
=E6=A8=A1=E5=BC=8F (0)</A></LI>
  <LI><A href=3D"http://yuanzhifei89.iteye.com/category/170601">java =
(3)</A></LI>
  <LI><A href=3D"http://yuanzhifei89.iteye.com/category/174459">android =
ui=20
  (1)</A></LI>
  <LI><A href=3D"http://yuanzhifei89.iteye.com/category/177326">swing =
(0)</A></LI>
  <LI><A href=3D"http://yuanzhifei89.iteye.com/category/177790">ide =
(0)</A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/category/178391">=E7=BC=96=E7=A8=8B=
=E5=9F=BA=E7=A1=80 (1)</A></LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/category/178485">=E5=85=B6=E5=AE=83=
 (2)</A></LI>
  <LI><A href=3D"http://yuanzhifei89.iteye.com/category/190352">ndk=20
(1)</A></LI></UL></DIV>
<DIV id=3Dmonth_blogs>
<H5>=E7=A4=BE=E5=8C=BA=E7=89=88=E5=9D=97</H5>
<UL>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/news">=E6=88=91=E7=9A=84=E8=B5=
=84=E8=AE=AF</A> (0)</LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/post">=E6=88=91=E7=9A=84=E8=AE=
=BA=E5=9D=9B</A> (1) </LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/solution">=E6=88=91=E8=A7=A3=E5=
=86=B3=E7=9A=84=E9=97=AE=E9=A2=98</A>=20
(1)</LI></UL></DIV>
<DIV id=3Dmonth_blogs>
<H5>=E5=AD=98=E6=A1=A3=E5=88=86=E7=B1=BB</H5>
<UL>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/monthblog/2011-12">2011-12</A>=
=20
  (1)</LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/monthblog/2011-11">2011-11</A>=
=20
  (4)</LI>
  <LI><A =
href=3D"http://yuanzhifei89.iteye.com/blog/monthblog/2011-10">2011-10</A>=
=20
  (4)</LI>
  <LI><A=20
  =
href=3D"http://yuanzhifei89.iteye.com/blog/monthblog_more">=E6=9B=B4=E5=A4=
=9A=E5=AD=98=E6=A1=A3...</A></LI></UL></DIV>
<DIV id=3Dcomments_top>
<H5>=E8=AF=84=E8=AE=BA=E6=8E=92=E8=A1=8C=E6=A6=9C</H5>
<UL>
  <LI><A title=3D"android json=E8=A7=A3=E6=9E=90"=20
  href=3D"http://yuanzhifei89.iteye.com/blog/1141385">android =
json=E8=A7=A3=E6=9E=90</A></LI>
  <LI><A title=3D"android xml=E8=A7=A3=E6=9E=90 - sax"=20
  href=3D"http://yuanzhifei89.iteye.com/blog/1150726">android =
xml=E8=A7=A3=E6=9E=90 - sax</A></LI>
  <LI><A =
title=3Dwindows=E4=B8=8B=E9=85=8D=E7=BD=AEandroid=E6=BA=90=E7=A0=81=E8=8E=
=B7=E5=8F=96=E7=8E=AF=E5=A2=83=20
  =
href=3D"http://yuanzhifei89.iteye.com/blog/1117549">windows=E4=B8=8B=E9=85=
=8D=E7=BD=AEandroid=E6=BA=90=E7=A0=81=E8=8E=B7=E5=8F=96=E7=8E=AF=E5=A2=83=
</A></LI></UL></DIV>
<DIV id=3Dguest_books>
<H5>=E6=9C=80=E6=96=B0=E8=AF=84=E8=AE=BA</H5>
<UL>
  <LI><A href=3D"http://lenomon.iteye.com/" =
target=3D_blank>lenomon</A>=EF=BC=9A =
=E5=AE=9E=E7=8E=B0=E5=8F=AF=E7=82=B9=E5=87=BB=E6=96=87=E6=9C=AC=E3=80=82 =

  android TextView =E7=82=B9=E5=87=BB=E9=93=BE=E6=8E=A5 ...<BR><A=20
  href=3D"http://yuanzhifei89.iteye.com/blog/983944#bc2251666">TextView=20
  url=E8=AF=86=E5=88=AB=EF=BC=8CSpannable=E7=9A=84=E4=BD=BF=E7=94=A8</A> =
</LI>
  <LI><A href=3D"http://sybell.iteye.com/" =
target=3D_blank>sybell</A>=EF=BC=9A =
=E7=9C=9F=E6=98=AF=E4=B8=8D=E9=94=99=EF=BC=81<BR><A=20
  =
href=3D"http://yuanzhifei89.iteye.com/blog/974082#bc2244968">Eclipse=E8=AE=
=BE=E7=BD=AE=E3=80=81=E8=B0=83=E4=BC=98=E3=80=81=E4=BD=BF=E7=94=A8</A>=20
  </LI>
  <LI><A href=3D"http://lhx295801268.iteye.com/" =
target=3D_blank>lhx295801268</A>=EF=BC=9A=20
  =E6=8C=BA=E6=9C=89=E6=84=9F=E8=A7=89=E5=88=B0 =E4=B8=8D=E9=94=99<BR><A =

  href=3D"http://yuanzhifei89.iteye.com/blog/1141385#bc2239654">android =
json=E8=A7=A3=E6=9E=90</A>=20
  </LI>
  <LI><A href=3D"http://lsz10122.iteye.com/" =
target=3D_blank>lsz10122</A>=EF=BC=9A=20
  =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&=
nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&n=
bsp;<BR><A=20
  href=3D"http://yuanzhifei89.iteye.com/blog/1150726#bc2238097">android =
xml=E8=A7=A3=E6=9E=90 -=20
  sax</A> </LI>
  <LI><A href=3D"http://xierh21.iteye.com/" =
target=3D_blank>xierh21</A>=EF=BC=9A=20
  =E4=B8=8D=E9=94=99=E3=80=82=E8=AF=95=E8=AF=95=E7=9C=8B=E3=80=82<BR><A=20
  =
href=3D"http://yuanzhifei89.iteye.com/blog/1117549#bc2226980">windows=E4=B8=
=8B=E9=85=8D=E7=BD=AEandroid=E6=BA=90=E7=A0=81=E8=8E=B7=E5=8F=96=E7=8E=AF=
=E5=A2=83</A>=20
  </LI></UL></DIV>
<DIV class=3Dlocal_bottom></DIV></DIV></DIV>
<DIV id=3Dfooter class=3Dclearfix>
<DIV id=3Dcopyright>
<HR>
=E5=A3=B0=E6=98=8E=EF=BC=9AITeye=E6=96=87=E7=AB=A0=E7=89=88=E6=9D=83=E5=B1=
=9E=E4=BA=8E=E4=BD=9C=E8=80=85=EF=BC=8C=E5=8F=97=E6=B3=95=E5=BE=8B=E4=BF=9D=
=E6=8A=A4=E3=80=82=E6=B2=A1=E6=9C=89=E4=BD=9C=E8=80=85=E4=B9=A6=E9=9D=A2=E8=
=AE=B8=E5=8F=AF=E4=B8=8D=E5=BE=97=E8=BD=AC=E8=BD=BD=E3=80=82=E8=8B=A5=E4=BD=
=9C=E8=80=85=E5=90=8C=E6=84=8F=E8=BD=AC=E8=BD=BD=EF=BC=8C=E5=BF=85=E9=A1=BB=
=E4=BB=A5=E8=B6=85=E9=93=BE=E6=8E=A5=E5=BD=A2=E5=BC=8F=E6=A0=87=E6=98=8E=E6=
=96=87=E7=AB=A0=E5=8E=9F=E5=A7=8B=E5=87=BA=E5=A4=84=E5=92=8C=E4=BD=9C=E8=80=
=85=E3=80=82<BR>=C2=A9 2003-2011=20
ITeye.com. All rights reserved. [ =E4=BA=ACICP=E8=AF=81110151=E5=8F=B7 =
=E4=BA=AC=E5=85=AC=E7=BD=91=E5=AE=89=E5=A4=87110105010620 ]=20
</DIV></DIV></DIV>
<SCRIPT type=3Dtext/javascript>=0A=
  document.write("<img src=3D'http://stat.iteye.com/?url=3D"+ =
encodeURIComponent(document.location.href) + "&referrer=3D" + =
encodeURIComponent(document.referrer) + "&user_id=3D' width=3D'0' =
height=3D'0' />");=0A=
</SCRIPT>
</BODY></HTML>

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489233/229200b5-52bf-39cf-98f7-deab01d37330.png

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
Tgtokfx/hIWRbcdxnQsAAAAASUVORK5CYII=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489239/1c267bc3-220c-3ab2-b6ee-2668f37de785.png

iVBORw0KGgoAAAANSUhEUgAAA5IAAAJHCAYAAADi9Wk6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAP+lSURBVHhe7P0JkGXVeeeL5o14ES/iRbx3u933
tdtxr7tf3+u23dd2u5EB0+m23YMsS7YsNNmALDPJzm7ZCCNZCAkkS6IKqkBTogkJIQlLICiKoSQg
BQKKeSimmseszMrKmrMyq3KouQp9b31r2HuttdeeztnnnH3O+WfEFyfP2dPa/7328Nvft75vYPfe
fdSs7dm3j/bs3S/WE9uefQdozz71nT/V9wO0l22/sSnxf6vN3l6x//eJ9rHF7bT+F/uyl/eH94u1
2yNs917atXsPTe4ytpt2Tiqb2LmLdkxMxrZjgsbGLRvbQduFjUY2Ttu2+zYmfrNsdIy2RrZd/L+d
tmxjG41tq/jfss1btxHbpi0h20obNxvbQhs3xbZB/M8mf4vm2SrWw7ZNbpfbwm3ePjYu9m2H2r8d
O2nc7LfQgHWYYD0c49/0NNapTcbtaqXxvo+J47xd6GCOLevDOrFem8VxYe1YT6Pvho2bab20TbRu
Q76pecO2YdNmsd4ipo5tyOxjXeb/TWKfHNP9JNzvuE+OttTkOSDPjR60CrST1wxLo/i6os7p+Lok
rlPi3JZ9Wp/fqp9Xb+N87UizCb6u2Nbac7mV14l6r9toLPQNHuP4Hmb6BH9G/SV0D7PuWc756PRj
6/5k3W/C10p1/fOvl2vXb6TYNtDadbGtEf/7tnrtejK2RvxvpvM6eN28DXkPFO3h6xW3ne/HvK/m
nCh+Huj7gj6PbM3c+358j3evXfH10rmmWvdvcz137w/uPcXXJ6RL2m9r128Qumyk9UIbvm+xLupZ
YFQ+i5jrhn+tqHd/b+460spnF6Pbjp3iOTKyXdYzjLoG288b8jzk63f03KieP7YG7oNbzXOiPn72
PcC5H+jnPNNP5fr18ys/56hzwTZ9jci4R9h9Ymp6hr729W9KRnCemcXzmnx+DJh5zk587hLP3znG
z/cPrvgxHRTbneTn94B9+ZZv0/v+YqiQfXn422Kbe4LGnPPggz+mqYPTDhvI59+AucfaPu7q/y8N
f8tpE3/n9fi/qzYpLQyf7JK84tke8V2wTGTW9ANT0/TNb36LZmYOy/WY9vI6too+s3jxDTTQPEQa
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
nKgSeBFLAAAAAElFTkSuQmCC

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489243/68436e3b-d095-3d2d-808d-6aadbb5f6ad8.png

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
S/WJP1XXYosAAAAASUVORK5CYII=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489237/d765194f-ac0e-3066-b7c5-33863e0758eb.png

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489235/76e000ba-274d-3810-92f8-c8acd576c9c1.png

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
wQf9oQoXd8TPnEkkS2hrU9rURuw7nZ/fNm0a5y368EMh4JaW9kmTWh58kL4Jln8KwAz626y0tLS5
uTkzM5Nbwe1EXwcOnHHGGS0tLdqHYAKVmJiYuLi4r7/++uyzkYu42+BRmaC/UD7/PPHnPyd9+zY+
8UTiddeRxMTTv/pV3MMPN27f3n722YkzZvi+/VaViWAzE5qWv/xSHXhOn05MSyNJSQ0VFcqI4mto
SLj++rZDh5649NLavn0XvfrqmSdPbp048UPeWkPau++e//HHrVFRd197bbthhiPr1VcHnTy54cor
dacuOnDgsurqhy677FD//ta+b32bmu54+eXo9nbaeGNsLHsqrq3td6+80hQbu/qaa2i12e+8M+qr
r1Zce+2lNTUT6utpfP0bGpQojyckrLla8zz/Pk1Ny3ftOhUXl3/NNbrf9f0aG++qqNh+3nnfOX78
spqawp/8pCkmJv0f/+jX1PTQpZcufuWVbxMTCyZP/s3f/z72yy+LLrnkZHz84pdfPhUfH9PeTkOl
9en7Q+M5+6uv8q6+esiJE794912l8baoqOozzzz3k08SmQmGxy666Ms+fejBmKNH095550RCwloq
OqG9Rf0bG7NeeSWhtfXT/v03X3JJG0zCWWJjYwcMGHDLLbeYVYiAFOSnTvXp29dn+PcMJOgHdOL4
8aRevZCCvBvhXZk4dSrpiivazj+/6YEHki65hFrF6Tlz4jZtMpOJU3v2UF9OuPXW6L17G159lcqE
sEry9NOSTCTOmUNOnaJ/qjbffz+9JG7lytM33th2+eVRVVWJv/pV6zXXNK9e7e+XmsScOVGHDzev
Xdt6pbDd2nfiROLs2fQP7qa1a9uuuEIT5JEjSddeS1pb24cPb3z+eeNd0Aujamr4dyjPhSSkp/u+
/jrge+FrWbWq7Uc/Cv6utbcnzpwZ9dlnLfPnt153XcJvftPxne80FRaS+HjhbFNTr8sv7+jTp2HX
Ltqm9F7R9y3uwQdj/vKXxm3biLwWE790adSXXzaUl2uiOHo0if6V39bGBtY6Y0Zzbq7viy+S/vu/
6ScV9dFHVPik9z9x7lzf4cMNL76Y9OMf0zAad+70fzr0EznzTOEz7devbeLE9mHDTs+fTxtLmD+f
iiC9NuqddxLuuIO+OR0DBsRt2BD9t781/vWv9NOM2bWLhqSZt2htTZo+nQbGf3vFHxX9e0k/zVmz
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
gxG+AAAAAElFTkSuQmCC

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489241/c4900051-da80-3825-8509-3ff34a1cf663.png

iVBORw0KGgoAAAANSUhEUgAAAOsAAAENCAYAAADuYJL+AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACUJSURBVHhe7Z37sxbFmcff/2L/Bao2sQR5/Xlr
f9mq3cQ1GAXMIq/sppJNhcQYk1gU3uVVspULiQnBA4jRcDsgBySosN5IDIjwguIlygoIXgDxcM6B
cw635Nm+zKW75z5nZt7p9/1S1cU7Mz3dT3c/n36enjnzdOPq3/5OPD27fTt9//t30Jw5c61JXF4u
t9sG/C/HEqk3+6AxcfEqbX5mK33zm9+iZb96jJ5Y83trEpf3G/8xT8jP24GEPuhlHWiMjV+mb3/n
u7Ts17+hdRs20Y7nd1mTXtj1Ev3il78W8vN2IKEPelkHGufGLtFNX59NTz61jp7b+TLt3XfImvRG
520hK5eftwMJfdDLOtA4dXaCvjbrFnp67SZ68ZW9tO/Au0paQV9rNKjhpWvpB0Pq9ZS/h+6mLzVy
3qvJo9e3/+Bf6Y3Oe0J+3o74NETztLY0aN76pHvKvn6YHpip9O/MpbQ3sR1lyzSV8nkfX08P7JtK
GcF7195mjlVIPesXUOO2ITq1byldl0uGcmRP1ku1vVEyyPONT86M041M2dduGKKX/7SfDrx5REkr
aVZjOt35rDw39KPp1LhmEQ1pedT8ZfzWZdDlk/Vx+Xk74tMW+gZr8P17nXzr2OA2FtBTifcllZvz
+l6uVA36xjrlfnbufvW4W7Llrtfo49zlGH3Kx2reFn98nb677qG3vHN/fuh6Uo+T9cEct5Jkz9QH
UTLI8423j3xB//qVm2j1U8/Qjl37aPfe95U0QF9lFvG7m9xz5rGat6zfyXVy+Xk74tMGurkxk368
y81nHifdX+T1/fTj6Q26eWWRZdahrJL6dNcSumb6EtrhjPGORTPp5kXs3OwNzpjz/lTHNk9flCR7
ol6qskbJIM8zWIcFrE+u3UYvvHyQXtv/oZJW0Q3Msn5vi3tOPZa/b5jFrG1jDv2M37dlMf2j4mre
sCzsPjOfc6+o9yX63pd9t/CGZbwOxU2ctcqQT5YvYR1OSBsdWJ18K+dTQygAPzauacfOtUUsvyPL
NYsOpKgvRh6ufI35tDxOZpHHb/vNK93yHHlW+tf5Na7AQfmy5B2m5bOVvp690WljQvsVOa9hAMkJ
kct6QExIrky+/EnjFHadl6WWy39zudw+NH+7efPKzmSI6H/eR4GxEO117vH6LU87TT3Ux7zx7ofn
6N++ehM9vWE7vfint+j1Qx8paQ1bs86gO7bJc5vvmsHc4Htps8jDrzXoS3e96uSXx197zLl/271s
nereq5ajl/n6Y7c6ZbxKd1yjlufKYeTX5JN5uPy8HfFpI92igj9no5KfX2vS3S+5ZajHzn1u/lUc
2vm0IrG+GHleWkLXsoni+cgyZJ23rHLK4Pk9+Rx53PuFPA26dvEB2R5Nvix5VXnTtl+X8/nFTSaL
049cDq2Pk8Yn/vqKOW5/sDqdtq+YE1ZXAbJ/GNP/arvY72unN72+5+33xiGXfhg6qj1jYX373tER
puxfp6fWP0u7Xj1Eew4cVdJqulG7YS793LvOr02n7w85+YcWMzjV60fp57MadOOv+HUlr8inPrRi
v2etpj0h90tZjHoU+fZ2jhFPXH7ejvg0KIF8meV7uc2Uv0WPe/co18Q59TjuWlKdEdcD9Rv5Qq4/
Ppcp62pTtqTjJNmN66tbysNEp6+0vjDq43JOb9MLYf0o2sAnkU6KsUnRj1y2uYP0nvs/q/MFAUfH
+1+Of8qxS5Rd1Y8R8vpfue/xuayPVrt90KG7GbhCvxJ1MSqPOV5uPnm+8f6xEfrKDV+npxmsL+4+
RPsOHlPSE8xaTqcfbFPPub+Na9vuEbAuU+5fdhO3tDy/kjckn6gz6rx6ryabLxOXn7cjPg3SbNbg
Ra/IfDvvYQN9T8e5R7/2/jH1OO5aUp1R1zu0iLmIs5+IuP6KnEwGlDYNMFhl/iR5ssiu5NXq5PK5
fRVTH7+HwbrTk9PMK/uZW/7ItiaOm9NHTl0DrDyvLH5ubluR1eyfnLLH9r/bN6xs0XZ+zMYq0Bd5
dCPYf1Kn5fnGB8dHBazrBnfQK68dpv1vnVDSk+xp8Ay6c7t6zv1tXuPHDZr1W+f69vvoy41baZko
T80r8335x7uNunbTncwNDp6PluGNQ8eJJy4/b0d82uTA6uZTjw/SohlcoZxrT3ALw5WVH8fdl1Rn
zHVRh1Inl/+VR2iRkIHXqVxj5zm8K0Ubk+RRr2fIy+WZ8QjtcuTgbndy+3U5d90r3WB5n5/4+Wvv
PZhijOL6U46RXr6sv+H1jdk/ce2Pkz2u/0dJtGeG3yZ+PHtuq4A2mvLqutr4vxPn6av/fjNt2Pw8
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
AAAAAElFTkSuQmCC

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489245/dedebe8d-e409-386f-b625-92dfb592c501.png

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
AABJRU5ErkJggg==

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489247/9ec36874-1502-36d0-9b8e-87b57a011d0d.png

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489251/c8c6bfe0-cd59-3ed2-898a-8f27b7745ad7.png

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
gg==

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/489249/6a535926-3129-3f40-84ee-736be8e037cc.png

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
AAAAAElFTkSuQmCC

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9233/229200b5-52bf-39cf-98f7-deab01d37330-thumb.png

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
MSswODowMJjFCDsAAAAASUVORK5CYII=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9235/76e000ba-274d-3810-92f8-c8acd576c9c1-thumb.png

iVBORw0KGgoAAAANSUhEUgAAAMgAAACWCAIAAAAUvlBOAAAACXBIWXMAAABIAAAASABGyWs+AAAA
CXZwQWcAAADIAAAAlgDPcgxMAABKbklEQVR42u29Z5Bl13UeunY48ea+t3OOk4HBBITBACAIMIgk
KEYFyjKl8rPLj+Vn/7FLP/zKpSqryrLK70l+tizLtkRREmUUSZBgAAGCyBkzwOTQMz2dc9++t28+
ae+93o/T3dMz0wMMyMF0D9gfCeD2uefse/Y66+y98iJBIJ5//vk77tjT3NyMiIQQ+Chifj5bX5+h
lMzMzFiWxRgLgiCdTv/Jn/zJgw8+eP78+ZmZmXw+n0gkTNO8ePHi1772tZaWlm9+85vf+MY3Hn/8
8bGxsYaGhlqtViqVEokE5zyXyz300EOf+MQn/vW//tf/9t/+20uXLr3wwgtKKdM0EbFcLvf29maz
2Wq1+gd/8AexWEwptdE0eB8QQoIgcKoFIXzGDUJ5LJbgnF8cumRZZntbm5CyWi4J4cnAY4zZsbSu
64h49tz5rq7OWDSqlCRE+/M/+05Lp06qNef06dP9fb11dXVCCPjoMRYCITA3n21pbiTkMmMppQzD
OHv2bDqd5py/8cYbe/fuXVhYqNVq9fX1lmX19/e/8cYbCwsLnZ2dvu9HIpFKpbKwsJBMJqPRaBAE
qVSqtbX1hRdesG27t7d3cHDQdd2uri5KaRAEc3NzbW1tUsr+/n5K6UZT4YZAKfVct1wupeoyISMg
omkYCtH3/XDRQYBCPmfZtm1HlZIAYJqm7/vhm0MpsW1LKSCO45TKVUqIlBLWMBXiR4bHCKJijNVn
0gAwMzNjmiZjLKSaYRhSSgCwLMvzPMYYpVQIoZTyfd+2bcaYEIIQopSilIYcqZQihEgpgyCIRCJK
qSAIDMMIX/pw4eecCyEAwPO8jabAjQIRKaXhZNceBIC1WxmlFBFDIgBA+GH5BASFKiQ6bvR0bh3V
whUrZJdw4mupE9IrPDmkVEhfQkh4LSKulRbCc6SU4YfVb8PPax/DRk99A8BhmSUJwGWaopL5fD6e
qtMYW/+68Irw45WXbz5ccW+ImM/nN/qWPvrgcHmVIwCAqABIfmror775gwe/9NXtrXVV141Go9VS
wYgmY6YZ+G7V9aXwDMv2am66qUlnly/frAintrykJ5NJdr0XZgs3CfzqAwhAwA9qUjcK4+f+5O+O
9N253VBIJJHUT9e1ZufHAOxkU0O95v3Dj9/4v//Dv2+KareXOnntbrWFm46r6RuySDE7t7BYrlbz
C0u1umSk6rgQqMbW5rGRQcJSu3Z0z0xPRiKR8ZnsAw8/HDMYbu71au3UVrXCLcb6UPGLvLi31/p0
1W2vZSyFKG/LqdwG4OsfRlUuV+xolFEqhZCIGl8W81d1HEREBEpv48cikRichWLlJlY+bktczViI
ihCan770t3//4wce+/L+XV1urXz8rWPtu/bMXTyd6tjV2hiVUtZcN5msMw1to+//lwIBQFSrFodf
EojIGNtw6S28ASklIaExcgPefERcX3h3vYokcOHkkeLUpcW5eU8E4/Pznl/Ov37E07We5raqX95/
/yfv2t6pEOntvZeQm0V6xlitWhVSrg54fZnhRoTSX1BwDfnbtm0AYIyG1t0PjXrrg3N+DWMRAgDR
WKalqXnnrm2XLp6PNTR3RSMC3cVCpbu9tyJFf0dvPjchlbzFt/uhgAAoRLj6zb4uT+D6J2uaNjc3
l11czGQywvelUgjAKEMlcZmuZNXeQQgFQKWQEoKhTIFIGVsWLwAAIJQCP+jip5RijJXL5WQy2dzc
fP78ec4YrLHoXvfKa+Z1rcH9PWkAqz8hhOCcv8e6jQAEAWGZwri6riJgyIBXUX+TC/XXCu9CgcYI
AmicB75PKF2hGdU07nkuoYysiGAhaxDKOKOu5zHGESUhNHz8uq6Pjo5mMmlGCHAjGY8SSiqVimFY
jIBERCkp1zgFPxCB7ylgpsEDIRjjuqZzRmu1KhBGKWGMAWClXCFcM3Wu1A1RNZydaZqEkGw2u7Cw
kE6n5+bmdu+5I/AcJIxTcD1/jakFASgBVACAyLhGCQaBWHU/UMYZAc/312rQ4bWca4DSF5JTKhHp
Gs8EAFBKz5w5w/7wD/9w3RsNPM8LBOccET2nhkAZIUphyFeUkMD3FRC24jailG7Mfv5BQAgpl8ua
poUqiEJglDIQb7383Gi21t7SpJSklILynnv6GWWk6uKWQtA4I5QqKZBSv1YcGZnghs0pcq4pKQih
SiHnvFypKWfpmR89fWl6IZVKT108/sOnXk43N9TKFQJk+tK5J7/7E2HGO1rqXvrx04FVF4Xi408+
3TewfX5i8NWX38wVq0zjgHJmaioAPjN0+vTFhe7upmqlJoQI3g9SStd1T5w4MTc3Z1mWEMI0DML5
5LnjlxZ8mR9568z09oFO3/f8QBBAQpkMPIFEo0QBcUvZZ5/5mdDjqaipEJCQcnbyZz9/LdPcyohC
oAAKgHiuSznLTk9Oz+ZMy1JKMsY832cEXM+DFQdXqVS6VitEACLd0ovPPd/Qd2dTnI1PTOXzhV37
7+9oTFLE8N0FdL/3zW9Gu/c+9sn7UAZDp0/5vK7O9mZyePfdO5f5bNMDETXTmjp3poh1X3rk4Hf/
5tvKtiqLJVd5xWqNa9Ghk0vlstvVM6Cq2bklYdn+mXMX6po7+uobc5WCbRuzkwt17V1333ugwzaB
kHw+F6lvSRjBf/2TP/Z0un3b7qe/+3eTWf/uvTsWF+dGJ8Yj4/07ezKeANsgR958Y+jipe9+++8T
qfjC/CSZmDp1/Hhdxn79uVf2fe43H97WqOYWlgolr+a8LzHDpcI0zT//8z+vr6//N//m34Se9SAI
covTb58/lY5JT0X/2+ARi9s1Qbta4xdGZzub62tOMD85tu2BT6TchXTPne1R8e1v/X0iHV+cL7p+
EbWY+dqr2UJWCt7f3zszcpHYyWJxanI629mzPa2zkvA0wMWCm0yZiYaOh++/23NrlLIgCK7RChUS
SiYuDtJk197tPcfefmt2cn7/xz/ZHgn+4s/+y2O/+4+OP/2kPXDPI3f3FmrV2vTI8884gVPJLxWJ
qddK2Uz/AQC4bUyPhAjfr29p98+88MIrDKgmAtnc3oluhZhxGlQd1y265anpS0v5yp5dd0yMnUnX
t3c0ZqqlCiCVCnbu3JnLLQUIBACV1M1obvqE1r/rgYfuXazJ3paWoRH/QHvdUiFrJ5oP3dvGTVKp
OeVSYW52TurRBw/fWyrkGNV7u/trDpo64Xbk/gcOpTLx2emppYrwfc91XPJ+Np1wGwqC4I/+6I8o
pcVikTFGKHVqVcNuyEQrPGLr1dr5qWxXR39XY2zw3AUXSKFUmFvMSqGE79fV17185OViW5MUqlyu
NTc3l3J6sqEhv7iQr+SFIpUTucDn2wcyFy/kmps7DAiyi0U0OOpGZ0tTNjs76Qy/pYRTczoHBghZ
x0CKAAT98jM/e55asfaebS2R4OkX37n/oY+JcqG5uzs3McaTDU1p64lv/UOyozeoLOTKqq2+nnMy
NTvVs/Pug3v7NueKtY6MhaBRQigL3KoToK1zgWCZupRKKWXb5ivP/DAP6c88eq9T8yzT8H2Pc83z
PduKVCslw44wACGFVBCxrZGRkWq1lkwlhQgooVJKIISt0IEQUIhSCCCkmFsELVKfToS3FPg+EEoo
EEKXxR9US4uLkhnpZFTKDxAhGBoaXde1LKuhoWF4eDidTiuFlIIQQkqlaRoiSikMwzj2+gs5mfjk
xw6WSpVYLFouLDHDIjJghsUIKoUAhFPx0x/9pOvOQwPtaYWUURBCMkb9QNqWXqk4kWhESSmCQAFQ
AKXQMM1cbvG6wjsq5QeCMcY5E0JQxq4yKygpASgQhUAZJQAohGScr8SHXY422WiOuj5jKdA4VVJS
yigFpXBFR1ylAei6pqQEAstCNCKhNHxz1gbVUEorlcrY2FgolV7vHkJqMM4BlRBy9eg1izzhGieI
Qn5g1TuMCWtvb49EIqdOnQqDPOEqDykhBFEq1HVNCEEpkVIxxkNFBXFtMJYihDFGlVKr2mBISaWQ
MaqkBLLGZENACQnXteatKpQraqGSEoEwRhEVYhjqBSE9MNQLVi4EQldCvhBWZrGhHHV5TutphRSX
FSNFAIBcDskCQigh65pP11XFKaWUUrnGjnVjjACgPnBQ5bXBYYgYWjHCOwmjEcNQxHV3j8t63A3c
7gdaIMLwyeu4dC4Hs4X/yJ88/veQ7v38pw8TwLGL58u+1VLPZ+e9aBxrjuKmta23C6WYm51PNjZh
dfHM+bntO5pHLmXvPLAr8DxFiKHrH4h2txSIhBkAANJjXOeUKAQlAyEloXTtMwtZStN1QBUEYu2b
qZQSQuqGLoNAIS4bvsPL1qxJhIBSQGn4b6KU0g1DSRFueWvXA0KAcY2gCtetcDXlmk4J+n7AuKbr
3HM9hUgo0zXu+15o/pBSAgLXNF3XTdMMgmD5eZJlIxEAMK5RQH/5q3Atvmnbi1KK39iZ/uJSXnrs
pecUCDe7sCh1frKaj3Xc+VBj48+ff/nAXTv+3//ne8317bFYEuVrl6Zno2ZkbComq+7Pn/tZui3T
3bPr4UP7USmy2WQvAqAU0WyaO6WAaE37Trz6k5MjuV0D2/p27MgkbM/3gVDhe0AZotJ1jTI+dv74
0Gzt8KGDFFHTNKkUo9T3fcPUZ8fHBTXqM3WMEV1jgVQ8VMIZI4RQAkEgDEPz/cDUNcfzolF7YnjE
TGZI4HArZmqUMa5QGrouZLC0MEuMKFM+M6O2pemM5xdmKx5093bMDJ0/d2HmwOFDyajhVPLHT4ze
cXCfdCvcMJUQXNcKiwuzM3NaJL1jR7fvuAoQlZKImqYBQCE7Wwt4R3ujCAKllFJI6fK+dlPoeoOM
pSWjSa2+oVZdmMu5bZl6rrO5wEnFEqmm5nQipTNOqdbY1pY06KnzU+m6BpuxSCxlmMIlWltDXblc
2WgOug4QkXBNFMff/h+Esp7P/Kfm9s6soy1MnXv39IXWGM4G1m9//qE3Xn+zLpkan5q2dJ5bqhYK
c5mmviMvv7yQz9p2fXdn/flTg6mWhtGRc/mSv3vnHeCUpcn9QqmI9ld//ZEXn386GmvNJKzRoZFA
oyZjTiDiEdvxPYuzN95+61O//U87aPnnb/704Mc+EXfnf/z8uwPbegKvMnjuzL5HvzoQFy++8rTU
jYbG1MzYBTPVdezIS8VqQBRO/+/hwIw2RXGqRHr7Wn/+zLOJTHpkcPSeT322NnXsncEpptjEaP+p
k2e//PWvj598JecZ3a31I+Oj5fyiZDHmO1osISolR+Heex66Z2+fU/NuSmDB+zMWAQDgn/+dfwSE
hqu4xhkAuK6rGyYQ+PJXv4CgdtyxjzEKAHvvuwcIkYFPKOOci8CXCOFbsumWKwBARXg0mHpZhzmK
4M8d0a3+CM/Zbf2RaOX86ROR3j3SrVWqXszyfNfnTOtqbV00o83N6Znp2UKt6ARi7q0RO9KgoVjM
1bZt3y5r5XK5ZqBuxepiRHOcAINgPjs1OlxxnGo8nS45JdCiTKEkitP4g/c9GNNJrexiILKLi3aE
D/R0FWfn0bY6OnrrYlalNInU6mttnJyd1iKZlMkGL87UZVobk7GJyTHNjpRKtWSsPfBqniuqVben
pzcoVVo7+ibn/c72jtnRix5QQ9dkoITvnLt4qaW+rlCoNadiw2P5+mSmub1HCU9WawroL+yjvJpt
PpA3KpT1YFV0Xb4YV2WxNcI6hoNf9gct/yCBDVIVr2duQMJUZcZfOE6A6I37iN2oZEAIAFBKsFyp
JZLJ8lKO6qYM/GgsrqRQqLhmVrJj33ny+c/9xm9GmDStKEpfKKBEKeAakTVfJqKRQEhKoVp1DEOX
IIfePZHsHnBmRlima0d3fTZXSqUSnusEEiOWWa1WmaYbOpcSOYNiqRqN2Y7j25YVugQcx6GMKxUA
UEPXAQgl6HoBokCiJaL20lLeisZZKN2hrHm+ZZics1q1wjSDEpgcHqygtau/y/V9xigoVEBMQ8fr
ewY/LMZCAALqme9+x7Ez9x24K5mKG5x6nseYJqUwTDPUDAklIggoY4yxxalLz7xy5OB9D2/rbq4U
8gvZpUSmPmrpXNMUKkoYomKM32LuupaxAgUGp0pJQjXKDUBQ0gO1mlyJAIQxKgLBOA/fB7kihRAA
IQLKNM4oAEglCRBCCAIQQIWEURByWaNkKxYKJIQCKgRKIBCScyaEpCsZQZQxRIUrSiJjVEpJCQ01
UwSklCEqAiT8jdBpSykBIIAopeQaD/V3WPlKKQUIlLFQwBUiWKY8Xl4PlFqJSLt5lu0bWrGUV3jh
5XdiFh0dzeoxLRlPaobOA398Zqauub0uyt585WiyuZlKbOlr7+/pu3TiZO+eO068+nMHYm51esk3
7+rpyRZykZg5M5FNNmWQkM9+7jHz1oY0rxNBCkQhrthMVl/ZqyIXgBBYzUO64jtCCKJCAAKXOXH1
wrWfVwZZ++RWh73qt2C9Ea46ctUPwerx64ywutMs64VrxoEP5xm8v4yFANSwizPTqr27o6VxNp+d
X1hobm1HzzMjdVQ4paqZTscV0/fv2fHGO6/u3Xe4r2vuzbffbmxomjh3obOrL4NYKZcUUiGwt38b
uuXRfL7qCjPCNzZYnhGk5JcV+7bSfdbFjcpYTrWiKI9Ypuu6OtdrtQrXDCmFHbEUgvJ9YpjV7OS5
8cX7Dt6FKig7Pg2qp06N3fvg3b7jmJZVLZV1y9I0rqTwfWlaxi2e6lYyxa3EBxDeEVVoVkelYCWz
H5YNepQQCD3qYUAPoRQUhr6vtfL7Blrh34OxcM0utUn8BLc73n8jQAAA9fyPfnh2eJoSIqQilJby
eccXhIAQYtVrBkDCXTzkLQQ5OzUj8IqE9I2e7/rgnHHOGVsOqUV1dejmBw3lxDVy2+ql14657vHr
DXh7LbE3aCB1RqdmMl193/5ff2XWt/T1NS9MzDpln5kcGHIp54tuczo+PT2txeuaYtbI9Fw6EfcC
d2J6/ve/8a8aomwzlxghhBSLxSAIdI0pxGgsaZgGAPq+t5pCzTUNlVzrdVmNtFy7JC87ZCjVNS6E
1DQWCKlxFvgBEKobuvADXDlT0zQpBFCmMeL7wVqffTj+sjK44oEhoIT4gI7IjcMNiq48apjzCwuN
zZ1JTs8PjuiMer6KmnqlWHYF6WzM5LPlru6+tnTdzOi4IwPTijWlMi31rRoNbVsbPdH3xMTk1GIu
d/zc9LmhmaC6+MS3/+65V48Ui1WFAAC6wUfPncsVXcsyNE0DQjSuiSAAIAig6xoBIJRqnCOgpmkg
/YmxyZnJsdOnh4VXGTw7YkVjGoPJkTFfAADqXGMMhs+dq3rgFOZOnbyomxbXuFut1NyAcaZxLoTg
XFNSaho3TGNhYmRiKheJWLfLunWjMla5kBfAU8m4ktIPhKZrBAClLBTLdek6RAWXNWqsVKp2NMIp
rblVxk1Du8F18cPFe8hYI6NjuTI5czH/sbtbozQ/NFFGdzFXUFqURaheqJQIY5bOx2ey++7aG09n
dL80vrDEXKfo+6riLJZLsbr6KCM+4emEdvz4SR7NbGurP39pvKOrJai4U7O5x37rS289/QO7voej
a5l2zav5nqeZieZG+7UX37rzvo8tzQ4Svd6StWxNJBJ6U/eObQ32sy++kUrFZ2aXolEWgDnQ19XW
2VOfjARSbe5X9UZXLIgl61LJOCISxkzTYJRSQijndelUaDmkjBJKKaWEsngiHiaH2FZ0k3DVe0Ap
NHR6aSzX31VXl9QpM6YvDRErFTc0p1IdGh8qVZ2obk9PTBlm9MLgKc2KB5Wi70vXcd2ao9ux/p6B
5pg9PHrJ85zRkXGixbpaGqslJ2paUoBBmBP4XLe29W8LamU/kOVSyfNkxIy45Uog+MGD94r83Ohk
tlLMuYL3trd6xfLiUsFzXd8Nao7f09nBpZm2tTNDI5lMOhBik3MV3LDlHd965ZVk+8D27uZqqegL
hUpplh1bXpnDqJI1l1x22myiqg7XW7HCg5QCIdR1/ba2lkqpbMYSBkVfygvHjpmNXbv6W8tVJ6gW
Tl8YvfvQYU15S4WyaRlCYixi+4EwDfrmC6+279nfmNADBUL4um451ZJmRmxDr1YrTDMApVIyCDAe
swrFSjKVDNxaqeomEwlA6Xq+bhhhCIvnOkh4LGou5ZYiiQRIqRv62WNHWKp1V2+743qbWdIK7+0G
GSt46skfNbV3jw6em8nlnKrT2b+7qy5ycXp++47+3PSMYjTR2Hr44N5NFTJ69USuvxWu/kkIkVJx
zqQUiIQxAkAJQSEEZVwJEea3hqk7YciUlMsidhgXGh4MX6dQPFeIjDFUClc0YykV51QISShllEop
AMga5RoopYAolNI4D78FACmlpvEPFKl8ixFOL6xjeAP7FAIQraOt/uXXXqw6pLu3SwdCaXBpZKq5
rWl8cKiqqoHAood4cC/ZTEvUjUOIYDWUMgztDV0fQigCMuS4MFw9dIgQgCAQAFeE4IogCI+EsU2u
6164cCEsxLXOy3Z15bp1HtK1Rzaz5B6ylGVZ7e3tUsobCJshAICZ5t7f+2f3ou8iBaUEALMMS9N1
rzj3zb/9zv2/9oX+tvowSPEy6VbWgM28jIX3ybiucRaEGcxXGZ9WQtSBcEC5umAwrhGUQqGu64Hv
r013RkTOeT6fj8ViXd09wvcCEaxlieXaKiu/oek6QSWRcEallIxxJcUvEO2+sTRUSmmaNjg4GATB
e2dCX77GcVzTslAKPwhgmYKUURJIyRn13MCyTRH4QSAJYwQw3B0MwyCArufpmo6oVBgyGz4VxizL
usXctv5WiEi55hTnXn7t6O6DD3S31EmFoWuBU4aogJJCdkFxiwQ10KPxqEEpI4TMTYwIlmxrss6c
Gu7fs8vgxHcqpZrIZFIiCBijk5PT0Vikkp08NZL9+McftjUaCBHufZyzxfl5ZsWilkYpm7p09uSl
hbsPbD/29rs9u/cuTVwIrIZ79+0Wgb+ZX8i1hGWMmabpuu7IyEhbW5um3YDKFgQClP/yz35WZZlf
e+QwyoBQpoLq6PB8z7auk2+/4VK7tbGlraPZMKFaXPJATyWjgHj2nbcKyj58z52Xzp7XE6lELBaN
RgAVobRarQZBoG+CKHiFYOvkpdeO3Hn/o1pp5vjRyaWFmVy5ZltmNrsQSSZVIOZmxu56+PM4d3Ks
oDXGuBGJ1ioVIT0h9LmexpNvvHl+fK4p6k1m3fa6+PDUTFNX79337Nd0vTA3fuz0xCOfevDEW68h
wbnpWdfH+sY6IRQjUMkX5iv+5x/7xPHjg3WtzT/53o/v/+wXxez5rGN+/GDvUj7P2HI8zFoH2hX5
PFdEMlwOYLjiknVPvokEVCoajX7ve9/71re+9Z//839efRNuILoBFTMsnZEawLuvPb8UUBNl2SlJ
kkBRmq/Qwwea/tv/97/u+eRjqjTpSDtGxaWZxc9/5Qvnz5ywOvYdeeVnb50cbYiaiw7Zva0tQAwc
vOvQPba1Kd5FAiAVbW5On3jnSEedeeTIcabFuzpaNSKHy0Vmx9rrMl6xFLOtREff9OJgscR4reZ6
KpaMePlSsZLq37HXE/LYhTHKTSZUe0trLpcPEIiSQreVv/T60dNBdX626MeonMpl87WSF6hMLOJV
RSwZm8wWTZMdPfJOOpE8+sbL7Y11czOjbx5l/Z2tigJRiJwTIRAAGCNBgJqGjAEiCTMscDlMDDUt
FO5IECBjoBRRShlGyFJESiLEhyGRIKLrunv27Pn93//9WCy2uLgYJgXdiJEJg0BGI3XChUsXR6tK
BA7qporXRQ1Dzy9cGhrRuzp7Zi+eOnv+fDSZTifiXNPHxyZ1ZhUXZ/KlBeF5Swpty7x0YVRRx4x3
WDqXUrFNYOEilLiet2PfvfGpmUQ63dTZY9txzgjjfO+9BySyiGUeCPZ7Ai0j/WttPb7rp+pSS0v5
GNdZzM5Nz8bSGX1u9u50nNWleTxBbMvL5YyoteCUyHz+4KH7i/OL8+dnHurfNXXmrRpv+tI9B/xa
TcRigMgrFeJXxY6dde3dzQ2Z2enpSF19E2flRFzoGlvMCjtCFxdVXR2VkhSLqqGBzc/TYhEYE/E4
cC4Zo0Eg4nE+Pa1sm9RqsqmJlsvEspSuG2NjgKikhFgsSKeJlPghrFtBEMTj8Ycffth13VWf5nVl
rDCqkFLi+34ul/Ndl2pGtZBVWoyrmqe0qKXb0cjc5JiDWktDRgm/UCrbkSinlFLKNK1WzFd8ZXAI
JEvF7arnSs/nZjRmm5qupdN1YSD8LcN7RzcYhi6EoJQpJRAhrCtEAKSSlNAw9YoSSigRUnIA/kf/
XlkRHosGLc3s9TdYtSq7u8WhQ+A4/NgxOHgw29np/7t/hw88mHv4IeuNNxtfe+38N77ReuQoe/65
QNPY3r25ffv02VmlaX57O0/XBdUaTSZT7xzVn3+xcHC/7fna+DjZtq3pxImRz3ymnEq1PP74+Fe+
kr50Kfn005JzuXOnKhYtx/EMw9u2LVMuq1JJs6zxHTtSTzyx0Ngo+vtZZ6dWq7U9/vj4b/yGu2sX
cd0Pz2W7aivZs2fPeoXXVhAuaIig6XpjY6PnOp4f1NUNgBJIGAVFuM4IxqK7ATAIBKG0vrEpHF0p
xbmWyaRXasCjlKqBUEIJohJSMkJvMVe9NwgBz/NWuwGEB6VYNiiolcxggQIkEMaE49BIjIyP+fv2
geOqxkY4cUK0tKDjkKUlGB4ODh6sGx8Xn/ykQrQ83ywWdc/bPj7Od+0EEaDvk507I47DxsfRtuX+
/aq5mVCqKI2cPk0AI4SajqMyGe3UKSplUxAkd+2KRSKspcWoVvX2dvA84jjKMDTHCVpbsVpljLF8
Hh96qNU0zULBtm0sFp0vftH467/Wvvzlhq98hS4uwodchBwRLcsKP/P1vgZC4NyJo9LK9LU3liql
iZGR1v7dLenkZQc+IXMTwxMLtQMH9tBrRieELC0saNFk1N548fwGsWrEuurIFeeEMchKgW2D50I8
zkZG5M6dmE6DpgEh9OJFOjmpduwgpZL3279t/fEfB1/7WkJK2ttLNC22bRssLfGxMVooBL29RCnS
2AiRiKxUZDLJ3n1X3XknHjrEGhutY8dQ00DXcccOdeqUsW2bOTHBDCPe0cHOnGGEYDwOQQC2rfr6
tIYGMj8PxSJoGpw9az30EL3//mgmA65rAOjz88HDDyd0nSQS8OFnSakVe8215bgVIXT20pkzE6VH
P37fuZPvDF6Y2H3wnu7m1OC5od5dO+eHh/RMa1uKP/3Tl+o7OohbztcCGrixxjZZXKgqno5FHVme
n1i889DDPW11m6eW5E2LICUEfJ8Ui+GygZEIxGLhogfVatg+BXUdW1vJ7CwmEhiLASKdmlJ9fXRy
kszOgpSYTmN9PZmcxJ4eJIRUq+z4cXH4MKEUDYMODoJlASImk6RWQ9umIyMQBKBpmEiApgHnUCoR
KZFzIAQMg9RqmEySQgEjEbRt4rogJcbjdHhYDQwA57e4O9K1KxYBAE3XHKc2NTHqCL27LTM3n22K
s3fePpLu6ho8dTzST9vqewFxcnjw4olBqE/2tLYW8sePn7rY3N+5vbXzjTdeitV1363rcDua4d8X
iKDr2NwMhCClICUoBYiQSMAa8xj4Pra1gRDE9wEA29tJqYSZDLa0ICEkCEAI3LEDPI8gQiQiH32U
OA4IQYIA+/qWLQVCoG2DlGrv3nCzgNAWiAiNjaElN/wzLCiDDQ3h/WAsBpSCEGr/fnDdW99zax3h
PbyHkYvnC7Wgo6svE+fHj59u79uRSdhrt8Ls7GS+ptobkrOLS42ZegpQKi9Joiej5sJiLhZLxBMJ
XdtEqQY3OeZ9lYHWcdcgEHLZ5hR+QARKlz+sPYFc9uxc3qpWm2+t/fbyQ1vPRrWuBWv1yC3hqis6
WL0vfdcWuwot97CSJkXpmuKTYRbU5tj13mPatzKZYjNU576VCLWfcL7rl4oMaqWz54ebOzuoUKn6
DAUo5eeOnTw3sHt/S33icgQtAEExOjbT3tXJ6UpPgZVHuJmZ7FrcdIdmWIpTrKiW1/7Wur+4NuVk
k/tYrwUiRiKRsLbb+qUiFyYuvvzasV+LWYMnBjPN9WZd076dTeNDI5mmjqXpsapwI5q1kC+0dLbO
XjhxdqR0/6G7ao4bjdXdsWcgLE220XP8wBTRDUOKYP2gFEQIM0RUGKsMYbdIKSUJ67Utn7fSCxJR
07RsNjs3N5epr6cEfM9fW8CaXi7dJsPEp9V9gHMNYLlAUuiolmuKvG3aHKJVu+jMzMyOHTvgepZ3
qbC7pyc/P14oFo6+9Vrvg5/dt6u3u7O7Vp6bn8kdf/ftWHNne33dxPhwxXUHunuefvJJnqm7++DD
sGxI3JSzvx5RAHSNT0+MRVMNiYipADhjoR96pcULAZTVqmNaFoBCAN91/UDF4jHpu8B0g1MkBKXw
A7laiMp13fb2jnQyNjWb7e4b0Bn4fgCUohSO69uW5bo13YpyIh1XWJZJKZEiWMrnkBrpdFJJ4dQc
wrSobdYcx7JtQMSVolwbTbMrCYhoGAZjTEp5+vRpIYSmaevXIHUqpQAZU365GoigKpjd1daYW8ga
luW71bnsYl26IWIYS/nFsie62tuWcvOupC1NTbZ9q9NQP9D8r5WxQqJcOPH26EJlx86d6UTMrVWL
5YpmmCAFoVQoOTM8FGvfbpYmRwvk0L13oJSVQvbksYs79u08c+TYjgMHDY6B5xuJVEMqLpUCRF3X
p6amdaYGT52u0Oiu/vaqGzQ11EuhEjH2P//r33z2d37j6f/9+OEv/IblL46M5Pfee2d+PtfR0/Kj
v/mbstX8hc89qkEwenEwX2HNDWxkrLR3/w7f87huNTTUqU0WUcM5v3Tp0tTU1F133VUsFltbW9dl
rKuexRX7/RVJpyuhaogKgC6XhANQK3mq4RCbp8rtuoylFEYjxk+f+P72Bz6lZs++c268WMwx3TYp
GTw/lO5qjRJtbm7qY1/63Xh15NnXTmfSdclUYnE+SxkDQn1Rmx2bMxvqGuOZvQ88uLunRQQCAHRN
m5lbKGcnT52dME15cWiMcT0WjRFOD9x7z4mXni0i54QGTnUut8QNva+1+c13L/zLP/gXb/7oiYIy
65MJhV6l5FBGFapapZTNVZINyYP3PHLwzh7H8TdPbyylVCQSee655/7yL//yL/7iL3zf7+zsvC5j
Ca96fnCkZ/vOiMFgWUhXlWrNjkQpwbBFCCVkfnrCBbOztSGUzITv+RLsW547f4O43orFNb2cnXjp
zZPbdwwMXTifrGtrbUxrnI6Nj2h2srU+Mz8zGW3tTGL16JnRbf3tZ85fbGlqtzTN8YoVR0VN7gFt
SddriVhbQ72UAgB0XZ+envY8d2Z06NJMrqe9yzZ4dnFmKls9fPie4uxsRQqba5NTk9y0TE3XdLKY
rx28d//gkTelVWcyZy7ntDXUU0oWl7KWGQ+ka5qx3r6+iK1JeXO6St1EwpqmGdZfXVxc7O/vZ4xd
Y3lXilC6MHru24//tP+ugzv7Ogr5BRpJtWWis3NLBodiIJsb036AHU3pJ7/zvYG7H4ioyunT57LZ
QlNn355tnVNzC739vQtTE9y0uWFu6+u59da5681/XXNDyFsao0JKzjVQSkgJBBijSiqFwDiTIgCg
GmcSkdEwgB1XvEAghcKwEKMK6+SGW+FU2FpHSRnGOTLKKQXf8wljjFKFyBlVCMvLPEHfDzRdD4W0
UCsIdwVCCCqlAKUQm9N2EQrvjLFisbh7925K6frCe+BX7brmhgw78sbLp05f7Nt756AGJpFvv368
ZfdOwykVhP5P/tk/PXhg5zPP/mB0PNva1xnVea2SffHlIWrYly5e1HRaqpTMRHN/Xw/d3IHwhBAR
+IGPhBDf92Flr/f9ZdYJliM5ZfhhWR4IGw2tjLD2Qxj9nUqlisVipVRaywlhh0f0/evdSbASo3u9
EzaaWu91b57npdNpzrmU8pqtEBEIqRbzntIiBqnW3Pn5eSseF0GQjifm5+e4ZXHAAHlvb+elMycC
PaJJAZqOIkAAS7cj0YhwCt/93vd77zjU09nYP9DHNgdj3WIDKSGEc742Tf4jj5Dvl0137zXn1YLx
ayq243JJ9JX/XT53+b+EEOFVh0enOvsGTL7x/LR2NrfY8v4rwk9X4b3yClXgjoxOtvX0mpwCgAx8
T6BtGZdt7koUimXbMqUitm2GzQJwTWNfWNl3N7lWuIUPCdda3hWhNDc9+pMnfrr9nkN3DHSWygVN
twzOJ2q1uoZMbvLiiXPZr/zGo4//9Td37L/X5npzd+rIS+/svPdwd2NiYT4rCfieryg2NrfXxSOb
Q3Dfwq3G+sK771f0eDpuuc89+ywFqkW02szi4EK2r69/144Oxy27vuzu6RgeOolKf/LHgw3tPXDs
rTPKWSw7tu9fWii1t9XtPvDwob0DYYDXRk9zC7ca6wvv5fxCTRgJGwrFanZhbmE+i8yqb0qZGvc9
QTlv72yrFSqBVx6fzWqaHo/HUHnTs4tdXf0xE6fm85yoSLqlv7N583hSb2QrvLbs4LoO480zqU2L
9xLeQ78iJWRyfCyWaU5GjGXtbl0lLwxuv8I0f8XQG/4k3pexCKFhDwQpZej0RQBd15WUjLHQEBAO
wjmXYUrWFq6D9TcplP7UxJSQy+7ktvaOiM4gLDQGy1y1OD9XKFUAAFEWS2VcSbAPe4atapSr2OiZ
vh8hGHMr+QvnLw6dv1Cq+rqm6ZoejRgXT57KLZVnJqcRKBDQuEaJvHD6rCdX+iVsYT1cI7yjIoTm
pka///hPdx16cO+OrlK5yKimcR4IEU8lFieHzlzMffbzD/3wb79l9R947NF7j7/6s4mS8elH7nFq
rsaZHwiNk7Ir25pSi7mipetVz+Mab21p2bTMpZRSzHBrhZlsNsKc14+fGGjJnDw3vGN3/9lT5z/9
2K+99PRPW7u2SeGaTHOV61acd86de/iRTzXURQMhySaw0m0G4HKFcwLrCO8IQMDzSsSOMZV/6oen
KaW6rXvzS2dnZ/sGtu0YaJ5fnJWoPIB6Xfz5H/8HP5G6o7vjv/ynP63v700peWZkonugiwdUSLjn
/jv//h++G+3pjZr27/zu1wyyKSylV88YURGqE5VINZXm3y5H6psS1oWhEWCsXCxybkciqYHuzvml
AteZ59dA5/FoqpqdzS6VOptSqG6zMKEPD4QQXyqCilxrFA5liOLCTMnX03GaXSwuLswvFYpCsERD
wta5kgCU9fT3FOfmAxSTU7ORWF17Y93w2LAVr29KWBfHxhsaW2K6kcstUMv0KhVmWuVS5Z7Dh80N
jYB/D1+hBKoRJIzVykVkBkWpGWbguYQS1wtSyYTj1lAqBcw2WLnmJ2JWsVS1IhFOV7oS3i64oo8F
rGRi3JyxKaWBAgbrMdYV97AiiY9cvBBraK9P2nhZ2l/t8LhOEG0YTnhVaMfaCnobQ9L3ZCydQVgJ
DcI40eXml0ApBIFY6fyDCoFRIqTijEkp1+spsiGT+wURRuX/kubi0AwelhISCigoQsj6dixUcmmp
EE+mOKOI2DOwDRADGVSKRaRGXTKGiEoqytc0ugUEIIWlJd2K2KYe0jfwfco0xpbLVWw0Gd8bRAhV
c6qEENM0fNdjmg5KSCS6xmq1MqGMACzX11sjuIe9k0KuYpQIIcPWR5fbGW8aEACFKtSuCCEKIRKx
NU6HhobCbtBhI9nl/g+rnd0owTByevXglZ2CQ6d7e3u7bdu4kl+0vvCen7r0zW89ee9nv3D4rm1u
tTK7sNjS1jZ4/M3Tp0fMuvQDDz5IvfyRt84efOThlMkIZfn8PLfqdC/7/Z++8aWvfqkyM3HuzKDj
Y3tPb2Nd1AOaiptL+Yplcs2MxqP2RlN4HYSB6pmIDdIbHh5v7e4pzk2QSDpK/dlsta+n26kWBbLG
ZAOiQlQrXbcoo9StlX1JTQ1KVb+pOamElEoGgVinifgGIXwRKCWe5zPGdE2TYc4yknKpgIg7d+4O
As/3fUK5xqnv+WEnCI3zIAg03WREhbVPQ5bSNB7WPQzpNjMzk8vl4vGYG8jlDpfXEBiAQBBUA8ZK
8+PP/nRkbm6qVJWtHd3t7amW7u76uPY3f/qfZCqVjtjZJ/6hrq5F+uVqzSVa8jd/+3O9bdHv/tV/
H53PN7bUUcprtcpb2XnFzEQiKhxnyansO/zooTu3rU0p2zxQCjmDY2++OV1UhaWFYk12tnonLo22
9g4wrp18++UCa9g30LpUquiGRYVfE4hezSNMV+7g4Oz2XR3ZmXJrT5P0RSRR19qcCf38mwcKqZSS
Ujq/sBCPxxnjYVx/LB6fHb1wfGjmk5/6hCzNDw3ndt25Q/qe79XmZnINzfWvP/uDbBD/wuceBSUI
oTKoDZ0f690xoAIvHNkwTddx1r5F1zAWIQBgxZu/+OuPCVEZGhlr6drxUGfLhQuXerfvevfZp0ux
bV/46hcmlyqkVo03tbqFmYpoMvjU8EJNY0wo3rdnT89unohGAuGDwp6evnjEnpm+dOT47O4791ga
A4BNq59TkIWCp2vk2FvnD3z6cynLrQnW399bzU+fOTfs8fnFqQtKASNq9PyI1dqU4owwAzBwnKB6
bDEoVp57Jd/Y1vDIJ7/IGVmpWrpZQAA45+Vy+ejRo/v27WtsbBJSEQARBPmF2Wq1+LPv/sPwfDYT
j7/y8gsN7e1x3X/ryNnf+T//ZTIRLZf4G8/9dKHq24Q4yqsWKkfPnHrkkU8kI9zzlOvU4ErH3Q2F
CiFiKCStlwcHhMCpo2/QeOvubZ1rmnasZuQqQuj8xNCFyeKD9x/YQPn2fbRCClKibujF+ckjpy7c
cceeoXOnGrq2i8LUkojcOdAys7Bk62Ryal43DATgFCRorQ31AOhWS+NTM5nmVpvCQnEpFq3r7u02
OKjNsQ+uYjWQkHO+LCQRUi2XZubmTeL/7Pnn5mcK8eaWNFEj2XxjQ6a5paWaz9/1sU8Ec0MLRZmb
HSsLqVzBLc2iRraS7+zaljQ5t+ONzRnbNNrb26uuzwleVysUvldxHMOwLNMI07mWo9oDz/NEJBIB
CB04y505CaFSSMIoJWRFDIQw6BZWo2s3ugHY+zKWUkAp0TTmVKuaFSHS9yWxLV4u10zL5pwiAucc
FFJKEAgq4bg+55wC0Q1NKoVSIQFU6qpqtpsEYYgs5zx0hSASIKRSLs7OzpkaK7kynbCXipVEPO7U
qlzTatUq1zVdNzVGkLDArQgwdBq4AY1avFSpaRpHqbhuKJS2ZXV0dKwyFvvDP/zDa6kf1HJ/85d/
E23uSka4UDg3dvHs+cn2jpYjP//JUy8e6+4fAOHVqmUfiV+tOEEgPHdpceHYO6cjyZTjlBkhS6US
1zki4Ywud49GDPM8N5ay5XJZ07SrJDwEwggohaZlDJ86+vLbZ3Uujrx1JABy/tjRqSWnv6/3xOs/
vzBbbkxG8sVSbn78lRfejmbq8vPzVjTqudV8vlCrVR0vYJQEYtOl/q1Of7kA2PLtkbBL8NTUFKGc
Eaw6Lme0VqsBQBAEjDFU6Pue6/qe60hFUPq+QALC8XzGSFhEWilZLBYzmUwkEhFSUQLrmBsIIUqB
EWvcvntnnan+9I//uKFnZ9IKjp0c3nH3/nI5R8zIS9//uwuL1e5MhuiIATOjtBKoNNfOjY0vLi5K
VXNKNTvdFE/Y9xx6UOds1Wm40YR9HyACg2B0LNvRlnnlmRcPf+l32njuhbHIVx99sJqfP3XyXJlH
c5fOV33Vt6NjbnboqScXbQLRluHa7NjgVK4xXf/xz32hLhn1/M23WF2JlRB9UFKZprF79+6w7tz1
Tl+xAl93Xowx27aFCNtpX6dUJCIQos6fOGdF9dffPNLR1VkulUSABx867M/NVqSaGBlGg49fHN65
725ZWrJTmUo5C2BbGlMYuL7INLSYUD4+lvvaFz+7eRTAG5GxTMuYunjmpbdP3rFnz8TYUFv/7vLM
kGs0HdzZevLsRUYCoaL1cT6/VG6qb6wV8xK0mnQziejF4bGmxvY7999psOta4jc82CbcChljy0+E
EClV2APpl7wxRAz1zRuyvC9fAxgaBJeTV8Ou9kHt0tBM/84+UBIJpZd7qKJSwBi9dP50pLGjuS6x
4dRcO/kbkLGAaxooRSkTwg+to57rEcpM0wAAKcJcLqJpTEmlQFFCEVFJSSijlEgplMKwK31Yjket
NB/UNF0IfzUH+Nbjeox1E8dfZaz11xIlheu6QSAAV1qsKiSE+J7nuq6Uimr2wM4+AhjaoxFxxeS6
XNuob8eepro4bIIwrBtHmGC4OHXpySefHJ1d1DQdUFZrjmbohmmUC7mZ2YVABAqIW5r/0fe/d250
JmJHlBSUcU3jBHDk3LtPPfO8E4CSQtM1lFIhcs6Vkl618M6b7wSK6xpHDJN+P8q41vKOhBC/uvhX
//Pbhx/7jT19TQrY4sSlqQX3wME9QydefeGdya//k6/ZQN2aS5hGQWqGxRm9yohw2aN4+wARdKaO
vn3ygU9/vjx5/tXRC8V8tpArxxvSEEjN0oOlyvjs3MOPfbEyfrpn7wN7u2J/+z//14FHPjl/5h0n
1vLIwf7jZya/+vWvHX/2J0MLSybC3GLOiCfSkUjZqabi8WKxcPrUcTT0+rrWTz32KAj/NvMsfhCs
L7yb8aaBHdszNvzZf/yP6c6BhClOnR1p3b67p69/rhadPPPWE8+8vf+O7YVc0SHqM499pSUduWrL
u40WqjWTR4m8u6vxpeee39ndMDQ8PNDZNjw2zm3Td5wUrw8E7ti+3StWOvs6n3v1RZMeam1r1TiN
Jet02+ZGtCHFn/3Zc1rNR6FYJDrQ36BzcvbscRJNRTw/asRKUOa63tTUbOnMCT7K8TbrOKFDeamp
ocWrVWN1ja2N6UqpNNA7IIMq0yONqWSpONHe0U7QLzhuc3ND1XUAIhs9kZsASqjnedvuuq93jxi9
cObAvQ+maen0xdRnfv1LJhEIFACFEIRQw9S/9OutSLXtfb0EgLS1eK5TqXn3PfTo4lIpmYg7jhuL
xwDBsvWIQVld++7t7a4nKMqaF9iW6TnuJtFpPiRcV3hfPa6UopQRUEIi5yy0wjNGj732fIHUffz+
uzaPeP7euBGtUNM1t7x49N3TA3cc6Gyqcz2PMY2CAsbcSqnqYUN9yvM84VXeOfpufdeO/ra6N159
JdLUt29XnwgEY4wzGghBKRWBNzk2xu10b3eL8D3H88KOhYySjeo5eCuF9+sz1rLhPCxZocKSdquP
R0m1ogtuvBZ9g3hfxhICY1H92R/9uPOOg9Qt+EhzC7P5xVJ9e4uGRIH0itXJ+bn7Hv300tBxP9J8
74FdJ19/qURTB3a1vfLS67F0fWF2tixEY3OrKBe1eMLLZ6seEo1oTO/ZsWeguynsVr9RFLiVjLV+
2Mzk6IWyg8DYzm39g+8eVdGm7b2Zt187ccf998niwuRsoamtVadg2JbwfU03GLsNGOvGQG1LG5uY
ak/Q146eaG1onM5OzucXnHIt3dwYlCtGJDI7OduQjJ8cGcv1dcVjkdHxhbERf3pyQS8sMmpbljk7
dmEuW0yn40TpQXFpqlZrbW65Mx4HJT/C0vpVWD80uZyd+M4Pn927766jb7xqxtIJM65pwexSORUz
BwcvNHcNdCZSeadkW9rY8PTehz55eP8mjYS5dmrvbcdijCnhzM7nyvnZkrI74uLbP3j16//H71lE
ANNASgSgjEejxvjImJ1qaM4kL5w7G0k3qFqZ28lk1BAKakszL7988qHPfUqXHmG8VC6aViwej2w4
T23kihWW/YjVt6TjSVPTAgHtdQ1cSkeJZCRWKhW6e3c11idlzdO4oRvWXXvvMlHBbWZYeA8gpTTw
nXRL766Ges+t/Kt/sSsStZBA4NbcANKpRK1WRVQACgBKxUJ7zwAK125u0WkwN7+USqeTiW2/2TFA
CHq+CYQkkgmlpBCbq77jh431ZSxEBAVAlFCgMQYEfM8DxjilAEQIoeuaU6nots029yp11aTeV8aK
Ro03X/i5MFPNTZl4NJJfzBYKlUxTg86461ZrZXepVNi1/+7cpZNjOe++w/eOHz8io62NCRifXOC2
Njs0MbD/LiefRa5bkURvb5v0BayUu91oAmzoirV6BlIEYJyFhWRA042QMkqhrmtKKSsSxY9cxiYl
UCqVWzp2qcrsT155OWbZ+fyiPElqpVq6pVHUyr5AHq2PCd+IxOMRKxBusZhfmhw9PZptrIufOXOu
Ip3Bk+cS7Y2HD/+azlktEB9hY9V7YH0Za352MrdUcGsYiZuB48VSmfq6yNuvPjdVYF/77V8nUhIG
kyMT6Zb2iLkJulneGG4o0E/Xq4XZE+fGEjabKXrbmuxvf++FL//WVw0IuGkpz9dNg3IzkzJef/3t
rl37Elh59+yljvZ207A0pgqFCjd5tVLhmt3R2WmZbNWy8Ku2Yq3f/WtpbvSHzzzve6S5vUPkpqcd
sX/XPtsMHGXUpofOzlW2d2TefPfkb/2T/2ugZRO5md8bNxjoxzXm1qr53FIi06hqS7mK6O3tBKWk
8IUkEct0PZdQ6tYqAmkkGtHCPDBUKiwDKRUSaptGpVxShGmchXXIpBAb7h/cWOGdAkAqXWdG46mM
adm6t2QYGlTKxXgkkzKNrOdFomahUNs5sNtkH6mtUCGahjF47M0Lk7k79h8wOJSAGpzkczmNa7Vy
oVL1kaimts7C2Lkjp4buOHjIMvRq2L6LcirLr7x88o579pYWc1rUKs5O12Rkx/bWUqlGCETiCdvQ
Npy3bhmus5Fp8S9/6SuUKCCUAQ18XxFiaBoA9A90V11Xtw3lC8Z12ByL/M0BAifq0qXJez71+drE
6R++9SoGQSlXorbh1ZxEuk6UyovF0v2PPkaKMz177h1otv70//mzh7/6W5NvvVhJdv3Wpw+UnJJX
K730s5/6ehTcQoWZF94ll3JLnS3dX/qtrwDKj472/H54P5fOSqz6Kves1Iu6/cqp3YiMZZjmwsS5
145d6u9qujg+u6ur8UdPvXLooQeo8q1oXFSdeDKhWfGWeu2pZ17affD+tMXMeCKolAQzGtORZ3/4
lJZuMCWpb2lcnJqoUaZhUPJkR0vXjt19wvc3Z6DfTRz/AwT6Xe8JbSCBfjHcYKAfocwytEuDZ/Vk
C3cWTg0vPPzIgxylkgoIUVIhKASqMeoHAeNcCkEZA1RCKkPXpZSccSEE07QwXT9sKS2CYMPN7pud
sW5T3JjlfbnjnqYboKQCYhqaU6upK8M+w7juy5X+Vl61y+1VCVmtELZK9I0mwCawY/0qI8z7EMFy
jf9qNaB0nboTZOXkNf+5/Ofag7+a2GKs9bGpVprbEbeZAL6F2wVbjLWFDwVbjLWFDwVbjLWFDwVb
jLWFDwVbjLWFDwVrzA1rjXuwUgniKqz4eS5/te7JiLA2AHClLuVqyayrr/rFVPpf5totfMi4xo61
liGufWarR1Y/hFwS9lVnbPlIOMgqA62OGbLC9X5CKVgJJoSwjiohlw+Gw4Z/rv5EeMJqyWK2ofW+
t7AGHGD5QeJLL0GhgKOjZM8ecBxQCkslsns3vvsuicexUFg+XiiQe+/FsTGo1aBWI/v3qx/8gNx1
Fywugqbh9DR4HsRi9Pd+b5khhMCnnsJqlRw8CEND4Ps4NkYGBgARPA/LZXLgANm1a5k1Q3YJ+SO8
/CpeWf0zCMD3oViE5ma4fcKjf3XAAS5vgnjyJAiBJ06AlOSuu2BiAsfGYG4Os1lob8dz5/DUKQgC
CoDHj+P58+Suu/DiRRwchFIJurpA1+H0aaxWye7dAIDDw6S5GWwbz52DdBouXoRUCn/2M0DE06eB
ELJrF0xNwcwM7NoFnqeeeILcfz/UavjGG+TjH8djx8i+fXjkCNm5E4pFHBujn/scvvACxOMgJY6O
wvg4efhhyGbxxAmyezdeuEC/8hXQ9Y0m6RYArtgKXRekxPl5EosBpVgoQK0GUkKhgJOTcPEi/d3f
JT09ODyMngfRKNm5E1pb8dgxkkrhO+/QfftAKeV5JJUCzwMAIARME4eHgXOSSODcHEkkQAjM5Uhb
G1gWFotQq4FSODxMMhlYWIDZWZyawpdeglIJpISODnzySZidBc/DoSFFCD7+OOzeTSyLHDqkLl6E
kRF4/nkcGYHFRTx6FL7yFYA1W/AWNg4cYHl/IYcPQ0MDMQwQAkZGIJEAxiCVgkOHSH09nj0LiQRI
SdJp4BwbG0k0Cq2tYNsEEfbuxcVF0DSyZw9oGnAOAMA5eB7p6YF774VSCQgh27dDJEIYA6VgdBSi
UWAMWltJby94Hv2934N0Gv/6r8k999Cvfx3n50l/P/3H/5js36+++U36mc+QL38Z29qgvh5smzQ1
USmhowM+8xkyPEwGBnD37uXf3eKqTYAPGDazqjmGYk0oZa/99iq9b/V4+H9K13/qaxuGzM1BNArR
6NpBcGqKNDUt8826yuANrFI3GDaj1MYUVrgF2KCwmStjiVbPvdqyACu6GMCymrb221UlDq582KsF
VUMOu2rYtTzR1ARSXj5NSqCUtLUtS/dSLp+PeLXCKOWWVrh5sIaxrowluvr4VVg9eJVGtu6FV41w
7U+sPb66sK3VCldNCWtZ53oK4xY2ATZfPNZ78/EWbhNsWYC28KFgi7F+FXELEh22GOtXDpRSwzAY
ox9q5Y0txvrVAqW0VquNjIyUSmVCyYe3cm0x1q8clFIjIyO+79EPM+V4K6/wSgMpJVJJstIQ5iMF
BEKIkDLcB5VSQkixlVd4C6CUYlxjH0nTxkqKLSNUKpRKECAKiELgH847tMVYIZASSggud11bbU7/
kUHIOwoBIEz5D1VDTgEI3JSu6HiltXGLsYAQQpD4UgEQ/Og6CtcFAih50xYsiUBguX/gFmMBADAK
uKXH3AwQWK4fusVYAACA+OFadX5lsErELcZaxu3IVnhT73ttVMovP8gWY93G4IzdrEJUhBAhxPKw
/CbEiWwx1u0KQkixWJRSwIq8fD2EnEdWuuCuezIixmKx0Ly3tLR0vZGu1pavrz5vMdbtB0TUNG12
djafy2ca6pWUQRBcdQ4BEkrRhBCuaQTRDwIE4IyjkmqZvQghKCVSSnzfX1hY2LNnz4ULF6SUkUjk
2kjakCPXHF/uprvuTW4x1m0JQojneZ1dnQanFVd0djVQQASglIZNv8N/E0KkELnsvKB6Z0M9Y7RU
XGK6bRlcCKmUVEhsy1RS+r5/fnBQSqmU6unpMQxDKbW28Cyl1Pc9ICxi24gSgRKUjuvpug4ASl7d
f2qLsW5fUMTg50/88FKZf/GxR32napj01NHT3bv36FRG7Kjve54vW1rqnv/xU1U9cu8993A/98xz
bz346U/HDRaPp6r56Wefeqn9jrt6OxtTdZnVOoS1Wi3ksNVfUgpjMfvFZ5602/YM1NtFHwyQnvAG
Tw3d8+jD4DvRaAzxihVui7FuWxCoVSuLxSXDanrir/97nkZaMla54kzPLQD4PiruizPj2X/+ja+z
SKwrHXv8f/x5EaG3f/s7Lz51cnDqvrv3lUqLc/mF2vkTZ075n/zsFxli6DuuVCqe5631pVKmFRbG
j58c1McXTwdSMCFqqEcpoD7//e/1DOy6c0ev53lr279tMdbtCkpJters3HufIGo6wvpjCek7TDc1
UFUnSGfqbQ1jTbOWYUinuFiNf+Iznxqbz/e0tc/MjD/0UJfwina86f6uAVf6xVJV+O6qKuj7vpSX
e5UhIudqqVjed+hBrsqvv37yjv17R86ebWzf05qIHDt3Kp3JuLVKIK9sCr4V3XDbARF1XR8dHS2V
y8lkQgrFNSaCgFK+XKw5LOCMQAnxg0A3DFAKAQBRATIashAhBBQqVIpSHvheuVI9cGD/qVOnCCG6
rq+lDyIyxjVNA+VPT2UbW+vnpuZbe7pr+dn5JaejvUUEV3eO/VVkLNu2b2vGAgBKabVanZiYeN+J
3IihKzRipdPp1tbWhYWFubk5TdOuvSqsL65pLAikpvPA8ynjnNMgCK61Olw2i33kgYiMscnJydt9
xQpBKWWMrdXdfhnKhPwnhOCcX65fv+6pyx+AUILhurheRBefmZnZaBLdUgRBsBwbc5sDEW96i5CQ
pW7KsKRUKm0keW45PgIsdVuAr8r/K9wafr6hvfm2w0dpUvjLeYvXgl52P9804vA11lWglHJGEQAR
hfgo7BfX4qMxKQQwGDHZzUizIeAIFAoJgH6TqotdjnlHRM6YH4i57JJSaJl6pi7+q9Z4/XYBAmiU
TBbcwSVPo9eNK1ZK3VDnFoS9DVbC0gKpxsfH19UGwoPrjYGIsO75y4zFGK057tmhyWy+LKVqakgW
y9XezuYgEB+NV/yjBEKICOQTE86uljiHdYKpCYBCiNo2KuELySmTUkipro1E0AmZcNWPx8r//M6G
i5Mzruu2tbX5V/ZVRADLspXwXc8jhK6K9ohIKNU4v6pjXlgsiYdnMMomZheTiWipUqtUg4npbF0i
msuX6lKx1XbZW9gkoAQcqeIG+3yTLsU6bz4icI2eePdNFqnvbMosFnLpdGMiYgml1p6KAJzAfEC+
V6wqBERMpVLxeHwtYyGCxuHUsXf1urY7d/QGns84DbcyyjX0KtNzS43NDUoIWOOx5pxzgOV0M9cL
dvY2ZJKRv/7Oc598YK+h82KlWp9OfFSFrdsX4e4jhJyvOCCvbgeMqHTTnjz97uBsNR0pf/d/f7v1
zvu+/KnW2VKVXHUmgEYgGyxrAWHERLVaXQ3CQUTLtk+8+fqco93dpT/14x/YVmJhMdfX31MpFxmS
sYkxI9L46CdSfq1KKIUV9WiZscL4HgD0ApFbKne2Ntx3YOfLb53ubm+SawupbWHTgBASiKBUKIQZ
XWuBiJrn1xzXqZaLgWJIy7mlbD7HERXCVSuWRqAsABULg7OqtdrS0tKqoQARPd+vVCr5EkyPDz/9
o5/Emto6Wxp+/P3TO/ftHTr65iJq+3fFi8WCX6uRFQ80IpqmuVy0U0nV0950YWQ6YlvNDeljZ0Yi
lpVOxbdkrE0LT0ii1LWMRQBErdLS2V11asRK/eY/urNQyrvlcjxi4ZVbIQBQAiiJJwkhBFVoHMW1
8rtTc7p33uGdO7/kwBd/87cikbhlGjJw88XyI7/+xWrNTSZSgevCGlNFGG9DCoUCLC9avFSuLuSK
uqYhYGdLg5BbWuFmRLjS/P3Z7Lzj62x9yxwCmIaJKAMhGOWopFwvZZISUhVqXyb62Lb66Wzu0tDQ
VbGjBACBmKaJSgIhSkmlEAjhjEmlKCHLasEahJ7HZcaCFVcaZ1QpRSj1fbG1VG1ahMUliq64Xhoz
Wc54XilDQdZJeA6/oQSSJhMIlFLXdcV62kC4hl3r6gmPrLun/f9DCzMuh1lJWQAAACV0RVh0ZGF0
ZTpjcmVhdGUAMjAxMS0wNS0yOFQwMjoxODoxNyswODowMIpIhb0AAAAldEVYdGRhdGU6bW9kaWZ5
ADIwMTEtMDUtMjhUMDI6MTg6MTcrMDg6MDD7FT0BAAAAAElFTkSuQmCC

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9237/d765194f-ac0e-3066-b7c5-33863e0758eb-thumb.png

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
MiswODowMCeiFUUAAAAASUVORK5CYII=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9239/1c267bc3-220c-3ab2-b6ee-2668f37de785-thumb.png

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
TkSuQmCC

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9241/c4900051-da80-3825-8509-3ff34a1cf663-thumb.png

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
SUVORK5CYII=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9243/68436e3b-d095-3d2d-808d-6aadbb5f6ad8-thumb.png

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9245/dedebe8d-e409-386f-b625-92dfb592c501-thumb.png

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9247/9ec36874-1502-36d0-9b8e-87b57a011d0d-thumb.png

iVBORw0KGgoAAAANSUhEUgAAAMgAAACWCAYAAACb3McZAAAABGdBTUEAALGPC/xhBQAAAAFzUkdC
AK7OHOkAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAZiS0dE
AAAAAAAA+UO7fwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAAl2cEFnAAAAyAAAAJYAz3IMTAAAG8BJ
REFUeNrt3elzFGee4PHvk5V1V0lVpaN03xI60AXiMgZjbOP76HbbMd29PdPbM9M9uzHRnte7sREb
+w9s7IuJ2JjomL5iZrzdbXf7aLsxGHMYcxgMGJBAgDgkQPdRqlJdmfnsi5KEAKksbNPQ+Pk4ZCFl
VlaqKn/1PL/nSjEZicpEMsXMTIxzvWdZv3YNUkrmpE1JJG0j5DT5xS9+wWuvvYYQAkX5SzYxk2Zo
PEJJjs7c5S6EYGRklEtX+lnZ2oZlWWiZLaAueUXJkEiklEgkGkKQCQ8VIoqCACSZALEkmgoNRbld
Js2Qs1UsQKUVijJHgpRIyWwJoqJDUW4iyZQi2nJ2Ni2J0+Xi4Y0b7/V5K8rXwrQkMusemSRdh+zV
K5smSBgm12IWRQ1tXJlM3Ou/TVG+EgFMzqTx64Ilo2Q2KPS5DP2mapauz++gASVBiSklEgP7ssqc
bygJwjRAyq9+LOWuKvYI7JptifgQ8+26euaHG8Eh4nHsv/oV2vCwytzviETm5JD6wV8jg0EVJA8I
XcCNQBACZmZw/PKXmJ2dyIICkFI1A38RISAaxf7GmxjPPoeZl4ewrHt9VsoXkIt9iMnM2ylEpuDQ
53rRbyos3G6S//RPWC0tSNMkkUhgGKYqUZYiBLahIfKOHCEWi5GejqoA+QvgcjnRdX2RLZngEEJk
kvRFiwjTBMMgHY9z4vhpgsHAbJ4iMU1r8eh7QAkhsNk0luxSFQL76Ag5qTTDI+PEvSMqQO5jQsB0
NEau30d9XTXWIu9VphQB/UYGsvibb1mSnBw/a7s6AIjH4ySTyXv9N/7ZORwOPB7P0jsMDoLXQ+vK
Jqivv9enq3yBwaER+geuLrldiLkSZK6+tYzak2VZxONxvF4vmk3HpmlIaWGay/+0nHsuy1pmCSQE
mgZIgZTWTbmv0LTMJ7uUmKZ5y7ZM4C/7ebKQUjITi+J0OrHZbF/5eMr9QSxRKMzlIAiRKUHufLCi
ZKD3KAc+PY2/so1H1rXiEF98IQohmLx2kWtROw31pWhIsvbWCEEyMsj5C+M4dRNXQSXlYT9SSoQm
uXziAB8fOYM9v4RND2+mKOBEShAaDJ47S0TLo766ALmcIJkdpLbUC/bNqVAqkLlWtbkcZK6+tawQ
EYLBM/t5Z89Z2ru6cDlhcnKaUI4bM51CajbS8ShpacPl0NF0HZvIpDQ2XWDpTnxenWQsSjwRR3O4
8XtcAEjLIDI1jc3uwu1xYaXiXL14mo93XyHkTuBpBJ+7Ep/Xg64ZnP/sCBGtiqpkP//vtzv5+x89
RWpyAuFyc/nkYc4ZNQSDTvweF2Yqje6wY6TS2J0O4tEIaWnD43Jj00wi0zHsDjduj5NkbJqkoeH3
u0jE4gina3lDDpQHwlyCfiNJvwMaaXpOXKCkZSNrV61ApiLseO8tijueYPrMbiJ2Pxc/O8V0KkGw
sJJQdSUrHOMcvJbDmjrBxcsTaJqPxNXTnIskMPUCfvTj71PiF3y+6y12negnHjF45MVt9B/Yw0Bk
gqRWTq4twoEP3uLkATdPv/oD2qp9gJ3Syga2tDfT/8s/8Nl+N/ve/xBK62nMmeHkiZ1cOfsxax/f
ysSx83S++DAn3tpLRVcVh3buJ5KKU7ZyC2XyIkcujJCI2njypc18+s67DIsA6x+q49j2E2z43vfp
aii41++b8ucibhQa2p1OlpII7LokEpkibVgYUqcoEODYJ7sYmLYjImMUd25ja0cFKVNn+vJ5jvb0
M3G1h0PHLuKwpxkZGSMSNdn07EvUEKF/aBorMcXpC1Nse/kVanIEly/0kgi08MoLW/HpElPqdG59
gU31Ts5dvoZhWpiWhZQWiVgMzebj/PGD9Mcs3B5BPG5Q17WV5x6qou/8GUZGxkmlU4yPDnH2zAWK
O7fxxOpqJq9f4sw1+NZfvUy+LcG5k0f5/PI4vpCTyOgYvpI6OleUwh3kWcqDIBMh2lxHoVhmmJiW
xoqOlQyd3MG//uLfeHfXIULVDVzvPoQZKqemOJeewzv46HA3ljufCs8U/VYZ68oFY6KA0pAfTWi4
nF7cbgduhwNpmJjCQb4nyfZ33+H0lVG8uUGmrxzlnZ0HiJoCTRicPvgBh3rjlBSGMA0DaSX4dPcf
+d3buylqWUvLimoKAkGKw8XkuDQundrPh4cvU1reRCAwybt/eJdz43EK8v2c/XQnHx7qJm33EdDG
ePutP9I3HCVQVEZ5OJ+CghLy/F7cLjeWZXyjmrUV0IRAy3QUitmMfXkPlJaFs3AFr77i4+KVITz5
JdikQX5pJc21FYS9RWxJ2Dmwey/+XB8r132H6pQNr25QltbJcUlyS02EZeLK8VP0/DPY/U6SaRvt
m5+Ak8f4+PIwxVVNtFYUMhqzyA/k49TS1I+OIDxBqkr8JBMWTY88had/CFcwTHVlCZoR5luBPiI4
KW14itKmUZKam5rqKpIlXi4OTRB4JI9wgRef08OB3XvICYV5qL2B4599ytBFLxVNq6kLhxmcThMO
F1Lb6EAz0nzR2E/lwSEQmVZQKTJDTQQsqwQRQqBpGtKyyMkvYVVhWeZTfOf7hBs3UVPgJjp4ld7u
brS8ejasqcXrd+OVEonAO3uZub2Z55JS4issQCIRQjJ2rY/eswPUr99IbXEAry1EiZgdEiAhr6gI
pJxtuhXkFpTQGS5DSivzO7ubupbW+ebdcHEYZKZ52l1QyupwGRJBZOg8vadPI4J1bFxXzVD3J5y7
MEbnY5spzfVgD6ygbL4pem5Gv6bmzXxTiBuJui7EbJ/BMt57IQQOt4/BsRhp0yJz8Tip2PASQgjG
piXSW8emb9WiaZl2n+Fo5mKef+Zbz2TBd2/tJp6r2YSm2YglLKKSRR53a5O0ZPFm6oU/azfv76nl
4W/VzJ+jo/VJXmoV2DSNyZi1oKzIHFe3CcJB7/z+yoNvvgRZtOyQEpFMIhIJSCTQUilIJLAkRCKS
gNuN/g26VkwLpqMSn5bAttjfLQQkk2oE7wNibpbtgmZecfOI3mQS92uvIb1eXKaJO5GEHD9CQp4B
Lvtih82M0Zqrhiz8tJWWSTKRwMSG2+tGW3AhZapHzI51un8lDBA2ls7VUikYHwdVyjwQ5ueDzI3k
FZCZqJ6TQ/yf/xkRiwGQTKW4PjhCS1MDlgUTUUm+T8NmsyGQWJaFxIYwR3n/9V34S3KIU8K2bZ1Y
qRTCJhj4/EP+9Rc7cYT91LY/xUuPd+LQbWg2wdCZgxw4meSZlx9FN1NIIcCanS1vSYSmoQmBJa3M
Miw2G8w+rxAamiawTBM0DSEl5l0YJCiAyZgkzyPQso00cbmgtPRev7fKVzXbCbJ4R6GuY65aNV+i
pBIJpvquwJpOpAWJCKRdEQ59eoyE5qe6oQ5nYogTZ4Y4Ga5hxcowF6+ksQxoXb2BIr9OVJuk6L8+
wssv1vDr//t7zrW0I672Mhh3UdjZTu/AOWwpg6a2ThyRMeyFYdIjw9hD+USunOHieILicDUVJS5O
HD0JriB1jfWY45fpuRihcVUTk+f6SPgKaG2puPPezy96vYDEFFhe+NoPrtyX5ro/9Pkuw4VM88aO
hnnT0G0Ni1N7/8RnF0ys4W56L2/APnQBd3Eek9FpTCOXwWvjhHrGGZyA7764DsuQCFPiDRRTVWDS
s38Xn7z1PslAiI6uJkaHhpm40sP2gWvkjI5R8eRzTO5+D6Oymms9fQTzJR9/dJLVjS6G4x7Gz2yn
f8OjXNz5LlfTghVDG5j+5CRrf/gPkM4UQF83aSxsbFAeZDdyENBM0ySdTmMsCIqspMXEVIKSxg4a
qkqwEjPEtCAdXR3keuwYFpQ2rKStsYpUfJq0Baa0SBkpRgYuMDKdj1eLY/jLePz556kr9BEqr2NV
RzMiGcPSDGLT04zHokRiUbRgJe1tTXg0yXjEorZtNdXF+aSiU0ym3Wx85gW66kvJDVfSuKIcYYEp
v96vuxFwyv3LsiySqTTJZBotFk8wMRUlNpNYVm+xKXVWrGzmwpH32HXkPM5QBfVFaX7zxns4CsoJ
F5cRv3aU9w5dobVzDcICdyCPkXP7+Y839tH4+BN0rd9Ea42PM929JPQgjuQV3vzTAWo7t7FqXS0H
d73NlaSL+sY2csyL/PadD5nGR3t7DYc/fIODZ66TU97E5o0NXOrpYSQqKK+pQgOMrzk45r5UjHxD
CEim04yOTzIyNoFuWXJ+XNNySAmO3GJWNtZxcDxKaXUFDzeuZW3KmE3cBe1rHsGSYLfrGGkoXLGR
1/7nusw4LnumEv/qj39K2rCw6Tob1m3GtCS6riMo5qcrH0fTdDBn0KZamJiIICsrySsup7lmiOhE
mtKKClrXtbAxmZ6dm5Jpabhbn/ZSqgrWN4W0wDBNDNNEn11DblkP1AQ4dZiatIgZblY/9V0aK4qY
mpGADQxmj5Vp6kkYC4+r3/I7LfOVmvs3mY//uX2FwEpJphOQ37yVtrWdzExcIS4CbHrxP1EWzGEq
LgE7zMf2XYgOkQkO3Qb3eUu08nVZuAKWhGVfV5qAsA+8jnKKy8pBgmnercqHBLuPdZu3oAkwDQk5
dZTX1GFZX89MwWW/XgJ8DqEC5BtIn5vUt9zLzW6DoHvhb/5MFQ9ntqEkivL1mru6FnR3f7VPZGml
GOy/xtjIMMMjkZu2TU0MMzq9yJKlMs31y1eIJIx7/Xooyi0yfelaJizuPDikZWLNBZUEIznMB//x
Ngf3fsSu3d3MNxpbUQ7s3sPgdDrz4+wkJ9PKLDGfSqbUXCTl/jNbhOhy9j4Id2Jq4CS/e/NDoqZO
x6ZteMc+Z9/pc4wOazxU66f70A7+z9VP2fz891nhvE7cXUzudC8/+98HmSFBbriI4f5rrH3227j7
+zBzSwh6VBe1cp8RoCEllryT6UAWJ48eJ9zxGM15krM9n/PZ+TjPv/QceR4N0zIJVrXzRFcZp44d
4mzvJQrKazGm+hlJ5rKmOczVYQdbu+o4feg45870MhZN3euXQlFuIwAtU4JYd5CDaPjcNq6c7+HS
9TE0uwtbaozPT51hIp4CIYlNXqO3bwSnZnI5otFSX4y0dEpKSyksKKI4N0iwIIDTMJBSJdvK/Ugg
Ad2anaEn76AUaVn/GGOfHODwuRQNa2tZv6qYI+eHeO6VFykv9hHw9RDVPawsCTKRdBNwgL2uk02F
OgUBi825gsKQYIu7Bs1IkhP2LPOZFeXPRyDmchDrjvKQ6ckRBvouIXPLaGuroDTPS2nDje0l5VUA
WJaJlBoC8OWX4svPbPeHMt99wXv9EijK7eYXcxcCfW4+t5TLb0rKLannpe+VoTs8eD2OJffTNLVM
p/IXSmRm2urSkliWeUf9IDbdSW7Aea//BEW5S8T8N13KzOw81HL9inKbTJI+v0LJl2cZUxz68Dje
Ai9JGaJrdc3XNBjE5MSOt9hx9Dzeogqeevp5qsPe2W2S84c/YSZQT1tD4b19JZUHx4Jl4uZLEHEH
ASKtJAOXr2BobvLzC7CZUa709/DZ4RNUNOUzOOEjN2SnrKyE1NhVhqYNKiormB4ZYDrlpKQoh4nB
EeICiksrsBkxYoaGnBlnfFpQWhoiMjyK9AYpzndy9Xw/tWufpCTVzdtvfcSP/3YbIxevYA8EuXq+
m357Gq/LoKw4n3hkBm/AS2wyhjfXw1D/ZVKam4K8AnQ5Tf/gBH5fiPzCHMauDTBjuSku8DE2NIYr
VEB+rmpRU5jL0jNj0DMjeuWy85C+ozt5Z08fianrlK19Evf1zxlMm1wej1IhAvSePMbMVA/lLV0M
dB/AX7kaMTPI6z//HRFPHuvX13Fqdy+FDbnUrHmR4sgRLsRdXNi9h+uWi3VbOznzp+M88nd/T3F+
GE2zkxsspKPKw6m+7ex/5w988MF+XA0tNDqm6R44zPCFQ6zctJHBw5d49Aeb2fvrXVR3hfn00DkS
kSGKVz2Of+w015KS65dneObFNXzw+tvMBIpZ31nGsY+v8p2f/p0KEGVeZvFqSWY1k2WXICb9A+Os
3PI0m9uqSU4MMWoV8PKrz1EecGNZgobVj/D81jYmx8dpa+3Alp7k3JluhgwX7V0r8QtJadMavvPc
Nq4d3cnJUTuV3iSXJi1a17YTtAsKqprpWlkGc2cmJJHhMXRnAVf7ehDhClqbqnFpOh2PPMNjXSUM
DQ0ST8xgpJJEYhEu94/StPkptnTWkJwcZjgV4tuvPEuJx0b/uTOMiRzaVjXjQVK5cjUtlaF7/Z4o
94mbRvPeyZwQsFFbFebTnW+y/WAPem4RYX2Qn//690ziIMfv5VrPXt7Y2U1dQyvpmQkunr9GsK6Z
hrCPWCyF0+0nmOMlv6wSjzWJLVhOU2sbLVUhotMJ7A4PoVDu7MraGg5Hml1v/oo3P+pm1aOPsWH9
KnKFSTIt8frc9HzyNjuOTdLevo5wwRT/9u9vMiKdNNYWc2zXH3j/k25sOWFK3OP86te/5cJYnKrW
DqrzXMzMpHF5cgjletUAeuUWX+L+IADh+tU8mbDz4fsfES6v5LGnV7F+cgav24fTYaOzaxNJNPKC
uUSqgnQ87CYv309rTQORhElOjh+7TUfDwUt/8xOkzYXbYeNv/vG/MBlN4M/JxbHWNjsFROfhV/8z
zZNRnL4cgrk+qHqan9StISXsBDwPs2Ymiqk7yAsGaCj6MWujCXweP06RAHR2vbeLcFk560pK0Q9+
zMFYktrWdTRX1RNJWeT6/eg2O6rXRpkzt6rJlwqQmcgo589dpLLrMR5qK8euaxQV+ua3O5w3bjYT
KgjP/9sfzMd/y7Fc7huP8+YE8ebc/nxObw7FCzdoOnmFRfM/ur038gaXN5cSby4AU9evcqG3j7LO
rTzcUcaVwx9ybdzGs688S57dhggV3HY+inLDghLkThp5AyUrePWvV9zrs/9CucX1fOcHN+442/rw
M7Q+fK/PSrn/ifmedDXLWlGWIsjcBvpOpeJRZgwbAX9mcnoiGsEQOlbawJOTc8vK7xYTI8NE4ibB
UAC7ruFyuUhGZ9A9HqSRJC11PM7Fa3uWmSYRT2ea3BxOnPYbmUIyNsXI6CTC7SOcn3fT86YTMxjY
cS++0raiLGlhSHypHOTkjt/ym2Np/tt//zG5YpJ/+V//A+f6V9hYk09lcxN+x42nuHb6E9764DiG
7qahqYTxpI0Xt67hd//yM+qe+xHB8YP0u9vY1l6+6HNND/bwx/d7yXWlCLQ9ysa24tktFkfffZ33
Ph8lN6BT3/U8Lz3aPP+4nr1/ol9v5NmtzSjKlzN3G+g7fJg0LKIDfZy5PEqdOE/fRIJ2U4JhMHzx
NHtPdDOUFmzZsp7DHx1j/be/R5XbwCDJR9v3ceFCH2MzUbwX+5gcmaRsSyYBH798ip0fH8fuKWTN
xtUMnTrAsd5eJiNB7P4ovbv+yEBfBU9se4yQB9IpjQ1P/xWbqqL8/PV99DcHOb1nD1ZhLf5YhFM9
u5kcPcemLQ8xeb6f8o56Bo6fo3hFKcf37mY07WBFSxeFtkH2HD2LP6eMdRvbOH9oLwNxH2u6Kune
f5LwqvWsXlGimoG/KRYONZn7xR1l6TYXLc1VXDp5lEnbKK2tHbhkhMMfdZNX5eJEn6SlIMFHu49i
GUEK/Bbb//1nTOdtoqVQ8vHxXsobujBGjnHBzGNtyA9E2btzH77qFnp37cBwpBi/NMWK6iI+ORnD
SCexB6qxjZ7icHcDT3VVZk5cgidUQMib4sA7b7Bz30l8tZdoL3AjnYWErEH2HtjPzOlBvPWFfLZn
P6HRIsZiPgKps+w7YBBIjVHW1sjBd3YjrWG2/2Y7emkR0/Farp9N8MOnQyo4voEEzPbF3eHbb5kG
+bWtiIHDfDrkpqkmtGDxayf1Dc00NZRisxwE7dN8dnaImroa7CaEi4s5vf8g5Ws6GD/fSyLtItej
gZQYpsTl8+G2Z+58K20OPF4XIMEmCOYF8dgdaLNnbckU42NDnD5yBJHbSK4LSpvX8Oq3nqM0YMcf
CuBzudB1Jw77DFcvXWEwFsMwTTSnG587czMfwxJ4fD5cuo6ZNsgta+DF77xMW1k+hSUVFARc9/q9
Uu6FL5ukF9U143aWEVzhp9GeT35qBGfchllUiDfkIiXyyPP5WOn10lTRwjvv7eBQXGPrU21UBGd4
4qkU9SXFOLc+SizUih1A+HloYwfv7t9P30iCl+rbCBr7OHreoHNVO8XOaY6cPoGRV8MLTRUAlNbX
cmLfIU7VNLLthUfwxWsY+/0OTvX00VnRgu9kD2emQjz7wqNMBgy2Hz1BWXM7G9Y1s2/XTg52X6Ko
o51NdQXsOLCXwYjkyXWbcaV3cuZUD52t9bS3+1UH4jeYuHB5QI6NT4I0GR8ZYsP6dTet8p5IJOm7
1M+Gdavv8qlIBs4cYc++T7k4rvGjf/xbSrx3pwVqZryfPR/t5bMTfWz67g8pTV1iz76jjFDAT/7h
ewR0VaF60A0OjTAwcI0VDTWZ+VBkes9HRke5cPEydQ2Nc4tXc+c5yF0hyMkvoWPDFh4rKqfoLgUH
gN2dS11zO/WrHqO6KszUoMXaLQUUl1eq4FBuon+ZHORuyckvpSX/7t/jz+7Oob5p5fzPoeJKQsVf
4YDKA0uDufC4P4JEUe4n833PKjwU5XZqLJaiZKECRFGy0FTlSlGWps2vs6jiRFFuo6pYipKFauZV
lCwyJYhQwaEoi7lRxRLz/1MUZdbNOYiKD0W5iaZiQlGWpqFaeBVlSdrcBFwB98GQd0W5v8zmIAJV
jijK7Rb0gyiKcivVk64oWaj5IIqShSpBFCWLG0NNVBGiKLfRxPw4LBUhinIrVcVSlCwyzbxqNK+i
LEpTsaEoS9NAzN0zXaUhinKL+aEmQkWHotxGJemKkoWmSg5FWVpmPojqKFSURWlCCIRQ5YiiLGY+
QNTKJopyu/mOQlWGKMrttMzKo0L1pivKImbnpKsqlqIsZn7KrQoPRZm1YPESTUWGoiztlqVHFUWZ
J9Vwd0XJSi3aoChZzAaIRIWIotxuwWhete6ootxKDXdXlCxUgChKFipAFCULDYlKPxRlCRqo+FCU
pagqlqJkMR8gqhRRlNupEkRRslABoihZqABRlCxUgChKFipAFCULFSCKkoUKEEW5xcLBJSpAFCUL
FSCKsgSJChBFyUoFiKJkoQJEUbJQAaIoWagAUZQsVIAoShYqQBQlCxUgipKFChBFyUIFiKLc5sYE
dBUgipKFChBFWVSmFFEBoihLkuoWbIqSjSpBFCULFSCKkoW6R6GiZKFKEEXJQpsrO4TK1hXlNhpC
3b5TUZaigQCVgyjKzWZHm9zIQVSMKMptMq1YqBxEURajzUaHoii3krc086o4UZSbqRxEUbJQHYWK
koUKEEVZxNycQn05O6fTBrGZmXt9zorytdCERjyewJLW0jvNRsgXBoiu62ia4NjxU2pQo/LASBsG
xeECpFzkBugS5Ox/ywgQG20rGxc/kKL8BROCpa9rCVLC/weV0LDJkyWxmQAAACV0RVh0ZGF0ZTpj
cmVhdGUAMjAxMS0wNS0yOFQwMjoxOTowMiswODowMPsYwboAAAAldEVYdGRhdGU6bW9kaWZ5ADIw
MTEtMDUtMjhUMDI6MTk6MDIrMDg6MDCKRXkGAAAAAElFTkSuQmCC

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9249/6a535926-3129-3f40-84ee-736be8e037cc-thumb.png

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://dl.iteye.com/upload/attachment/0048/9251/c8c6bfe0-cd59-3ed2-898a-8f27b7745ad7-thumb.png

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://yuanzhifei89.iteye.com/images/sina.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAEAAQAwERAAIRAQMRAf/EAGsAAAMBAAAAAAAAAAAAAAAA
AAMHCAkBAAIDAQAAAAAAAAAAAAAAAAUHAgMICRAAAQUBAQADAQAAAAAAAAAABQIDBAYHAQgAERIT
EQACAgICAgMBAQAAAAAAAAACAwEEEQUSBhMHACEiIxT/2gAMAwEAAhEDEQA/ANifKXk096OzU3v2
v28NSaVOjE265ZbIMqDxzQbSw1KjSCs2w2xpLDAhk8x1l6VJW49NebeQnrf4698zz17rNzfVG7ra
WIRRmSgCLhyYcZjMkf1AwUYmZzJTExGMZ+de/b3uzrnqvf0PWvR9SW07OIIKylM2PFTQUAXAU18k
TiUXMVhAioSApg+Xj+Gv1Kr/AJewxUbZ6/UxeiWYbZrfkmu5HX2is8FZooV+TUoPdJrsYcEZjLPA
uj5cLqH3GuFGp0OT9MSOJlYqx13VCvcwEXm8jS9McpEoj8R5RwOOQ8SGYnHODAvyXyjU7xnuDvjb
nrhlg+sUfFW2Ws2TIULUSzFlkUXSbucKdD1OggEprHWsJ/qqZlfHfb2TgCOM91o6Hpdq88ZI1hRf
Et0p2gP00TaaxcWpxLRKYQpON7vyHYbmDidGH4xCuCy7KuuoilWkdbdbD67tOvU+sWyIVPpVv88o
sLZK4MWZlq5WixgmDHBkEoDj7gWRGJhh9v8AR/a72s3aenKbd1XZtxG2Daam3SG2xDqnjCjaC1tN
RJJquLz0zTdsViiAJ1M5ggJA6F7JrDOBWzx7gC7BrBTfNlj3+5HR9OKVWjAp0g2Lngc0wShElyra
qA6XHRf6EZ7I2S820mOiDzi+rSEs9jSGnPq+mhlg7lyGsKFkCxnkMiquucnjMRkigZmI4wH3n4yd
H6d2Fn2FV93exyqahHXevHRqJK2qzccPhYtt7b3F8a/OFsZxQkngJFLSsZHjP//Z

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://yuanzhifei89.iteye.com/images/tec.jpg

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja3kAAQAEAAAAZAAA/+4ADkFkb2JlAGTAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
AwMDAwMDAwMDAwEBAQEBAQECAQECAgIBAgIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMD/8AAEQgAEAAQAwERAAIRAQMRAf/EAG0AAAMBAAAAAAAAAAAAAAAA
AAUHCAkBAAIDAQAAAAAAAAAAAAAAAAQHBQYICRAAAQUBAAIBBQAAAAAAAAAABQIDBAYHAQARCCES
IhMVEQACAwACAgMBAQAAAAAAAAACAwEEBREGABIhEwcUIv/aAAwDAQACEQMRAD8A32zNAErT6Hdr
hU06retjs8+rZ1T1rGDlWEiESLZslkt9pkQ1k1p4TMMtNI5IYUtXHHHXkoT9NXaapXZfnUWBRzc+
qDbL5GTkIZBStal8+vMiElMyJcfAiMzPnMzrrxfn097ZQ7Z3t3SdVz6cMFUNJJALn2bHHvxBtABG
DCZmDM2QMeH9GFCRQ/U2hGfsYpsuJAoVxNVwXOHmxk6rzJA2Kix1ewoakFhJcRIPwXvXJz7bkdf4
qS6lSPA86RYNRjXjpde0iNS2kuVmDhEy+tgfAkJQs459BmCj5iRmJ8k95RIZporUWdf7z18E2X1g
dD0tqmxQS5Dp9mLYuXqLj7jEll/mRYMj5BuP/IMnk2HHJWnf3ID9E1IhnGbR4AQZy/5nZLgHjydY
soNZnsGTCPC6/X2Iw5LjzbUElOXK6lT7TH2Hdqv0tr9eqfm/U/5m7drrE7Fz7WmNZ1VFmKtFTZWJ
8g2yxks4AiNKfSOBI5lKdL7jpdP/ADW7udwG4tOf2JmdnwpATdo2Lavt0rCZb6SLl10gCOTEUvcT
piWAv1X9t+WQU4CtWd40O1i63jbZgUNfdP1YhHO6VbB8QhDeEUmthgjxRAuCRKQ4q5K1Tp0uX+lt
j2lpPE+MHF6VurYvX7uzGp5+cthVqef7/wAyiICg3tc4EyZCJFADCVgHMn8lPlO1v1qhar2et9Ar
79/e33oXd0dMoZesLBgEuqhSpbCgNgLlky5zG+gr5gIiPP/Z

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://yuanzhifei89.iteye.com/images/login_icon.png

iVBORw0KGgoAAAANSUhEUgAAABoAAAAgCAYAAAAMq2gFAAAACXBIWXMAAAsTAAALEwEAmpwYAAAK
TWlDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVN3WJP3Fj7f92UPVkLY8LGXbIEAIiOsCMgQ
WaIQkgBhhBASQMWFiApWFBURnEhVxILVCkidiOKgKLhnQYqIWotVXDjuH9yntX167+3t+9f7vOec
5/zOec8PgBESJpHmomoAOVKFPDrYH49PSMTJvYACFUjgBCAQ5svCZwXFAADwA3l4fnSwP/wBr28A
AgBw1S4kEsfh/4O6UCZXACCRAOAiEucLAZBSAMguVMgUAMgYALBTs2QKAJQAAGx5fEIiAKoNAOz0
ST4FANipk9wXANiiHKkIAI0BAJkoRyQCQLsAYFWBUiwCwMIAoKxAIi4EwK4BgFm2MkcCgL0FAHaO
WJAPQGAAgJlCLMwAIDgCAEMeE80DIEwDoDDSv+CpX3CFuEgBAMDLlc2XS9IzFLiV0Bp38vDg4iHi
wmyxQmEXKRBmCeQinJebIxNI5wNMzgwAABr50cH+OD+Q5+bk4eZm52zv9MWi/mvwbyI+IfHf/ryM
AgQAEE7P79pf5eXWA3DHAbB1v2upWwDaVgBo3/ldM9sJoFoK0Hr5i3k4/EAenqFQyDwdHAoLC+0l
YqG9MOOLPv8z4W/gi372/EAe/tt68ABxmkCZrcCjg/1xYW52rlKO58sEQjFu9+cj/seFf/2OKdHi
NLFcLBWK8ViJuFAiTcd5uVKRRCHJleIS6X8y8R+W/QmTdw0ArIZPwE62B7XLbMB+7gECiw5Y0nYA
QH7zLYwaC5EAEGc0Mnn3AACTv/mPQCsBAM2XpOMAALzoGFyolBdMxggAAESggSqwQQcMwRSswA6c
wR28wBcCYQZEQAwkwDwQQgbkgBwKoRiWQRlUwDrYBLWwAxqgEZrhELTBMTgN5+ASXIHrcBcGYBie
whi8hgkEQcgIE2EhOogRYo7YIs4IF5mOBCJhSDSSgKQg6YgUUSLFyHKkAqlCapFdSCPyLXIUOY1c
QPqQ28ggMor8irxHMZSBslED1AJ1QLmoHxqKxqBz0XQ0D12AlqJr0Rq0Hj2AtqKn0UvodXQAfYqO
Y4DRMQ5mjNlhXIyHRWCJWBomxxZj5Vg1Vo81Yx1YN3YVG8CeYe8IJAKLgBPsCF6EEMJsgpCQR1hM
WEOoJewjtBK6CFcJg4Qxwicik6hPtCV6EvnEeGI6sZBYRqwm7iEeIZ4lXicOE1+TSCQOyZLkTgoh
JZAySQtJa0jbSC2kU6Q+0hBpnEwm65Btyd7kCLKArCCXkbeQD5BPkvvJw+S3FDrFiOJMCaIkUqSU
Eko1ZT/lBKWfMkKZoKpRzame1AiqiDqfWkltoHZQL1OHqRM0dZolzZsWQ8ukLaPV0JppZ2n3aC/p
dLoJ3YMeRZfQl9Jr6Afp5+mD9HcMDYYNg8dIYigZaxl7GacYtxkvmUymBdOXmchUMNcyG5lnmA+Y
b1VYKvYqfBWRyhKVOpVWlX6V56pUVXNVP9V5qgtUq1UPq15WfaZGVbNQ46kJ1Bar1akdVbupNq7O
UndSj1DPUV+jvl/9gvpjDbKGhUaghkijVGO3xhmNIRbGMmXxWELWclYD6yxrmE1iW7L57Ex2Bfsb
di97TFNDc6pmrGaRZp3mcc0BDsax4PA52ZxKziHODc57LQMtPy2x1mqtZq1+rTfaetq+2mLtcu0W
7eva73VwnUCdLJ31Om0693UJuja6UbqFutt1z+o+02PreekJ9cr1Dund0Uf1bfSj9Rfq79bv0R83
MDQINpAZbDE4Y/DMkGPoa5hpuNHwhOGoEctoupHEaKPRSaMnuCbuh2fjNXgXPmasbxxirDTeZdxr
PGFiaTLbpMSkxeS+Kc2Ua5pmutG003TMzMgs3KzYrMnsjjnVnGueYb7ZvNv8jYWlRZzFSos2i8eW
2pZ8ywWWTZb3rJhWPlZ5VvVW16xJ1lzrLOtt1ldsUBtXmwybOpvLtqitm63Edptt3xTiFI8p0in1
U27aMez87ArsmuwG7Tn2YfYl9m32zx3MHBId1jt0O3xydHXMdmxwvOuk4TTDqcSpw+lXZxtnoXOd
8zUXpkuQyxKXdpcXU22niqdun3rLleUa7rrStdP1o5u7m9yt2W3U3cw9xX2r+00umxvJXcM970H0
8PdY4nHM452nm6fC85DnL152Xlle+70eT7OcJp7WMG3I28Rb4L3Le2A6Pj1l+s7pAz7GPgKfep+H
vqa+It89viN+1n6Zfgf8nvs7+sv9j/i/4XnyFvFOBWABwQHlAb2BGoGzA2sDHwSZBKUHNQWNBbsG
Lww+FUIMCQ1ZH3KTb8AX8hv5YzPcZyya0RXKCJ0VWhv6MMwmTB7WEY6GzwjfEH5vpvlM6cy2CIjg
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
Ts5Uo85DgAAAAABJRU5ErkJggg==

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://www.iteye.com/upload/logo/user/441759/209c1a13-c246-391a-9200-fcb09352a593.png?1300682948

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://www.iteye.com/images/icon_minigender_1.gif?1324994303

R0lGODlhCwALALMAADFjdCt4kTKOrjikyGWarFexz2vQ8YGXnoKcpZKxu7S5u4m0wqC9xp/O3sDA
wAAAACH5BAEAAA4ALAAAAAALAAsAAAQ80EnZamWTml1WdgyzCcTnNItAno1RLcQSEFVRbGUiIE0B
EIOBIGMIKE6FAHHg6SknjMGNADh8FsKANRMBADs=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://yuanzhifei89.iteye.com/images/status/offline.gif

R0lGODlhWQAaAMQAAGZmZu/v76WlpZmZmcXFxXx8fP///7W1td3d3ff394yMjK2trb29vczMzIWF
hZmZmeXl5dbW1v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEH
ABIALAAAAABZABoAAAX/oCSOZGmeaKqubOu+cCzPdG3fIyIMRID/wFFjNygeIAFdcclsOp/QqFQq
aKgEhQLzEOgmENOweEzOLkwIhQJhaAd4iIa8MRAk2vi8fs/v+/9+DWo+Iw52eWACB4sLAg4DAYCS
k5SUbwpCDnsBRAI7DoZ3laOkowkOCCILA3wEq00NfgAGs7N8ALi4e7Z/vHq8tXoNDiJFfAkMDAQE
DAcMu7ltttPRwNK52NXZ2XjWtHnDIp57CXQCyTsCPbfSu93fvu19wcHv09d44RKeCf39EAc8EQFV
ZwEEf9uy9QOAMAFDhv4cLozYUKJFiw9zUdTHzx+EZgtCehqgRkDIgxEh/0JEqPHhxYsrU0p0uRBX
RZv9ONrxR+BAyJ+eFDhQ4PMAxYwTk858uTImS4U3sW0ktm9nuSILfAoUINTQDgJPl1Zc2jSjVIov
J+JUGVGnP5IDgI7sWkeNQ5ppY+LdizbhWr1p3faD+xMoyQIKFtiNmlQj2bFOMapN2VSp4KtbCx8e
wEBABMpskTaGObahQpVlxZaj6qlLlwhbnS0LaPIAAte5XHfBpZv3bt8B/ALYrft3ceDBh3fRt6o4
AgZZCURAEIGZstvFs2vfzr279+36hmlH4ErggQZIvqtfz947A1QjFHhGQL++/fv48+vfz7+//+dF
kBCAGgskY+CBCCao4CeCDDbo4IOKKUAICQdkoQAZGGao4RMKZHGACgg0suGIJIaxQColhAAAOw==

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://www.iteye.com/upload/logo/user/29902/ae9375dc-96d1-3e29-984a-b900df7a1d97-thumb.jpg?1236833165

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

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: base64
Content-Location: http://www.iteye.com/images/user-logo-thumb.gif?1324994303

R0lGODlhMAAwAMQAAOXl5eTk5Pv7++np6efn5/Pz8+bm5vz8/PHx8evr6+jo6PLy8vj4+O/v7/r6
+vn5+e3t7f39/fT09P7+/vf39/X19fb29uzs7PDw8O7u7urq6v///+Pj4wAAAAAAAAAAACH/C1hN
UCBEYXRhWE1QPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtj
OWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUg
WE1QIENvcmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAi
PiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5
bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6
Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29t
L3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NU
eXBlL1Jlc291cmNlUmVmIyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IFdp
bmRvd3MiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MkIzMkFGRUQ1QUFEMTFFMDk2MEJERjMw
QTkyQzUyNDYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MkIzMkFGRUU1QUFEMTFFMDk2MEJE
RjMwQTkyQzUyNDYiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlp
ZDoyQjMyQUZFQjVBQUQxMUUwOTYwQkRGMzBBOTJDNTI0NiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1w
LmRpZDoyQjMyQUZFQzVBQUQxMUUwOTYwQkRGMzBBOTJDNTI0NiIvPiA8L3JkZjpEZXNjcmlwdGlv
bj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PgH//v38+/r5+Pf2
9fTz8vHw7+7t7Ovq6ejn5uXk4+Lh4N/e3dzb2tnY19bV1NPS0dDPzs3My8rJyMfGxcTDwsHAv769
vLu6ubi3trW0s7KxsK+urayrqqmop6alpKOioaCfnp2cm5qZmJeWlZSTkpGQj46NjIuKiYiHhoWE
g4KBgH9+fXx7enl4d3Z1dHNycXBvbm1sa2ppaGdmZWRjYmFgX15dXFtaWVhXVlVUU1JRUE9OTUxL
SklIR0ZFRENCQUA/Pj08Ozo5ODc2NTQzMjEwLy4tLCsqKSgnJiUkIyIhIB8eHRwbGhkYFxYVFBMS
ERAPDg0MCwoJCAcGBQQDAgEAACH5BAAAAAAALAAAAAAwADAAAAX/ICeOZGmeaKqubOu+cCzPdG3f
eK7vfO//wKBwSCwafQSL4lgiPBgZJknCYBQCUtEFUZAkEgTCd5xYigAEgygwGJg5gIFGDQ+vAobD
BoHY+P8FHAQSBxERDAkcDBsRZhR+CgAFhREPECoAAhsYGH9/CAaanhsQCn4UHBB+CwEPo3spmXtx
qhsLCgaPGwIFuhMGC34NDhsHAQV+BwUWE34aKLILIqYbUdQPBg0LFX4IAXp/EAERxQQQBcgbFdCa
0hwDwql+EATdDhESHBl/DO/dAX4KMIiA6kQ0EfA2NOBwQVgrBwMAGAAgYtGEAf42BLIgIAEeigbb
IYxHoNkBjHSmZ2xwcEZPhEQpY4nMuJADtw0THgi4UELCSiwc+vh54ADDCgB63CWsCWDRnwMgRXAT
ADSABU8TCGCy4KCmAqI81zRgIOBBgahBHVQAKgICBQFqtWaZS7eu3bt48+rdy7ev37+AAwuWEQIA
Ow==

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/stylesheets/blog.css?1334737652

.stretch {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1px; MARGIN: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; HEIGHT: 1px; CLEAR: both; FONT-SIZE: 15px; =
PADDING-TOP: 0px
}
.clear {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1px; MARGIN: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; HEIGHT: 1px; CLEAR: both; FONT-SIZE: 15px; =
PADDING-TOP: 0px
}
.clearfix:after {
	DISPLAY: block; HEIGHT: 0px; VISIBILITY: hidden; CLEAR: both; CONTENT: =
"."
}
.clearfix {
	DISPLAY: inline-table
}
* HTML .clearfix {
	HEIGHT: 1%
}
* + HTML .clearfix {
	HEIGHT: 1%
}
.clearfix {
	DISPLAY: block
}
.replace {
	BACKGROUND-COLOR: transparent; DISPLAY: block; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: left top
}
.replace * {
	BACKGROUND-COLOR: transparent; TEXT-INDENT: -10000px; DISPLAY: block; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left top
}
.replace A {
	TEXT-INDENT: 0px
}
.replace A SPAN {
	TEXT-INDENT: -10000px
}
SPAN.accesskey {
	TEXT-DECORATION: none
}
.accessibility {
	POSITION: absolute; TOP: -999em; LEFT: -999em
}
BODY {
	TEXT-ALIGN: left; LINE-HEIGHT: 1.5; FONT-FAMILY: Helvetica, Tahoma, =
Arial, sans-serif; COLOR: black; FONT-SIZE: 12px
}
IMG {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
H1 {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.5em; MARGIN: 0px 0px 0.5em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: black; FONT-SIZE: 2em; =
PADDING-TOP: 0px
}
H2 {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.5em; MARGIN: 0px 0px 0.5em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: black; FONT-SIZE: 1.5em; =
PADDING-TOP: 0px
}
H3 {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.5em; MARGIN: 0px 0px 0.5em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: black; FONT-SIZE: 1.2em; =
PADDING-TOP: 0px
}
H4 {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.3em; MARGIN: 0px 0px 0.25em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: black; FONT-SIZE: 1.15em; =
PADDING-TOP: 0px
}
H5 {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.3em; MARGIN: 0px 0px 0.25em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: black; FONT-SIZE: 1.1em; =
PADDING-TOP: 0px
}
H6 {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.3em; MARGIN: 0px 0px 0.25em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: black; FONT-SIZE: 1em; =
PADDING-TOP: 0px
}
P {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
BLOCKQUOTE {
	BORDER-LEFT: #ddd 10px solid; MARGIN-LEFT: 10px
}
PRE {
	FONT-FAMILY: monospace; FONT-SIZE: 1em
}
STRONG {
	FONT-WEIGHT: bold
}
B {
	FONT-WEIGHT: bold
}
EM {
	FONT-STYLE: italic
}
I {
	FONT-STYLE: italic
}
CODE {
	FONT-FAMILY: "Courier New", Courier, monospace; WHITE-SPACE: pre; =
FONT-SIZE: 1em
}
UL {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 1.5em; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
UL LI {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 0.25em 30px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
OL {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.4em; MARGIN: 0px 0px 1.5em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-SIZE: 1em; PADDING-TOP: 0px
}
OL LI {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 0.25em 30px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; FONT-SIZE: 1em; PADDING-TOP: 0px
}
DL {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.4em; MARGIN: 0px 0px 1.5em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
DL DT {
	PADDING-BOTTOM: 0px; MARGIN: 0.25em 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
DL DD {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 0px 30px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
TH {
	TEXT-ALIGN: left; FONT-WEIGHT: bold
}
TD {
	FONT-SIZE: 1em
}
HR {
	BORDER-BOTTOM: black thin; MARGIN: 1.5em 10px; HEIGHT: 1px
}
DIV.topic_page {
	COLOR: #069
}
FORM {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; CLEAR: both; PADDING-TOP: 0px
}
FORM DIV {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 1em; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; FONT-SIZE: 1em; PADDING-TOP: 0px
}
FORM P {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 1em; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; FONT-SIZE: 1em; PADDING-TOP: 0px
}
LABEL {
	WIDTH: 25%; FLOAT: left; FONT-WEIGHT: bold
}
FIELDSET {
	BORDER-BOTTOM: #eee 1px solid; BORDER-LEFT: #eee 1px solid; =
PADDING-BOTTOM: 5px; MARGIN: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: =
10px; BORDER-TOP: #eee 1px solid; BORDER-RIGHT: #eee 1px solid; =
PADDING-TOP: 5px
}
FIELDSET LEGEND {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; COLOR: #666; FONT-SIZE: 1.1em; FONT-WEIGHT: bold; PADDING-TOP: 0px
}
* HTML FIELDSET LEGEND {
	MARGIN: 0px 0px 10px -10px
}
FIELDSET UL {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px 0px 1.5em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; LIST-STYLE-IMAGE: none; =
PADDING-TOP: 0px
}
FIELDSET UL LI {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px 0px 0.5em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; LIST-STYLE-IMAGE: none; =
PADDING-TOP: 0px
}
INPUT.text {
	BORDER-BOTTOM: #069 1px solid; BORDER-LEFT: #069 1px solid; =
PADDING-BOTTOM: 1px; MARGIN: 0px; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; =
VERTICAL-ALIGN: middle; BORDER-TOP: #069 1px solid; BORDER-RIGHT: #069 =
1px solid; PADDING-TOP: 1px
}
SELECT {
	BORDER-BOTTOM: #069 1px solid; BORDER-LEFT: #069 1px solid; =
PADDING-BOTTOM: 1px; MARGIN: 0px; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; =
VERTICAL-ALIGN: middle; BORDER-TOP: #069 1px solid; BORDER-RIGHT: #069 =
1px solid; PADDING-TOP: 1px
}
TEXTAREA {
	BORDER-BOTTOM: #069 1px solid; BORDER-LEFT: #069 1px solid; =
PADDING-BOTTOM: 1px; MARGIN: 0px; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; =
VERTICAL-ALIGN: middle; BORDER-TOP: #069 1px solid; BORDER-RIGHT: #069 =
1px solid; PADDING-TOP: 1px
}
INPUT.text {
	FONT-FAMILY: Arial, sans-serif, Verdana, Tahoma, Helvetica; HEIGHT: =
18px
}
INPUT.check {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MARGIN: 0px; =
WIDTH: auto; HEIGHT: auto; BORDER-TOP: medium none; BORDER-RIGHT: medium =
none
}
INPUT.radio {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; MARGIN: 0px; =
WIDTH: auto; HEIGHT: auto; BORDER-TOP: medium none; BORDER-RIGHT: medium =
none
}
INPUT.file {
	WIDTH: 250px; HEIGHT: auto
}
INPUT.readonly {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BACKGROUND-COLOR: =
transparent; BORDER-TOP: medium none; BORDER-RIGHT: medium none
}
INPUT.button {
	BORDER-BOTTOM: #d2f3fd 1px solid; BORDER-LEFT: #d2f3fd 1px solid; =
PADDING-BOTTOM: 2px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BACKGROUND: =
#006699; HEIGHT: 23px; COLOR: white; FONT-SIZE: 1em; VERTICAL-ALIGN: =
middle; BORDER-TOP: #d2f3fd 1px solid; CURSOR: pointer; BORDER-RIGHT: =
#d2f3fd 1px solid; PADDING-TOP: 2px
}
INPUT.submit {
	BORDER-BOTTOM: #d2f3fd 1px solid; BORDER-LEFT: #d2f3fd 1px solid; =
PADDING-BOTTOM: 2px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BACKGROUND: =
#006699; HEIGHT: 23px; COLOR: white; FONT-SIZE: 1em; VERTICAL-ALIGN: =
middle; BORDER-TOP: #d2f3fd 1px solid; CURSOR: pointer; BORDER-RIGHT: =
#d2f3fd 1px solid; PADDING-TOP: 2px
}
INPUT.image {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; WIDTH: auto; =
HEIGHT: auto; BORDER-TOP: medium none; BORDER-RIGHT: medium none
}
TEXTAREA {
	FONT-SIZE: 1em
}
FORM DIV.submit {
	MARGIN: 1em 0px
}
FORM DIV.submit INPUT {
	WIDTH: 15em; HEIGHT: 2em
}
DIV#nav DIV.wrapper {
	POSITION: absolute; PADDING-BOTTOM: 6px; WIDTH: 100%; BOTTOM: 0px; =
BACKGROUND: url(/images/shadow.png) #6293bb repeat-x left bottom; =
FONT-SIZE: 13px; LEFT: 0px
}
DIV#nav UL {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; WIDTH: 100%; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
DIV#nav LI {
	BACKGROUND-IMAGE: url(/images/line_white.gif); PADDING-BOTTOM: 0px; =
LINE-HEIGHT: 1em; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: =
10px; PADDING-RIGHT: 10px; DISPLAY: inline; BACKGROUND-REPEAT: =
no-repeat; BACKGROUND-POSITION: right center; FLOAT: left; =
LIST-STYLE-IMAGE: none; PADDING-TOP: 0px
}
DIV#nav LI.last {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
DIV#nav A {
	PADDING-BOTTOM: 7px; MARGIN: 0px; PADDING-LEFT: 13px; PADDING-RIGHT: =
13px; DISPLAY: block; COLOR: white; FONT-WEIGHT: bold; TEXT-DECORATION: =
none; PADDING-TOP: 7px
}
DIV#nav A:link {
	PADDING-BOTTOM: 7px; MARGIN: 0px; PADDING-LEFT: 13px; PADDING-RIGHT: =
13px; DISPLAY: block; COLOR: white; FONT-WEIGHT: bold; TEXT-DECORATION: =
none; PADDING-TOP: 7px
}
DIV#nav A:active {
	PADDING-BOTTOM: 7px; MARGIN: 0px; PADDING-LEFT: 13px; PADDING-RIGHT: =
13px; DISPLAY: block; COLOR: white; FONT-WEIGHT: bold; TEXT-DECORATION: =
none; PADDING-TOP: 7px
}
DIV#nav A:visited {
	PADDING-BOTTOM: 7px; MARGIN: 0px; PADDING-LEFT: 13px; PADDING-RIGHT: =
13px; DISPLAY: block; COLOR: white; FONT-WEIGHT: bold; TEXT-DECORATION: =
none; PADDING-TOP: 7px
}
DIV#nav .subnav A {
	PADDING-BOTTOM: 7px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; DISPLAY: =
inline-block; PADDING-TOP: 7px
}
DIV#nav .subnav A:link {
	PADDING-BOTTOM: 7px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; DISPLAY: =
inline-block; PADDING-TOP: 7px
}
DIV#nav .subnav A:active {
	PADDING-BOTTOM: 7px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; DISPLAY: =
inline-block; PADDING-TOP: 7px
}
DIV#nav .subnav A:visited {
	PADDING-BOTTOM: 7px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; DISPLAY: =
inline-block; PADDING-TOP: 7px
}
DIV#nav A:hover {
	BACKGROUND-COLOR: #3671a5
}
DIV#nav A.selected {
	BACKGROUND-COLOR: #3671a5
}
DIV#content {
	POSITION: relative; TEXT-ALIGN: left; PADDING-BOTTOM: 0px; MARGIN: 0px =
auto 20px; PADDING-LEFT: 0px; WIDTH: 701px; PADDING-RIGHT: 0px; =
PADDING-TOP: 0px
}
DIV#main {
	WIDTH: 500px; DISPLAY: inline; FLOAT: right
}
DIV#local {
	WIDTH: 200px; DISPLAY: inline; FLOAT: left
}
DIV#sub {
	DISPLAY: none
}
DIV#nav {
	POSITION: absolute; TEXT-ALIGN: left; WIDTH: 100%; TOP: -15px; LEFT: =
0px
}
BODY {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px; BACKGROUND: white; PADDING-TOP: 0px
}
DIV#page {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; MARGIN: 0px auto; =
PADDING-LEFT: 0px; WIDTH: 950px; PADDING-RIGHT: 0px; BACKGROUND: white; =
PADDING-TOP: 0px
}
DIV#header {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: white; MARGIN: 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: white; PADDING-TOP: 0px
}
DIV#branding {
	TEXT-ALIGN: left; MARGIN: 1px 0px; WIDTH: 200px; FLOAT: left
}
DIV#search {
	TEXT-ALIGN: right; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; =
WIDTH: 49%; PADDING-RIGHT: 20px; FLOAT: right; PADDING-TOP: 16px
}
DIV#content {
	MARGIN-TOP: 35px; WIDTH: 100%
}
DIV#footer {
	BACKGROUND-COLOR: white; COLOR: black
}
DIV#footer P {
	PADDING-BOTTOM: 15px; MARGIN: 0px; PADDING-LEFT: 15px; PADDING-RIGHT: =
15px; FONT-SIZE: 0.8em; PADDING-TOP: 15px
}
UL.subnav {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px; FONT-SIZE: 0.8em; LIST-STYLE-IMAGE: none; =
PADDING-TOP: 0px
}
UL.subnav LI {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px 0px 1em; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; LIST-STYLE-IMAGE: none; =
PADDING-TOP: 0px
}
UL.subnav LI A {
	COLOR: black; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
UL.subnav LI A:link {
	COLOR: black; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
UL.subnav LI A:visited {
	COLOR: black; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
UL.subnav LI A:active {
	COLOR: black; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
UL.subnav LI A:hover {
	TEXT-DECORATION: underline
}
UL.subnav LI STRONG {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 12px; PADDING-RIGHT: 0px; =
BACKGROUND: url(../i/subnav-highlight.gif) no-repeat left top; =
PADDING-TOP: 0px
}
UL.subnav LI STRONG A {
	BACKGROUND-COLOR: black; COLOR: white
}
UL.subnav LI STRONG A:link {
	BACKGROUND-COLOR: black; COLOR: white
}
UL.subnav LI STRONG A:visited {
	BACKGROUND-COLOR: black; COLOR: white
}
UL.subnav LI STRONG A:active {
	BACKGROUND-COLOR: black; COLOR: white
}
.nav_side {
	BORDER-BOTTOM: #caccc9 1px solid; BORDER-LEFT: #caccc9 1px solid; =
MARGIN: 0px 0px 10px; BACKGROUND: #f4f6f3; BORDER-TOP: #caccc9 1px =
solid; BORDER-RIGHT: #caccc9 1px solid
}
.nav_side UL {
	MARGIN: 0px
}
.nav_side LI {
	BORDER-BOTTOM: #e3eaf0 1px solid; PADDING-BOTTOM: 0px; LINE-HEIGHT: =
37px; TEXT-INDENT: 38px; MARGIN: 0px 5px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; HEIGHT: 37px; COLOR: #069; FONT-SIZE: 14px; =
OVERFLOW: hidden; PADDING-TOP: 0px
}
.nav_side LI A {
	DISPLAY: block; HEIGHT: 37px; COLOR: #069; TEXT-DECORATION: none
}
.nav_side LI A:hover {
	COLOR: #ff580a; TEXT-DECORATION: none
}
.nav_side LI.last {
	BORDER-BOTTOM: medium none; HEIGHT: 38px
}
.nav_side LI.select {
	BORDER-BOTTOM: medium none; MARGIN: 0px; BACKGROUND: =
url(/images/sidenav_select_bg.gif) no-repeat 0px 0px; HEIGHT: 38px
}
.nav_side LI.select A {
	HEIGHT: 38px; COLOR: #fff; FONT-WEIGHT: bold
}
.nav_side #mobile {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px 3px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px 3px
}
.nav_side #web {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -49px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -49px
}
.nav_side #architecture {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -102px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -102px
}
.nav_side #language {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -155px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -155px
}
.nav_side #internet {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -206px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -206px
}
.nav_side #opensource {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -260px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -260px
}
.nav_side #os {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -310px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -310px
}
.nav_side #database {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -361px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -361px
}
.nav_side #develop {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -412px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -412px
}
.nav_side #industry {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -466px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -466px
}
.nav_side #other {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 5px -568px; =
_background: url(/images/icon_sidenav.gif) no-repeat 5px -568px
}
.nav_side #all {
	BACKGROUND: url(/images/elite_sidenav.png) no-repeat 5px -260px; =
_background: url(/images/elite_sidenav.gif) no-repeat 5px -260px
}
.nav_side LI.select #mobile {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px 3px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px 3px
}
.nav_side LI.select #web {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -49px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -49px
}
.nav_side LI.select #architecture {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -102px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -102px
}
.nav_side LI.select #language {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -155px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -155px
}
.nav_side LI.select #internet {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -206px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -206px
}
.nav_side LI.select #opensource {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -260px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -260px
}
.nav_side LI.select #os {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -310px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -310px
}
.nav_side LI.select #database {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -361px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -361px
}
.nav_side LI.select #develop {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -412px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -412px
}
.nav_side LI.select #industry {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -466px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -466px
}
.nav_side LI.select #other {
	BACKGROUND: url(/images/icon_sidenav.png) no-repeat 10px -568px; =
_background: url(/images/icon_sidenav.gif) no-repeat 10px -568px
}
.nav_side LI.select #all {
	BACKGROUND: url(/images/elite_sidenav.png) no-repeat 10px -259px; =
_background: url(/images/elite_sidenav.gif) no-repeat 10px -259px
}
A {
	COLOR: #006699; TEXT-DECORATION: none
}
A:hover {
	COLOR: #bc2a4d; TEXT-DECORATION: underline
}
A:active {
	COLOR: #bc2a4d; TEXT-DECORATION: underline
}
BLOCKQUOTE {
	BORDER-BOTTOM: #cccccc 1px solid; BORDER-LEFT: #cccccc 1px solid; =
BACKGROUND-COLOR: #fafafa; BORDER-TOP: #cccccc 1px solid; BORDER-RIGHT: =
#cccccc 1px solid
}
CITE {
	MARGIN-LEFT: 3px; FONT-WEIGHT: bold
}
DIV#user_nav {
	TEXT-ALIGN: right; PADDING-BOTTOM: 2px; MARGIN: 3px 0px 0px; =
PADDING-LEFT: 2px; PADDING-RIGHT: 2px; FLOAT: right; PADDING-TOP: 2px
}
DIV#user_nav A.nobg {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
DIV#user_nav A.welcome {
	PADDING-RIGHT: 10px; COLOR: #e28822; FONT-WEIGHT: bold
}
DIV#user_nav A.welcome:hover {
	BACKGROUND-COLOR: transparent; COLOR: #e28822; TEXT-DECORATION: none
}
DIV#user_nav A.new_reply {
	PADDING-LEFT: 0px; COLOR: red
}
DIV#user_nav A.new_reply:hover {
	BACKGROUND-COLOR: transparent; COLOR: red; TEXT-DECORATION: none
}
DIV#user_nav A {
	BACKGROUND-IMAGE: url(/images/line_gray.gif); PADDING-BOTTOM: 1px; =
LINE-HEIGHT: 1em; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: right center; COLOR: =
gray; TEXT-DECORATION: none; PADDING-TOP: 2px
}
DIV#user_nav A:hover {
	BACKGROUND-COLOR: gray; COLOR: white; TEXT-DECORATION: underline
}
DIV.quick_menu {
	Z-INDEX: 9999; BORDER-BOTTOM: #dddddd 1px solid; POSITION: absolute; =
TEXT-ALIGN: left; BORDER-LEFT: #dddddd 1px solid; BACKGROUND-COLOR: =
white; WIDTH: 70px; BORDER-TOP: #dddddd 1px solid; TOP: 30px; =
BORDER-RIGHT: #dddddd 1px solid
}
DIV.quick_menu A {
	BACKGROUND-IMAGE: none !important; PADDING-BOTTOM: 3px !important; =
LINE-HEIGHT: 20px !important; PADDING-LEFT: 10px !important; =
PADDING-RIGHT: 6px !important; DISPLAY: block !important; =
TEXT-DECORATION: none !important; PADDING-TOP: 3px !important
}
DIV#location_ad {
	BACKGROUND-IMAGE: url(/images/yellow_east_arrow.gif); MARGIN-TOP: 5px; =
PADDING-LEFT: 12px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
left center; FLOAT: left
}
DIV#site_nav UL {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1em; LIST-STYLE-TYPE: none; MARGIN: =
0px; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; =
LIST-STYLE-IMAGE: none; PADDING-TOP: 0px
}
DIV#site_nav LI {
	PADDING-BOTTOM: 3px; LINE-HEIGHT: 1em; LIST-STYLE-TYPE: none; MARGIN: =
0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; DISPLAY: inline; =
LIST-STYLE-IMAGE: none; BORDER-RIGHT: #aaa 1px solid; PADDING-TOP: 3px
}
DIV#site_nav LI.last {
	BORDER-RIGHT: medium none
}
DIV#channel_nav {
	POSITION: absolute; TOP: 0px; LEFT: 0px
}
DIV#channel_nav UL {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 1em; LIST-STYLE-TYPE: none; MARGIN: =
0px; PADDING-LEFT: 0px; WIDTH: 100%; PADDING-RIGHT: 0px; =
LIST-STYLE-IMAGE: none; PADDING-TOP: 0px
}
DIV#channel_nav LI {
	BORDER-BOTTOM: #feddca 1px solid; BORDER-LEFT: #feddca 1px solid; =
LINE-HEIGHT: 1em; LIST-STYLE-TYPE: none; MARGIN: 0px; DISPLAY: inline; =
FLOAT: left; BORDER-TOP: #feddca 1px solid; LIST-STYLE-IMAGE: none; =
BORDER-RIGHT: 0px
}
DIV#channel_nav LI.last {
	BORDER-RIGHT: #feddca 1px solid
}
DIV#channel_nav A {
	PADDING-BOTTOM: 4px; MARGIN: 0px; PADDING-LEFT: 25px; PADDING-RIGHT: =
25px; DISPLAY: block; COLOR: green; TEXT-DECORATION: none; PADDING-TOP: =
4px
}
DIV#channel_nav A:hover {
	BACKGROUND-COLOR: #feddca
}
DIV#channel_nav A.selected {
	BACKGROUND-COLOR: #feddca
}
DIV#gg {
	MARGIN: 2px 0px; WIDTH: 728px; FLOAT: right
}
DIV#copyright {
	PADDING-BOTTOM: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 10px
}
.pagination {
	PADDING-BOTTOM: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FLOAT: =
right; PADDING-TOP: 5px
}
.pagination A {
	BORDER-BOTTOM: #aaaadd 1px solid; BORDER-LEFT: #aaaadd 1px solid; =
PADDING-BOTTOM: 2px; MARGIN: 2px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
COLOR: #006699; BORDER-TOP: #aaaadd 1px solid; BORDER-RIGHT: #aaaadd 1px =
solid; TEXT-DECORATION: none; PADDING-TOP: 2px
}
.pagination A:link {
	BORDER-BOTTOM: #aaaadd 1px solid; BORDER-LEFT: #aaaadd 1px solid; =
PADDING-BOTTOM: 2px; MARGIN: 2px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
COLOR: #006699; BORDER-TOP: #aaaadd 1px solid; BORDER-RIGHT: #aaaadd 1px =
solid; TEXT-DECORATION: none; PADDING-TOP: 2px
}
.pagination A:visited {
	BORDER-BOTTOM: #aaaadd 1px solid; BORDER-LEFT: #aaaadd 1px solid; =
PADDING-BOTTOM: 2px; MARGIN: 2px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
COLOR: #006699; BORDER-TOP: #aaaadd 1px solid; BORDER-RIGHT: #aaaadd 1px =
solid; TEXT-DECORATION: none; PADDING-TOP: 2px
}
.pagination A:hover {
	BORDER-BOTTOM: #006699 1px solid; BORDER-LEFT: #006699 1px solid; =
COLOR: #000; BORDER-TOP: #006699 1px solid; BORDER-RIGHT: #006699 1px =
solid; TEXT-DECORATION: none
}
.pagination A:active {
	BORDER-BOTTOM: #006699 1px solid; BORDER-LEFT: #006699 1px solid; =
COLOR: #000; BORDER-TOP: #006699 1px solid; BORDER-RIGHT: #006699 1px =
solid; TEXT-DECORATION: none
}
.pagination SPAN.current {
	BORDER-BOTTOM: #006699 1px solid; BORDER-LEFT: #006699 1px solid; =
PADDING-BOTTOM: 2px; BACKGROUND-COLOR: #006699; MARGIN: 2px; =
PADDING-LEFT: 5px; PADDING-RIGHT: 5px; COLOR: #fff; BORDER-TOP: #006699 =
1px solid; FONT-WEIGHT: bold; BORDER-RIGHT: #006699 1px solid; =
PADDING-TOP: 2px
}
.pagination SPAN.disabled {
	BORDER-BOTTOM: #eee 1px solid; BORDER-LEFT: #eee 1px solid; =
PADDING-BOTTOM: 2px; MARGIN: 2px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
COLOR: #ddd; BORDER-TOP: #eee 1px solid; BORDER-RIGHT: #eee 1px solid; =
PADDING-TOP: 2px
}
A.underline {
	TEXT-DECORATION: underline
}
.underline A {
	TEXT-DECORATION: underline
}
.hilite1 {
	BACKGROUND-COLOR: #ff0
}
.hilite2 {
	BACKGROUND-COLOR: #5f5
}
.hilite3 {
	BACKGROUND-COLOR: #afa
}
.hilite4 {
	BACKGROUND-COLOR: #0ff
}
SPAN.arrow {
	COLOR: #999; FONT-SIZE: 0.9em; FONT-WEIGHT: normal
}
.validation-advice {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 3px; PADDING-RIGHT: =
0px; COLOR: #ff3300; FONT-WEIGHT: bold; PADDING-TOP: 0px
}
.odd {
	BACKGROUND-COLOR: #effaff
}
.highlight {
	COLOR: #e28822; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
.highlight A {
	COLOR: #e28822; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
.highlight A:link {
	COLOR: #e28822; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
.highlight A:active {
	COLOR: #e28822; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
.highlight A:visited {
	COLOR: #e28822; FONT-WEIGHT: bold; TEXT-DECORATION: none
}
.highlight A:hover {
	BACKGROUND-COLOR: #e28822; COLOR: #ffffff; TEXT-DECORATION: none
}
.rss {
	BACKGROUND-IMAGE: url(/images/rss.png); PADDING-RIGHT: 50px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: right center; =
MARGIN-RIGHT: 5px
}
.row1 {
	BACKGROUND-COLOR: #efefef; WIDTH: 155px; FONT-WEIGHT: bold
}
.row2 {
	BACKGROUND-COLOR: #dee3e7
}
.row3 {
	BACKGROUND-COLOR: #eee
}
.crumbs A {
	TEXT-DECORATION: underline
}
.flash_error {
	PADDING-BOTTOM: 10px; MARGIN: 0px 10px; PADDING-LEFT: 40px; =
PADDING-RIGHT: 40px; BACKGROUND-REPEAT: no-repeat; FONT-WEIGHT: bold; =
PADDING-TOP: 10px
}
.flash_notice {
	PADDING-BOTTOM: 10px; MARGIN: 0px 10px; PADDING-LEFT: 40px; =
PADDING-RIGHT: 40px; BACKGROUND-REPEAT: no-repeat; FONT-WEIGHT: bold; =
PADDING-TOP: 10px
}
.flash_error {
	BACKGROUND-IMAGE: url(/images/icon_error_lrg.gif); COLOR: #f30
}
.flash_notice {
	BACKGROUND-IMAGE: url(/images/icon_success_lrg.gif)
}
SELECT.validation-failed {
	BORDER-BOTTOM: #ff0000 3px solid; BORDER-LEFT: #ff0000 3px solid; =
BORDER-TOP: #ff0000 3px solid; BORDER-RIGHT: #ff0000 3px solid
}
INPUT.validation-failed {
	BORDER-BOTTOM: #ff0000 3px solid; BORDER-LEFT: #ff0000 3px solid; =
BORDER-TOP: #ff0000 3px solid; BORDER-RIGHT: #ff0000 3px solid
}
TEXTAREA.validation-failed {
	BORDER-BOTTOM: #ff0000 3px solid; BORDER-LEFT: #ff0000 3px solid; =
BORDER-TOP: #ff0000 3px solid; BORDER-RIGHT: #ff0000 3px solid
}
* HTML SELECT.validation-failed {
	BACKGROUND-COLOR: #ff0000
}
SPAN.field_error {
	DISPLAY: none
}
DIV.quote_title {
	PADDING-BOTTOM: 5px; MARGIN: 5px 0px 0px 15px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; FONT-WEIGHT: bold; PADDING-TOP: 5px
}
DIV.quote_div {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 3px; MARGIN: 0px 5px 5px 15px; PADDING-LEFT: 3px; =
PADDING-RIGHT: 3px; BACKGROUND: #fafafa; BORDER-TOP: #ccc 1px solid; =
BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 3px
}
DIV.attachments {
	MARGIN-TOP: 10px; BORDER-TOP: #999999 1px solid
}
DIV.attachments UL {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
DIV.postauthor UL {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
DIV.attachments UL {
	BORDER-BOTTOM: #cccccc 1px solid; BORDER-LEFT: #cccccc 1px solid; =
PADDING-BOTTOM: 5px; MARGIN: 5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
BORDER-TOP: #cccccc 1px solid; BORDER-RIGHT: #cccccc 1px solid; =
PADDING-TOP: 5px
}
IMG.magplus {
	CURSOR: url(/images/magplus.gif), pointer
}
DIV.logo {
	BACKGROUND-IMAGE: url(/images/logo_bg.gif); PADDING-BOTTOM: 6px; =
PADDING-LEFT: 2px; PADDING-RIGHT: 6px; BACKGROUND-REPEAT: no-repeat; =
FLOAT: left; PADDING-TOP: 2px
}
SPAN.thumb_box {
	BORDER-BOTTOM: #ccc 1px solid; TEXT-ALIGN: center; BORDER-LEFT: #ccc =
1px solid; WIDTH: 130px; DISPLAY: table-cell; HEIGHT: 95px; =
VERTICAL-ALIGN: middle; BORDER-TOP: #ccc 1px solid; BORDER-RIGHT: #ccc =
1px solid
}
SPAN.thumb_box IMG {
	VERTICAL-ALIGN: middle
}
.right {
	FLOAT: right
}
.left {
	FLOAT: left
}
TABLE.bbcode {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; BORDER-TOP: =
#ccc 1px solid; BORDER-RIGHT: #ccc 1px solid
}
TABLE.bbcode TD {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 3px; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; BORDER-TOP: =
#ccc 1px solid; BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 3px
}
DIV#search_engine_box {
	BORDER-BOTTOM: #ccc 1px solid; POSITION: fixed; TEXT-ALIGN: left; =
BORDER-LEFT: #ccc 1px solid; BACKGROUND-COLOR: white; WIDTH: 240px; =
BOTTOM: 0px; BORDER-TOP: #ccc 1px solid; RIGHT: 0px; BORDER-RIGHT: #ccc =
1px solid
}
#search_engine_box H2 {
	PADDING-BOTTOM: 5px; BACKGROUND-COLOR: #526ea6; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; COLOR: white; FONT-SIZE: 12px; FONT-WEIGHT: normal; =
PADDING-TOP: 5px
}
#search_engine_box H2 SPAN {
	COLOR: black
}
#search_engine_box H2 A {
	POSITION: absolute; COLOR: white; RIGHT: 5px
}
#search_engine_box DIV {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; =
PADDING-TOP: 0px
}
#search_engine_box LI {
	LIST-STYLE-TYPE: square; MARGIN-LEFT: 15px
}
* HTML DIV#search_engine_box {
	POSITION: absolute; BOTTOM: auto; RIGHT: auto
}
DIV#chat_button {
	BORDER-BOTTOM: #ccc 1px solid; POSITION: fixed; TEXT-ALIGN: right; =
BORDER-LEFT: #ccc 1px solid; PADDING-BOTTOM: 2px; BACKGROUND-COLOR: =
#eee; PADDING-LEFT: 2px; WIDTH: 80px; BOTTOM: 0px; PADDING-RIGHT: 2px; =
VERTICAL-ALIGN: middle; BORDER-TOP: #ccc 1px solid; RIGHT: 10px; =
BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 2px
}
DIV#chat_input {
	POSITION: fixed; TEXT-ALIGN: left; BOTTOM: 25px; RIGHT: 10px
}
#chat_iframe {
	BACKGROUND-COLOR: transparent; WIDTH: 360px
}
DIV#chat_button IMG {
	VERTICAL-ALIGN: middle
}
* HTML DIV#chat_button {
	POSITION: absolute; BOTTOM: auto; RIGHT: auto
}
* HTML DIV#chat_input {
	POSITION: absolute; BOTTOM: auto; RIGHT: auto
}
.tooltip {
	Z-INDEX: 10000 !important; POSITION: absolute !important; FONT-SIZE: =
12px; OVERFLOW: hidden
}
.tooltip .xtop {
	DISPLAY: block; BACKGROUND: none transparent scroll repeat 0% 0%; =
FONT-SIZE: 1px
}
.tooltip .xbottom {
	DISPLAY: block; BACKGROUND: none transparent scroll repeat 0% 0%; =
FONT-SIZE: 1px
}
.tooltip .xb1 {
	DISPLAY: block; OVERFLOW: hidden
}
.tooltip .xb2 {
	DISPLAY: block; OVERFLOW: hidden
}
.tooltip .xb3 {
	DISPLAY: block; OVERFLOW: hidden
}
.tooltip .xb4 {
	DISPLAY: block; OVERFLOW: hidden
}
.tooltip .xb1 {
	HEIGHT: 1px
}
.tooltip .xb2 {
	HEIGHT: 1px
}
.tooltip .xb3 {
	HEIGHT: 1px
}
.tooltip .xb2 {
	BORDER-LEFT: #333 1px solid; BACKGROUND: #666; BORDER-RIGHT: #333 1px =
solid
}
.tooltip .xb3 {
	BORDER-LEFT: #333 1px solid; BACKGROUND: #666; BORDER-RIGHT: #333 1px =
solid
}
.tooltip .xb4 {
	BORDER-LEFT: #333 1px solid; BACKGROUND: #666; BORDER-RIGHT: #333 1px =
solid
}
.tooltip .xbottom .xb2 {
	BACKGROUND: #666
}
.tooltip .xbottom .xb3 {
	BACKGROUND: #666
}
.tooltip .xbottom .xb4 {
	BACKGROUND: #666
}
.tooltip .xb1 {
	MARGIN: 0px 5px; BACKGROUND: #333
}
.tooltip .xb2 {
	BORDER-RIGHT-WIDTH: 2px; MARGIN: 0px 3px; BORDER-TOP-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 2px
}
.tooltip .xb3 {
	MARGIN: 0px 2px
}
.tooltip .xb4 {
	MARGIN: 0px 1px; HEIGHT: 2px
}
.tooltip .xboxcontent {
	BORDER-BOTTOM: #333 0px solid; TEXT-ALIGN: center; BORDER-LEFT: #333 =
1px solid; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #666; MARGIN: 0px; =
PADDING-LEFT: 20px; PADDING-RIGHT: 20px; WORD-WRAP: break-word; COLOR: =
#000; FONT-SIZE: 125%; BORDER-TOP: #333 0px solid; BORDER-RIGHT: #333 =
1px solid; PADDING-TOP: 0px; text-shadow: 2px 2px 0px #CCC
}
DIV#site_nav {
	Z-INDEX: 1
}
DIV#channel_nav {
	Z-INDEX: 1
}
DIV#header {
	Z-INDEX: 2; POSITION: relative
}
.logo A:hover {
	BACKGROUND-COLOR: inherit
}
INPUT#login_button {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; WIDTH: 147px; BACKGROUND: =
url(/images/login_button.jpg) no-repeat; HEIGHT: 34px; COLOR: #0056ad; =
FONT-SIZE: 0px; BORDER-TOP: 0px; CURSOR: pointer; BORDER-RIGHT: 0px
}
#favorite_form_container {
	Z-INDEX: 777; POSITION: absolute; TEXT-ALIGN: left; PADDING-BOTTOM: =
10px; PADDING-LEFT: 10px; WIDTH: 580px; PADDING-RIGHT: 10px; BACKGROUND: =
url(/images/app/bg_new.png) no-repeat; HEIGHT: 250px; FONT-SIZE: 12px; =
PADDING-TOP: 10px
}
#favorite_form_container .cont {
	WIDTH: 580px; BACKGROUND: #fff; HEIGHT: 250px
}
#favorite_form_wrapper {
	POSITION: relative; PADDING-LEFT: 15px
}
#close_list {
	BORDER-BOTTOM: #ccc 1px dashed; TEXT-ALIGN: right; PADDING-BOTTOM: 5px; =
PADDING-LEFT: 10px; WIDTH: 560px; PADDING-RIGHT: 10px; MARGIN-BOTTOM: =
20px; BACKGROUND: #eeeeee; OVERFLOW: hidden; PADDING-TOP: 5px
}
#favorite_form_close {
	CURSOR: pointer
}
#favorite_form_success {
	TEXT-ALIGN: center; MARGIN-TOP: 70px; FONT-SIZE: 18px
}
#favorite_form_success IMG {
	VERTICAL-ALIGN: bottom; MARGIN-RIGHT: 10px
}
#current_tags_panel {
	MARGIN: 10px 0px 0px
}
#current_tags_panel SPAN {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #5d7a9b; MARGIN: 0px 5px 5px =
0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; DISPLAY: inline-block; =
COLOR: #fff; PADDING-TOP: 0px; -webkit-border-radius: 30px; =
-moz-border-radius: 30px; -o-border-radius: 30px; border-radius: 30px
}
#suggested_tags_panel {
	MARGIN: 10px 0px 0px
}
#suggested_tags_panel A {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #aab5c3; MARGIN: 0px 5px 5px =
0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; DISPLAY: inline-block; =
PADDING-TOP: 0px; -webkit-border-radius: 30px; -moz-border-radius: 30px; =
-o-border-radius: 30px; border-radius: 30px
}
#suggested_tags_panel A {
	COLOR: #fff; TEXT-DECORATION: none
}
#suggested_tags_panel A:hover {
	BACKGROUND-COLOR: #f87b00
}
#suggested_tags_panel A.added {
	BACKGROUND-COLOR: #f87b00
}
.news_tag {
	LINE-HEIGHT: 20px; MARGIN: 10px 0px 5px; DISPLAY: block; CLEAR: both
}
.news_tag:after {
	DISPLAY: block; HEIGHT: 0px; VISIBILITY: hidden; CLEAR: both; CONTENT: =
"."
}
.news_tag A {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #aab5c3; MARGIN: 0px 5px 5px =
0px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; DISPLAY: inline-block; =
COLOR: #fff; TEXT-DECORATION: none; PADDING-TOP: 0px; =
-webkit-border-radius: 10px; -moz-border-radius: 10px; -o-border-radius: =
10px; border-radius: 10px
}
.news_tag A:hover {
	BACKGROUND-COLOR: #f87b00
}
#suggested_tags_panel A.added {
	BACKGROUND-COLOR: #f87b00
}
.news_tag SPAN.hilite1 {
	BACKGROUND-COLOR: transparent
}
.news_tag SPAN.view_all {
	FLOAT: right
}
.news_tag SPAN.view_all A {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 6px; PADDING-RIGHT: 6px; BACKGROUND: =
none transparent scroll repeat 0% 0%; COLOR: #069; TEXT-DECORATION: =
underline; PADDING-TOP: 0px
}
.title .news_tag {
	TEXT-ALIGN: center
}
.category_tags {
	PADDING-BOTTOM: 5px; MARGIN-TOP: 10px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; PADDING-TOP: 5px
}
.category_tags A {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 20px; MARGIN: 0px 6px 0px 0px; =
PADDING-LEFT: 12px; PADDING-RIGHT: 0px; DISPLAY: inline-block; =
BACKGROUND: url(/images/tag_bg.gif) no-repeat left top; HEIGHT: 20px; =
COLOR: #fff; TEXT-DECORATION: none; PADDING-TOP: 0px
}
.category_tags A SPAN {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 12px; DISPLAY: =
inline-block; BACKGROUND: url(/images/tag_bg.gif) no-repeat right top; =
HEIGHT: 20px; PADDING-TOP: 0px
}
.category_tags A:hover {
	BACKGROUND: url(/images/tag_bg_3.gif) no-repeat left top
}
.category_tags A.pick_on {
	BACKGROUND: url(/images/tag_bg_3.gif) no-repeat left top
}
.category_tags A:hover SPAN {
	BACKGROUND: url(/images/tag_bg_3.gif) no-repeat right top
}
.category_tags A.pick_on SPAN {
	BACKGROUND: url(/images/tag_bg_3.gif) no-repeat right top
}
#user_nav #notifications_count {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
LINE-HEIGHT: 24px; MARGIN: 0px 0px 0px -5px; BACKGROUND: #fff; =
BORDER-TOP: #ccc 1px solid; FONT-WEIGHT: bold; BORDER-RIGHT: #ccc 1px =
solid; TEXT-DECORATION: none; -webkit-border-radius: 3px; =
-moz-border-radius: 3px; border-radius: 3px; -khtml-border-radius: 3px
}
#user_nav A#notifications_count:hover {
	BORDER-BOTTOM: transparent 1px solid; BORDER-LEFT: transparent 1px =
solid; BACKGROUND: #006eb5; COLOR: #fff; BORDER-TOP: transparent 1px =
solid; BORDER-RIGHT: transparent 1px solid; -webkit-border-radius: 3px; =
-moz-border-radius: 3px; border-radius: 3px; -khtml-border-radius: 3px
}
#user_nav .new_notice#notifications_count {
	BORDER-BOTTOM: transparent 1px solid; BORDER-LEFT: transparent 1px =
solid; BACKGROUND: #006eb5; COLOR: #fff; BORDER-TOP: transparent 1px =
solid; BORDER-RIGHT: transparent 1px solid; -webkit-border-radius: 3px; =
-moz-border-radius: 3px; border-radius: 3px; -khtml-border-radius: 3px
}
#user_nav .clicked {
	BACKGROUND: url(/images/sms_click_bg.gif) no-repeat center top; COLOR: =
#fff
}
#notifications_menu {
	Z-INDEX: 999; BORDER-BOTTOM: #ddd 1px solid; POSITION: absolute; =
TEXT-ALIGN: left; BORDER-LEFT: #ddd 1px solid; BACKGROUND-COLOR: white; =
WIDTH: 380px; COLOR: black; OVERFLOW: hidden; BORDER-TOP: #ddd 1px =
solid; TOP: 26px; RIGHT: 10px; BORDER-RIGHT: #ddd 1px solid; _top: 23px; =
-moz-box-shadow: 0 1px 5px #888; -webkit-box-shadow: 0 1px 5px #888; =
box-shadow: 0 1px 5px #888
}
#notifications_loading {
	POSITION: absolute; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: yellow; =
PADDING-LEFT: 5px; WIDTH: 60px; PADDING-RIGHT: 5px; PADDING-TOP: 0px; =
LEFT: 150px
}
#notifications_menu .menu_title {
	BORDER-BOTTOM: #ddd 1px solid; PADDING-BOTTOM: 0px; LINE-HEIGHT: 34px; =
PADDING-LEFT: 10px; PADDING-RIGHT: 10px; HEIGHT: 36px; OVERFLOW: hidden; =
PADDING-TOP: 0px
}
#notifications_menu .menu_title A {
	COLOR: #333; TEXT-DECORATION: underline
}
#notifications_menu .menu_title A:hover {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
#notifications_menu .menu_title .title {
	FLOAT: left
}
#notifications_menu .menu_title .all {
	FLOAT: right
}
#notifications_menu .notification_summary {
	BORDER-BOTTOM: #ddd 1px solid; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: =
#f6fafc; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; COLOR: #333; OVERFLOW: =
hidden; CURSOR: pointer; PADDING-TOP: 10px
}
#notifications_menu .notification_summary .time {
	COLOR: #999
}
#notifications_menu .unread.notification_summary {
	BACKGROUND-COLOR: #fff; FONT-WEIGHT: bold
}
#notifications_menu .unread.notification_summary .time {
	COLOR: #333; FONT-WEIGHT: normal
}
#notifications_menu .current.notification_summary {
	BACKGROUND-COLOR: #dbebf4
}
#notifications_menu .notification_summary:hover {
	BACKGROUND-COLOR: #dbebf4
}
#notifications_menu .show_all {
	CURSOR: pointer
}
#notifications_menu .return {
	CURSOR: pointer
}
#notifications_menu .notification_detail {
=09
}
#notifications_menu .notification_detail_title {
	BORDER-BOTTOM: #eee 1px solid; POSITION: relative; PADDING-BOTTOM: 4px; =
LINE-HEIGHT: 26px; MARGIN: 0px 0px 5px; PADDING-LEFT: 10px; =
PADDING-RIGHT: 10px; BACKGROUND: #fafafa; OVERFLOW: hidden; PADDING-TOP: =
4px
}
#notifications_menu .notification_detail_title .subject_link {
	DISPLAY: block
}
#notifications_menu .notification_detail_title .time {
	POSITION: absolute; TOP: 4px; RIGHT: 10px
}
#notifications_menu .notification_detail_notice {
	PADDING-BOTTOM: 10px; MARGIN: 5px 0px 0px; PADDING-LEFT: 10px; =
PADDING-RIGHT: 10px; BACKGROUND: url(/images/line_1.gif) repeat-x 50% =
top; COLOR: #999; PADDING-TOP: 5px
}
#notifications_menu .notification_detail_content {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; =
PADDING-TOP: 0px
}
#notifications_menu .system_message {
	PADDING-BOTTOM: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
PADDING-TOP: 0px
}
#notifications_menu .notification_detail_item {
	BORDER-BOTTOM: #e6e6e6 1px solid; PADDING-BOTTOM: 7px; PADDING-LEFT: =
10px; PADDING-RIGHT: 10px; OVERFLOW: hidden; PADDING-TOP: 7px
}
#notifications_menu SPAN.time {
	FLOAT: right; COLOR: gray
}
#notifications_menu SPAN.paginate {
	FLOAT: right
}
#notifications_menu SPAN.paginate .separated {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 10px; WIDTH: 10px; PADDING-RIGHT: =
10px; COLOR: #666; PADDING-TOP: 0px
}
#notifications_menu SPAN.paginate #prev_button {
	TEXT-DECORATION: none
}
#notifications_menu SPAN.paginate #next_button {
	TEXT-DECORATION: none
}
#notifications_menu SPAN.paginate A {
	PADDING-LEFT: 3px; CURSOR: pointer
}
#notifications_menu SPAN.paginate A.disable {
	COLOR: #999; CURSOR: default; TEXT-DECORATION: none
}
DIV#page {
	WIDTH: 100%
}
DIV#header {
	HEIGHT: 30px
}
DIV#header {
	POSITION: relative; MARGIN: 0px auto; WIDTH: 950px
}
DIV#content {
	POSITION: relative; MARGIN: 0px auto; WIDTH: 950px
}
DIV#branding {
	POSITION: relative; MARGIN: 0px auto; WIDTH: 950px
}
DIV#blog_site_nav {
	MARGIN-TOP: 3px; FLOAT: left
}
DIV#blog_site_nav A.homepage {
	BACKGROUND-IMAGE: url(/images/logo-small.gif); PADDING-LEFT: 77px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left center
}
DIV#blog_site_nav A {
	PADDING-BOTTOM: 3px; LINE-HEIGHT: 2.2em; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; PADDING-TOP: 3px
}
A#msna {
	TEXT-DECORATION: none
}
DIV#branding {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FLOAT: =
none; COLOR: white; PADDING-TOP: 10px
}
DIV#branding H1 {
	MARGIN: 0px; FONT-SIZE: 30px; PADDING-TOP: 8px
}
DIV#branding A {
	COLOR: white; TEXT-DECORATION: underline
}
DIV#branding A:link {
	COLOR: white; TEXT-DECORATION: underline
}
DIV#branding A:active {
	COLOR: white; TEXT-DECORATION: underline
}
DIV#branding A:visited {
	COLOR: white; TEXT-DECORATION: underline
}
DIV#branding A:hover {
	COLOR: white; TEXT-DECORATION: none
}
DIV#branding H1 A {
	TEXT-DECORATION: none
}
DIV#branding H1 A:link {
	TEXT-DECORATION: none
}
DIV#branding H1 A:active {
	TEXT-DECORATION: none
}
DIV#branding H1 A:visited {
	TEXT-DECORATION: none
}
DIV#local {
	OVERFLOW: hidden
}
DIV#local H5 {
	MARGIN-LEFT: 10px
}
DIV#local LI {
	LINE-HEIGHT: 2.1em; LIST-STYLE-TYPE: square; MARGIN-LEFT: 25px
}
#blog_name {
	PADDING-LEFT: 38px; FLOAT: left
}
#blog_preview {
	TEXT-ALIGN: right; WIDTH: 200px; FLOAT: right; HEIGHT: 18px
}
#blog_preview IMG {
	VERTICAL-ALIGN: middle
}
#blog_domain {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 20px; FLOAT: =
right; PADDING-TOP: 35px
}
DIV#content {
	MARGIN-TOP: 5px
}
DIV#local {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: black 1px solid; =
PADDING-BOTTOM: 0px; MARGIN: 3px 3px 0px 0px; PADDING-LEFT: 3px; WIDTH: =
188px; PADDING-RIGHT: 3px; BORDER-TOP: black 1px solid; BORDER-RIGHT: =
black 1px solid; PADDING-TOP: 10px
}
DIV#main {
	BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 5px; =
MARGIN: 3px 0px 0px 5px; PADDING-LEFT: 12px; WIDTH: 714px; =
PADDING-RIGHT: 12px; OVERFLOW: hidden; BORDER-TOP: 1px solid; =
BORDER-RIGHT: 1px solid; PADDING-TOP: 5px
}
#blog_owner {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; PADDING-LEFT: 13px; =
PADDING-RIGHT: 13px; PADDING-TOP: 0px
}
DIV#blog_owner_logo {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
BORDER-TOP: #ccc 1px solid; BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: =
10px
}
DIV#blog_owner_logo IMG {
	WIDTH: 120px !important
}
#blog_owner_name {
	FONT-WEIGHT: bolder; PADDING-TOP: 5px
}
#user_visits {
	MARGIN-BOTTOM: 20px
}
#user_visits DIV.left {
	WIDTH: 75px; OVERFLOW: hidden
}
DIV.user_visit {
	MARGIN: 10px 0px 0px 5px; WIDTH: 75px; FLOAT: left; HEIGHT: 90px; =
OVERFLOW: hidden
}
#blog_actions {
	MARGIN-BOTTOM: 20px
}
#blog_actions UL LI {
	LIST-STYLE-TYPE: none; MARGIN-LEFT: 10px; LIST-STYLE-IMAGE: none
}
#blog_actions A.profile {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 20px; PADDING-RIGHT: 10px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left center; =
PADDING-TOP: 0px
}
#blog_actions A.message {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 20px; PADDING-RIGHT: 10px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left center; =
PADDING-TOP: 0px
}
#blog_actions A.guest_book {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 20px; PADDING-RIGHT: 10px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left center; =
PADDING-TOP: 0px
}
#blog_actions A.subscription {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 20px; PADDING-RIGHT: 10px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: left center; =
PADDING-TOP: 0px
}
#blog_actions A.profile {
	BACKGROUND-IMAGE: url(/images/blog/profile.png)
}
#blog_actions A.message {
	BACKGROUND-IMAGE: url(/images/blog/message.png)
}
#blog_actions A.guest_book {
	BACKGROUND-IMAGE: url(/images/blog/guest_book.png)
}
#blog_actions A.subscription {
	BACKGROUND-IMAGE: url(/images/blog/subscription.png)
}
DIV#rss LI {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
DIV.blog_nav {
	MARGIN-BOTTOM: 15px; RIGHT: 20px
}
DIV.pre_next {
	TEXT-ALIGN: right; FLOAT: right; PADDING-TOP: 5px
}
DIV.pre_next A {
	PADDING-BOTTOM: 0px; PADDING-LEFT: 15px; PADDING-RIGHT: 15px; =
BACKGROUND-REPEAT: no-repeat; PADDING-TOP: 0px
}
DIV.pre_next A.next {
	BACKGROUND-IMAGE: url(/images/gray_west_arrow.gif); =
BACKGROUND-POSITION: left center
}
DIV.pre_next A.pre {
	BACKGROUND-IMAGE: url(/images/gray_east_arrow.gif); =
BACKGROUND-POSITION: right center
}
.blog_main {
	BORDER-BOTTOM: 1px dotted; PADDING-BOTTOM: 15px; MARGIN: auto auto =
10px; PADDING-LEFT: 11px; WIDTH: 700px; PADDING-RIGHT: 11px; =
PADDING-TOP: 10px
}
.blog_title {
	MARGIN-BOTTOM: 15px
}
.blog_title H3 .actions A {
	BACKGROUND-COLOR: transparent; MARGIN-LEFT: 8px
}
.blog_bottom {
	PADDING-BOTTOM: 5px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; =
PADDING-TOP: 15px
}
.blog_bottom LI {
	LIST-STYLE-TYPE: none; MARGIN: 0px 10px 0px 0px; PADDING-RIGHT: 10px; =
DISPLAY: inline; FLOAT: left; LIST-STYLE-IMAGE: none; BORDER-RIGHT: 1px =
solid
}
.blog_bottom LI.last {
	BORDER-RIGHT: medium none
}
.blog_bottom A.more {
	BACKGROUND-IMAGE: url(/images/icon_more.gif); PADDING-RIGHT: 50px; =
BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: right center
}
.blog_comment {
	PADDING-BOTTOM: 15px; MARGIN-TOP: 15px; PADDING-LEFT: 15px; WIDTH: =
685px; PADDING-RIGHT: 15px; BORDER-TOP: gray 1px solid; PADDING-TOP: =
15px
}
.comment_title {
	PADDING-BOTTOM: 3px; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; =
PADDING-TOP: 3px
}
.comment_content {
	PADDING-BOTTOM: 3px; PADDING-LEFT: 3px; PADDING-RIGHT: 3px; =
PADDING-TOP: 3px
}
.comment_title .delete {
	POSITION: absolute; RIGHT: 30px
}
.comment_content {
	MARGIN-BOTTOM: 10px
}
DIV.picture_thumb {
	MARGIN: 0px 12px; WIDTH: 142px; FLOAT: left; HEIGHT: 170px; OVERFLOW: =
hidden
}
DIV.picture_thumb LI {
	LIST-STYLE-TYPE: none; MARGIN: 0px; LIST-STYLE-IMAGE: none
}
DIV.picture_full {
	TEXT-ALIGN: center; WIDTH: 100%; OVERFLOW: auto; BORDER-TOP: gray 1px =
solid; PADDING-TOP: 15px
}
DIV.picture_full UL {
	TEXT-ALIGN: left; PADDING-BOTTOM: 20px; MARGIN: 10px 0px; WIDTH: 100%
}
DIV.picture_full LI {
	PADDING-BOTTOM: 5px; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: =
10px; PADDING-RIGHT: 0px; LIST-STYLE-IMAGE: none; PADDING-TOP: 15px
}
.show_full_flag {
	MARGIN-TOP: 10px; FLOAT: right
}
DIV.digg {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; PADDING-LEFT: 5px; WIDTH: =
52px; PADDING-RIGHT: 5px; FLOAT: right; PADDING-TOP: 0px
}
.digg H3 {
	BACKGROUND-IMAGE: url(/images/digg.jpg); PADDING-BOTTOM: 7px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BACKGROUND-REPEAT: no-repeat; =
PADDING-TOP: 7px
}
.digg DIV {
	BACKGROUND-IMAGE: url(/images/digg.jpg); PADDING-BOTTOM: 7px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BACKGROUND-REPEAT: no-repeat; =
PADDING-TOP: 7px
}
.digg H3.digged {
	BACKGROUND-IMAGE: url(/images/digged.jpg)
}
.digg DIV.digged {
	BACKGROUND-IMAGE: url(/images/digged.jpg)
}
.digg H3 A {
	PADDING-LEFT: 15px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
left center; FONT-SIZE: 14px; FONT-WEIGHT: normal; TEXT-DECORATION: none
}
.digg H3 SPAN {
	PADDING-LEFT: 15px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
left center; FONT-SIZE: 14px; FONT-WEIGHT: normal; TEXT-DECORATION: none
}
.digg DIV A {
	PADDING-LEFT: 15px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
left center; FONT-SIZE: 14px; FONT-WEIGHT: normal; TEXT-DECORATION: none
}
.digg DIV SPAN {
	PADDING-LEFT: 15px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
left center; FONT-SIZE: 14px; FONT-WEIGHT: normal; TEXT-DECORATION: none
}
DIV.digg DIV.digg_admin {
	TEXT-ALIGN: left; WIDTH: 100px; BACKGROUND: none transparent scroll =
repeat 0% 0%
}
DIV.digg DIV.digg_admin A {
	PADDING-LEFT: 2px
}
.digg H3 A.digg {
	BACKGROUND-IMAGE: url(/images/icon_digg.gif); COLOR: #152f93
}
.digg H3 SPAN.digg {
	BACKGROUND-IMAGE: url(/images/icon_digg.gif); COLOR: #152f93
}
.digg DIV A.digg {
	BACKGROUND-IMAGE: url(/images/icon_digg.gif); COLOR: #152f93
}
.digg DIV SPAN.digg {
	BACKGROUND-IMAGE: url(/images/icon_digg.gif); COLOR: #152f93
}
.digg H3 A.bury {
	BACKGROUND-IMAGE: url(/images/icon_bury.gif); COLOR: #a03a32
}
.digg H3 SPAN.bury {
	BACKGROUND-IMAGE: url(/images/icon_bury.gif); COLOR: #a03a32
}
.digg DIV A.bury {
	BACKGROUND-IMAGE: url(/images/icon_bury.gif); COLOR: #a03a32
}
.digg DIV SPAN.bury {
	BACKGROUND-IMAGE: url(/images/icon_bury.gif); COLOR: #a03a32
}
DIV#digg_bottom {
	MARGIN: 5px 0px; PADDING-LEFT: 270px; DISPLAY: inline-block
}
DIV#digg_bottom DIV {
	BACKGROUND-IMAGE: url(/images/digg_bottom.gif); TEXT-ALIGN: center; =
LINE-HEIGHT: 25px; WIDTH: 72px; FLOAT: left; HEIGHT: 50px; FONT-SIZE: =
14px; CURSOR: pointer; MARGIN-RIGHT: 10px; PADDING-TOP: 9px
}
DIV#digg_bottom STRONG {
	COLOR: white
}
#share_weibo {
	TEXT-ALIGN: right; PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; =
WIDTH: 160px; PADDING-RIGHT: 5px; DISPLAY: inline-block; FONT: 12px/32px =
Arial, Helvetica, sans-serif; BACKGROUND: none transparent scroll repeat =
0% 0%; FLOAT: right; HEIGHT: 32px; COLOR: #333; CURSOR: auto; =
PADDING-TOP: 27px
}
#share_weibo IMG {
	MARGIN: 0px 5px
}
#share_weibo A {
	BACKGROUND: none transparent scroll repeat 0% 0%
}
DIV#digg_bottom A {
	BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: #1607d1; =
TEXT-DECORATION: none
}
DIV#digg_bottom DIV.digged {
	BACKGROUND-IMAGE: url(/images/digged_bottom.gif); COLOR: #f14e10; =
CURSOR: auto
}
H3.type_good {
	PADDING-LEFT: 25px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
0px 13px
}
H3.type_mid {
	PADDING-LEFT: 25px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
0px 13px
}
H3.type_original {
	PADDING-LEFT: 25px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
0px 13px
}
H3.type_translate {
	PADDING-LEFT: 25px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
0px 13px
}
H3.type_reprint {
	PADDING-LEFT: 25px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: =
0px 13px
}
H3.type_good {
	BACKGROUND-IMAGE: url(/images/blog/type_good.png)
}
H3.type_mid {
	BACKGROUND-IMAGE: url(/images/blog/type_mid.png)
}
H3.type_original {
	BACKGROUND-IMAGE: url(/images/blog/type_original.png)
}
H3.type_translate {
	BACKGROUND-IMAGE: url(/images/blog/type_translate.png)
}
H3.type_reprint {
	BACKGROUND-IMAGE: url(/images/blog/type_reprint.png)
}
#guest_book_emotes A {
	BACKGROUND-COLOR: transparent; WIDTH: 125px; DISPLAY: block; FLOAT: =
left; COLOR: black; TEXT-DECORATION: none
}
#resume {
	WIDTH: 100%
}
#resume LABEL.title {
	WIDTH: 200px; FONT-WEIGHT: normal
}
#resume LABEL {
	WIDTH: 50px; FONT-WEIGHT: normal
}
DIV.group {
	HEIGHT: 160px
}
DIV.group DIV.content {
	WIDTH: 630px; FLOAT: right
}
#blog_options LI {
	LIST-STYLE-TYPE: none; MARGIN-LEFT: 0px; LIST-STYLE-IMAGE: none
}
#blog_options LABEL {
	WIDTH: 150px
}
TD.row1 {
	BACKGROUND-COLOR: transparent; WIDTH: 160px; VERTICAL-ALIGN: top
}
H3 SPAN {
	PADDING-LEFT: 30px; FONT-SIZE: 12px; FONT-WEIGHT: normal
}
DIV.blog_title H3 {
	FONT-SIZE: 16px; PADDING-TOP: 10px
}
DIV.blog_title H3 SPAN {
	MARGIN-LEFT: 5px; FONT-SIZE: 12px; FONT-WEIGHT: normal
}
DIV.blog_title H3 SPAN A {
	MARGIN-LEFT: 8px
}
TABLE.admin {
	WIDTH: 100%; MARGIN-BOTTOM: 20px
}
TABLE.admin THEAD {
	FONT-SIZE: 13px; FONT-WEIGHT: bold
}
TABLE.admin TBODY TD {
	PADDING-BOTTOM: 5px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; BORDER-TOP: =
#ddd 1px dashed; PADDING-TOP: 5px
}
DIV#favorite_tag_list {
	BORDER-BOTTOM: #ccc 1px solid; PADDING-BOTTOM: 20px; MARGIN-BOTTOM: =
20px
}
DIV#favorite_tag_list LI {
	LIST-STYLE-TYPE: none; MARGIN: 5px; WIDTH: 120px; FLOAT: left; =
OVERFLOW: hidden; LIST-STYLE-IMAGE: none
}
DIV#favorite_tag_list INPUT.text {
	WIDTH: 100px
}
#main_nav {
	BORDER-BOTTOM: #36a 1px solid; MARGIN: 10px 0px 12px; HEIGHT: 25px
}
#main_nav LI {
	LIST-STYLE-TYPE: none; MARGIN: 0px 12px; FLOAT: left; LIST-STYLE-IMAGE: =
none
}
#main_nav A {
	BORDER-BOTTOM: medium none; BORDER-LEFT: #36a 1px solid; =
PADDING-BOTTOM: 0.25em; PADDING-LEFT: 1em; PADDING-RIGHT: 1em; DISPLAY: =
block; BACKGROUND: #ddd; COLOR: black; BORDER-TOP: #36a 1px solid; =
BORDER-RIGHT: #36a 1px solid; TEXT-DECORATION: none; PADDING-TOP: 0.25em
}
#main_nav LI.activetab A {
	BORDER-BOTTOM: white 1px solid; BACKGROUND: #fff
}
UL#main_nav A:hover {
	BORDER-BOTTOM: white 1px solid; BACKGROUND: #fff
}
#main_nav LI.nonetab {
	PADDING-LEFT: 30px
}
#main_nav LI.nonetab A {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: =
0px; PADDING-LEFT: 0px; WIDTH: 200px; PADDING-RIGHT: 0px; DISPLAY: =
inline; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-TOP: =
medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px
}
DIV.activity {
	BORDER-BOTTOM: #d8dfea 1px solid; PADDING-BOTTOM: 7px; PADDING-LEFT: =
10px; PADDING-RIGHT: 10px; MARGIN-BOTTOM: 10px; PADDING-TOP: 7px
}
DIV.new_reply {
	BACKGROUND-COLOR: #eee
}
.activity_content {
	PADDING-LEFT: 22px; WIDTH: 500px; BACKGROUND-REPEAT: no-repeat; FLOAT: =
left
}
.Topic .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/topic.gif)
}
.Blog .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/blog.gif)
}
.BlogComment .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/blog_comment.gif)
}
.Post .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/post.gif)
}
.News .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/news.gif)
}
.NewsComment .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/news_comment.gif)
}
.Essence .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/essence.gif)
}
.EssenceComment .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/essence_comment.gif)
}
.ArticleComment .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/post.gif)
}
.Picture .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/picture.gif)
}
.PictureComment .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/picture_comment.gif)
}
.Problem .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/problem.gif)
}
.Solution .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/solution.gif)
}
.GroupTopic .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/group_topic.gif)
}
.GroupPost .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/group_post.gif)
}
.Page .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/page.gif)
}
.Card .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/page.gif)
}
.PageComment .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/page_comment.gif)
}
.GuestBook .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/guest_book.gif)
}
.UserFavorite .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/user_favorite.gif)
}
.Twitter .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/twitter.gif)
}
.Subscription .activity_content {
	BACKGROUND-IMAGE: url(/images/subscription/subscription.gif)
}
DIV.activity_summary {
	PADDING-BOTTOM: 5px; PADDING-LEFT: 0px; PADDING-RIGHT: 5px; =
PADDING-TOP: 5px
}
DIV.activity_summary IMG.thumb {
	BORDER-BOTTOM: #eee 1px solid; BORDER-LEFT: #eee 1px solid; =
PADDING-BOTTOM: 2px; PADDING-LEFT: 2px; PADDING-RIGHT: 2px; BORDER-TOP: =
#eee 1px solid; BORDER-RIGHT: #eee 1px solid; PADDING-TOP: 2px
}
DIV.activity_time {
	FLOAT: right
}
DIV#twitter_decorate {
	BACKGROUND-IMAGE: url(/images/blog/twitter_decorate.gif); MARGIN: 5px =
13px 0px; BACKGROUND-REPEAT: no-repeat; BACKGROUND-POSITION: center =
bottom
}
DIV#twitter {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 5px; MARGIN: 0px 13px 5px; PADDING-LEFT: 5px; =
PADDING-RIGHT: 5px; BORDER-TOP: medium none; BORDER-RIGHT: #ccc 1px =
solid; PADDING-TOP: 5px
}
DIV.twitter {
	PADDING-BOTTOM: 10px
}
DIV.twitter EM {
	COLOR: #999; FONT-SIZE: 11px
}
DIV.twitter EM A {
	COLOR: #999; TEXT-DECORATION: none
}
DIV.twitter EM A:hover {
	BACKGROUND-COLOR: transparent; TEXT-DECORATION: underline
}
DIV.single_twitter {
	FONT-SIZE: 18px
}
DIV.twitter DIV.content {
	BACKGROUND-IMAGE: url(/images/app/twitter_sbg.png); POSITION: relative; =
PADDING-BOTTOM: 0px; PADDING-LEFT: 20px; WIDTH: 667px; PADDING-RIGHT: =
10px; BACKGROUND-REPEAT: no-repeat; FLOAT: left; HEIGHT: 80px; =
MARGIN-LEFT: 2px; PADDING-TOP: 10px
}
DIV.twitter DIV.action {
	POSITION: absolute; BOTTOM: 5px; RIGHT: 10px
}
DIV.twitter DIV.action A:hover {
	BACKGROUND-COLOR: transparent
}
UL.blog_categories {
	LIST-STYLE-TYPE: none; MARGIN: 0px
}
UL.blog_categories LI {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px 5px 0px 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; DISPLAY: inline; PADDING-TOP: 0px
}
DIV#blog_content {
	LINE-HEIGHT: 1.8em; FONT-SIZE: 14px
}
#blog_navbar {
	MARGIN: 0px auto; WIDTH: 950px
}
#blog_navbar LI {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
#blog_navbar UL {
	MARGIN-LEFT: 210px
}
.blog_navbar_for {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MARGIN-TOP: 10px; BORDER-TOP: =
0px; FONT-WEIGHT: bold; BORDER-RIGHT: 0px; -webkit-border-radius: 10px =
10px 0 0; -moz-border-radius: 10px 10px 0 0; border-radius: 10px 10px 0 =
0; -khtml-border-radius: 10px 10px 0 0
}
#blog_navbar LI {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 30px; LIST-STYLE-TYPE: none; =
MARGIN-TOP: 5px; PADDING-LEFT: 27px; PADDING-RIGHT: 27px; FLOAT: left; =
HEIGHT: 30px; COLOR: #fff; FONT-SIZE: 15px; LIST-STYLE-IMAGE: none; =
PADDING-TOP: 0px
}
#blog_navbar LI A:visited {
	COLOR: #fff; TEXT-DECORATION: none
}
#blog_navbar .search {
	MARGIN: 5px; WIDTH: 200px; BACKGROUND: #fff; FLOAT: left; =
border-radius: 2px
}
#blog_navbar INPUT.button {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
INPUT.submit_search {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
.submit_search {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; WIDTH: 22px; BACKGROUND: =
url(/images/blog/search.gif) no-repeat; HEIGHT: 22px; BORDER-TOP: 0px; =
BORDER-RIGHT: 0px
}
INPUT.search_text {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; WIDTH: 150px !important; HEIGHT: =
22px !important; BORDER-TOP: 0px; BORDER-RIGHT: 0px
}
#fd {
	CLEAR: both
}
.blog_main_title {
	BORDER-BOTTOM: 1px dotted; PADDING-BOTTOM: 5px; PADDING-LEFT: 11px; =
PADDING-RIGHT: 11px; MARGIN-BOTTOM: 10px; PADDING-TOP: 10px
}
.blog_main_title SPAN {
	FONT-SIZE: 14px
}
#guest_books LI {
	BORDER-BOTTOM: #ccc 1px dotted; PADDING-BOTTOM: 5px; LIST-STYLE-TYPE: =
none !important; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; MARGIN-LEFT: =
10px !important; LIST-STYLE-IMAGE: none !important; PADDING-TOP: 12px
}
#local A:hover A:active A:link A:visited {
	TEXT-DECORATION: none !important
}
IFRAME #tweetList {
	HEIGHT: auto !important
}
.notes {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 5px; MARGIN: 0px auto 10px; PADDING-LEFT: 10px; WIDTH: =
85%; PADDING-RIGHT: 10px; COLOR: #999; BORDER-TOP: #ccc 1px solid; =
BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 5px
}
.picture_upload {
	PADDING-BOTTOM: 10px; MIN-HEIGHT: 400px; PADDING-LEFT: 20px; =
PADDING-RIGHT: 20px; PADDING-TOP: 10px
}
.picture_upload_notes {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 3px; MARGIN: 15px auto; PADDING-LEFT: 3px; =
PADDING-RIGHT: 3px; BACKGROUND: #f7f7f7; BORDER-TOP: #ccc 1px solid; =
BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 3px
}
.picture_photo {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 3px; PADDING-LEFT: 3px; WIDTH: 150px; PADDING-RIGHT: =
3px; BACKGROUND: #fff; HEIGHT: 100px; BORDER-TOP: #ccc 1px solid; =
BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 3px
}
.picture_photo IMG {
	WIDTH: 150px; HEIGHT: 94px
}
.picture_photo_input1 {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 3px; PADDING-LEFT: 3px; WIDTH: 100%; PADDING-RIGHT: 3px; =
BACKGROUND: #fff; HEIGHT: 50px; BORDER-TOP: #ccc 1px solid; =
BORDER-RIGHT: #ccc 1px solid; PADDING-TOP: 3px
}
.picture_photo_input2 {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 3px; PADDING-LEFT: 3px; WIDTH: 100px; PADDING-RIGHT: =
3px; BACKGROUND: #fff; BORDER-TOP: #ccc 1px solid; BORDER-RIGHT: #ccc =
1px solid; PADDING-TOP: 3px
}
.picture_info {
=09
}
.picture_info_img {
	TEXT-ALIGN: center
}
.picture_info_notes {
	PADDING-BOTTOM: 20px; PADDING-LEFT: 20px; PADDING-RIGHT: 20px; =
PADDING-TOP: 20px
}
.picture_info_notes SPAN {
	COLOR: #999
}
.picture_info_text {
	MARGIN-TOP: 10px
}
.picture_info_notes P SPAN {
	LINE-HEIGHT: 24px; COLOR: black
}
.default {
	TEXT-ALIGN: center; PADDING-BOTTOM: 10px; MIN-HEIGHT: 400px; =
PADDING-LEFT: 20px; PADDING-RIGHT: 20px; COLOR: #999; FONT-SIZE: 14px; =
PADDING-TOP: 20px
}
.about_bar {
	PADDING-BOTTOM: 5px; MARGIN: 10px 0px; PADDING-LEFT: 15px; =
PADDING-RIGHT: 15px; FONT-WEIGHT: bold; PADDING-TOP: 5px
}
.about_bar SPAN {
	MARGIN-LEFT: 20px
}
.weight {
	FONT-WEIGHT: 100
}
.series {
	PADDING-BOTTOM: 10px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; DISPLAY: block; PADDING-TOP: 5px
}
.series DT {
	MARGIN: 0px 10px; DISPLAY: inline-block; FLOAT: left
}
.series DT IMG {
	BORDER-BOTTOM: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
PADDING-BOTTOM: 1px; PADDING-LEFT: 1px; WIDTH: 48px; PADDING-RIGHT: 1px; =
HEIGHT: 48px; BORDER-TOP: #ccc 1px solid; BORDER-RIGHT: #ccc 1px solid; =
PADDING-TOP: 1px
}
.series DD {
	MARGIN: 0px; WIDTH: 90px; FLOAT: left
}
.series DD A {
	LINE-HEIGHT: 18px; HEIGHT: 36px
}
.series:after {
	DISPLAY: block; HEIGHT: 0px; VISIBILITY: hidden; CLEAR: both; CONTENT: =
"."
}
.ico_img {
=09
}
.ico_img IMG {
	VERTICAL-ALIGN: middle; MARGIN-RIGHT: 3px
}

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/stylesheets/themes/blog/blue.css?1326191326

DIV.topic_page {
	COLOR: #108ac6; TEXT-DECORATION: underline
}
A {
	COLOR: #108ac6; TEXT-DECORATION: underline
}
A:hover {
	COLOR: white
}
DIV.app_nav {
	BACKGROUND-COLOR: #effaff
}
DIV#page {
	BACKGROUND-COLOR: #effaff
}
.comment_title {
	BACKGROUND-COLOR: #effaff
}
TR.mouse_over {
	BACKGROUND-COLOR: #effaff
}
DIV#local {
	BORDER-BOTTOM-COLOR: #108ac6; BACKGROUND-COLOR: white; =
BORDER-TOP-COLOR: #108ac6; BORDER-RIGHT-COLOR: #108ac6; =
BORDER-LEFT-COLOR: #108ac6
}
DIV#main {
	BORDER-BOTTOM-COLOR: #108ac6; BACKGROUND-COLOR: white; =
BORDER-TOP-COLOR: #108ac6; BORDER-RIGHT-COLOR: #108ac6; =
BORDER-LEFT-COLOR: #108ac6
}
.blog_main {
	BORDER-BOTTOM-COLOR: #108ac6; BACKGROUND-COLOR: white; =
BORDER-TOP-COLOR: #108ac6; BORDER-RIGHT-COLOR: #108ac6; =
BORDER-LEFT-COLOR: #108ac6
}
.pagination A:hover {
	BORDER-BOTTOM-COLOR: #108ac6; BACKGROUND-COLOR: white; =
BORDER-TOP-COLOR: #108ac6; BORDER-RIGHT-COLOR: #108ac6; =
BORDER-LEFT-COLOR: #108ac6
}
.pagination A:active {
	BORDER-BOTTOM-COLOR: #108ac6; BACKGROUND-COLOR: white; =
BORDER-TOP-COLOR: #108ac6; BORDER-RIGHT-COLOR: #108ac6; =
BORDER-LEFT-COLOR: #108ac6
}
DIV.nav {
	BACKGROUND-COLOR: #108ac6
}
DIV#app_list DIV.decorate {
	BACKGROUND-COLOR: #108ac6
}
A:hover {
	BACKGROUND-COLOR: #108ac6
}
DIV#branding {
	BACKGROUND-COLOR: #108ac6
}
INPUT.button {
	BACKGROUND-COLOR: #108ac6
}
INPUT.submit {
	BACKGROUND-COLOR: #108ac6
}
TD.buttons A {
	BACKGROUND-COLOR: #108ac6
}
.pagination SPAN.current {
	BACKGROUND-COLOR: #108ac6
}
.blog_bottom LI {
	COLOR: #108ac6; BORDER-RIGHT-COLOR: #108ac6
}
TABLE.admin THEAD {
	COLOR: #108ac6
}
.pagination A {
	COLOR: #108ac6
}
.pagination A:visited {
	COLOR: #108ac6
}
DIV.app_nav {
	BORDER-BOTTOM-COLOR: #108ac6; BORDER-TOP-COLOR: #108ac6; =
BORDER-RIGHT-COLOR: #108ac6; BORDER-LEFT-COLOR: #108ac6
}
.pagination SPAN.current {
	BORDER-BOTTOM-COLOR: #108ac6; BORDER-TOP-COLOR: #108ac6; =
BORDER-RIGHT-COLOR: #108ac6; BORDER-LEFT-COLOR: #108ac6
}
.blog_comment {
	BORDER-TOP-COLOR: #108ac6
}
DIV.picture_full {
	BORDER-TOP-COLOR: #108ac6
}
.white {
	COLOR: #fff !important
}
#blog_navbar {
	BACKGROUND-COLOR: #108ac6
}
.blog_navbar_for {
	BACKGROUND-COLOR: #effaff; COLOR: #108ac6
}
#blog_navbar .blog_navbar_for A:visited {
	BACKGROUND-COLOR: #effaff; COLOR: #108ac6
}
#blog_navbar .blog_navbar_for A:link {
	BACKGROUND-COLOR: #effaff; COLOR: #108ac6
}
.blog_main_title {
	COLOR: #000
}
.about_bar {
	BACKGROUND: #cccccc; COLOR: #108ac6
}
.view A:hover {
	COLOR: #108ac6
}
.list_current {
=09
}
.list_current A {
	COLOR: #ff6600; FONT-WEIGHT: bold
}
.list_current A:hover {
	BACKGROUND: #ff6600; COLOR: #ffffff
}
#my_resume .editing A.del:hover {
	COLOR: #108ac6
}
#my_resume .editing A.add:hover {
	COLOR: #108ac6
}

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/javascripts/syntaxhighlighter/SyntaxHighlighter.css?1324994303

.dp-highlighter {
	PADDING-BOTTOM: 1px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 1px; =
WIDTH: 97%; PADDING-RIGHT: 1px; FONT-FAMILY: Monaco, DejaVu Sans Mono, =
Bitstream Vera Sans Mono, Consolas, Courier New, monospace; WORD-WRAP: =
break-word; MARGIN-LEFT: 9px; FONT-SIZE: 12px; OVERFLOW: auto; =
WORD-BREAK: break-all; PADDING-TOP: 1px
}
.dp-highlighter OL {
	BORDER-BOTTOM: #d1d7dc 1px solid; BORDER-LEFT: #d1d7dc 1px solid; =
PADDING-BOTTOM: 2px; BACKGROUND-COLOR: #fff; LIST-STYLE-TYPE: decimal; =
MARGIN: 0px 0px 1px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: =
#2b91af; BORDER-TOP: #d1d7dc 1px solid; BORDER-RIGHT: #d1d7dc 1px solid; =
PADDING-TOP: 2px
}
.dp-highlighter OL LI {
	BORDER-LEFT: #d1d7dc 1px solid; LINE-HEIGHT: 18px; BACKGROUND-COLOR: =
#fafafa; MARGIN: 0px 0px 0px 38px; PADDING-LEFT: 10px
}
.dp-highlighter .columns DIV {
	BORDER-LEFT: #d1d7dc 1px solid; LINE-HEIGHT: 18px; BACKGROUND-COLOR: =
#fafafa; MARGIN: 0px 0px 0px 38px; PADDING-LEFT: 10px
}
.dp-highlighter .columns {
	WIDTH: 100%; COLOR: gray; OVERFLOW: hidden
}
.dp-highlighter .columns DIV {
	PADDING-BOTTOM: 5px
}
.dp-highlighter OL LI SPAN {
	COLOR: black
}
.dp-highlighter .tools {
	TEXT-ALIGN: left; PADDING-BOTTOM: 3px; MARGIN: 0px; PADDING-LEFT: 3px; =
PADDING-RIGHT: 3px; COLOR: black; FONT-WEIGHT: bold; PADDING-TOP: 3px
}
.dp-about {
	PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #fff; MARGIN: 0px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
.dp-about TABLE {
	WIDTH: 100%; FONT-FAMILY: Tahoma, Verdana, Arial, sans-serif =
!important; HEIGHT: 100%; FONT-SIZE: 11px
}
.dp-about TD {
	PADDING-BOTTOM: 10px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px; =
VERTICAL-ALIGN: top; PADDING-TOP: 10px
}
.dp-about .copy {
	BORDER-BOTTOM: #aca899 1px solid; HEIGHT: 95%
}
.dp-about .title {
	COLOR: red; FONT-WEIGHT: bold
}
.dp-about .para {
	MARGIN: 0px 0px 4px
}
.dp-about .footer {
	TEXT-ALIGN: right; BACKGROUND-COLOR: #eceadb; BORDER-TOP: #fff 1px =
solid
}
.dp-about .close {
	BACKGROUND-COLOR: #eceadb; WIDTH: 60px; FONT-FAMILY: Tahoma, Verdana, =
Arial, sans-serif !important; HEIGHT: 22px; FONT-SIZE: 11px
}
.dp-highlighter .comment {
	COLOR: #008200
}
.dp-highlighter .comments {
	COLOR: #008200
}
.dp-highlighter .string {
	COLOR: blue
}
.dp-highlighter .keyword {
	COLOR: #7f0055; FONT-WEIGHT: bold
}
.dp-highlighter .preprocessor {
	COLOR: gray
}

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/javascripts/application.js?1332732182

/*  Prototype JavaScript framework, version 1.6.1=0A=
 *  (c) 2005-2009 Sam Stephenson=0A=
 *=0A=
 *  Prototype is freely distributable under the terms of an MIT-style =
license.=0A=
 *  For details, see the Prototype web site: http://www.prototypejs.org/=0A=
 *=0A=
 =
*------------------------------------------------------------------------=
--*/=0A=
=0A=
var Prototype =3D {=0A=
  Version: '1.6.1',=0A=
=0A=
  Browser: (function(){=0A=
    var ua =3D navigator.userAgent;=0A=
    var isOpera =3D Object.prototype.toString.call(window.opera) =3D=3D =
'[object Opera]';=0A=
    return {=0A=
      IE:             !!window.attachEvent && !isOpera,=0A=
      Opera:          isOpera,=0A=
      WebKit:         ua.indexOf('AppleWebKit/') > -1,=0A=
      Gecko:          ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') =
=3D=3D=3D -1,=0A=
      MobileSafari:   /Apple.*Mobile.*Safari/.test(ua)=0A=
    }=0A=
  })(),=0A=
=0A=
  BrowserFeatures: {=0A=
    XPath: !!document.evaluate,=0A=
    SelectorsAPI: !!document.querySelector,=0A=
    ElementExtensions: (function() {=0A=
      var constructor =3D window.Element || window.HTMLElement;=0A=
      return !!(constructor && constructor.prototype);=0A=
    })(),=0A=
    SpecificElementExtensions: (function() {=0A=
      if (typeof window.HTMLDivElement !=3D=3D 'undefined')=0A=
        return true;=0A=
=0A=
      var div =3D document.createElement('div');=0A=
      var form =3D document.createElement('form');=0A=
      var isSupported =3D false;=0A=
=0A=
      if (div['__proto__'] && (div['__proto__'] !=3D=3D =
form['__proto__'])) {=0A=
        isSupported =3D true;=0A=
      }=0A=
=0A=
      div =3D form =3D null;=0A=
=0A=
      return isSupported;=0A=
    })()=0A=
  },=0A=
=0A=
  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script>',=0A=
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,=0A=
=0A=
  emptyFunction: function() { },=0A=
  K: function(x) { return x }=0A=
};=0A=
=0A=
if (Prototype.Browser.MobileSafari)=0A=
  Prototype.BrowserFeatures.SpecificElementExtensions =3D false;=0A=
=0A=
=0A=
var Abstract =3D { };=0A=
=0A=
=0A=
var Try =3D {=0A=
  these: function() {=0A=
    var returnValue;=0A=
=0A=
    for (var i =3D 0, length =3D arguments.length; i < length; i++) {=0A=
      var lambda =3D arguments[i];=0A=
      try {=0A=
        returnValue =3D lambda();=0A=
        break;=0A=
      } catch (e) { }=0A=
    }=0A=
=0A=
    return returnValue;=0A=
  }=0A=
};=0A=
=0A=
/* Based on Alex Arnell's inheritance implementation. */=0A=
=0A=
var Class =3D (function() {=0A=
  function subclass() {};=0A=
  function create() {=0A=
    var parent =3D null, properties =3D $A(arguments);=0A=
    if (Object.isFunction(properties[0]))=0A=
      parent =3D properties.shift();=0A=
=0A=
    function klass() {=0A=
      this.initialize.apply(this, arguments);=0A=
    }=0A=
=0A=
    Object.extend(klass, Class.Methods);=0A=
    klass.superclass =3D parent;=0A=
    klass.subclasses =3D [];=0A=
=0A=
    if (parent) {=0A=
      subclass.prototype =3D parent.prototype;=0A=
      klass.prototype =3D new subclass;=0A=
      parent.subclasses.push(klass);=0A=
    }=0A=
=0A=
    for (var i =3D 0; i < properties.length; i++)=0A=
      klass.addMethods(properties[i]);=0A=
=0A=
    if (!klass.prototype.initialize)=0A=
      klass.prototype.initialize =3D Prototype.emptyFunction;=0A=
=0A=
    klass.prototype.constructor =3D klass;=0A=
    return klass;=0A=
  }=0A=
=0A=
  function addMethods(source) {=0A=
    var ancestor   =3D this.superclass && this.superclass.prototype;=0A=
    var properties =3D Object.keys(source);=0A=
=0A=
    if (!Object.keys({ toString: true }).length) {=0A=
      if (source.toString !=3D Object.prototype.toString)=0A=
        properties.push("toString");=0A=
      if (source.valueOf !=3D Object.prototype.valueOf)=0A=
        properties.push("valueOf");=0A=
    }=0A=
=0A=
    for (var i =3D 0, length =3D properties.length; i < length; i++) {=0A=
      var property =3D properties[i], value =3D source[property];=0A=
      if (ancestor && Object.isFunction(value) &&=0A=
          value.argumentNames().first() =3D=3D "$super") {=0A=
        var method =3D value;=0A=
        value =3D (function(m) {=0A=
          return function() { return ancestor[m].apply(this, arguments); =
};=0A=
        })(property).wrap(method);=0A=
=0A=
        value.valueOf =3D method.valueOf.bind(method);=0A=
        value.toString =3D method.toString.bind(method);=0A=
      }=0A=
      this.prototype[property] =3D value;=0A=
    }=0A=
=0A=
    return this;=0A=
  }=0A=
=0A=
  return {=0A=
    create: create,=0A=
    Methods: {=0A=
      addMethods: addMethods=0A=
    }=0A=
  };=0A=
})();=0A=
(function() {=0A=
=0A=
  var _toString =3D Object.prototype.toString;=0A=
=0A=
  function extend(destination, source) {=0A=
    for (var property in source)=0A=
      destination[property] =3D source[property];=0A=
    return destination;=0A=
  }=0A=
=0A=
  function inspect(object) {=0A=
    try {=0A=
      if (isUndefined(object)) return 'undefined';=0A=
      if (object =3D=3D=3D null) return 'null';=0A=
      return object.inspect ? object.inspect() : String(object);=0A=
    } catch (e) {=0A=
      if (e instanceof RangeError) return '...';=0A=
      throw e;=0A=
    }=0A=
  }=0A=
=0A=
  function toJSON(object) {=0A=
    var type =3D typeof object;=0A=
    switch (type) {=0A=
      case 'undefined':=0A=
      case 'function':=0A=
      case 'unknown': return;=0A=
      case 'boolean': return object.toString();=0A=
    }=0A=
=0A=
    if (object =3D=3D=3D null) return 'null';=0A=
    if (object.toJSON) return object.toJSON();=0A=
    if (isElement(object)) return;=0A=
=0A=
    var results =3D [];=0A=
    for (var property in object) {=0A=
      var value =3D toJSON(object[property]);=0A=
      if (!isUndefined(value))=0A=
        results.push(property.toJSON() + ': ' + value);=0A=
    }=0A=
=0A=
    return '{' + results.join(', ') + '}';=0A=
  }=0A=
=0A=
  function toQueryString(object) {=0A=
    return $H(object).toQueryString();=0A=
  }=0A=
=0A=
  function toHTML(object) {=0A=
    return object && object.toHTML ? object.toHTML() : =
String.interpret(object);=0A=
  }=0A=
=0A=
  function keys(object) {=0A=
    var results =3D [];=0A=
    for (var property in object)=0A=
      results.push(property);=0A=
    return results;=0A=
  }=0A=
=0A=
  function values(object) {=0A=
    var results =3D [];=0A=
    for (var property in object)=0A=
      results.push(object[property]);=0A=
    return results;=0A=
  }=0A=
=0A=
  function clone(object) {=0A=
    return extend({ }, object);=0A=
  }=0A=
=0A=
  function isElement(object) {=0A=
    return !!(object && object.nodeType =3D=3D 1);=0A=
  }=0A=
=0A=
  function isArray(object) {=0A=
    return _toString.call(object) =3D=3D "[object Array]";=0A=
  }=0A=
=0A=
=0A=
  function isHash(object) {=0A=
    return object instanceof Hash;=0A=
  }=0A=
=0A=
  function isFunction(object) {=0A=
    return typeof object =3D=3D=3D "function";=0A=
  }=0A=
=0A=
  function isString(object) {=0A=
    return _toString.call(object) =3D=3D "[object String]";=0A=
  }=0A=
=0A=
  function isNumber(object) {=0A=
    return _toString.call(object) =3D=3D "[object Number]";=0A=
  }=0A=
=0A=
  function isUndefined(object) {=0A=
    return typeof object =3D=3D=3D "undefined";=0A=
  }=0A=
=0A=
  extend(Object, {=0A=
    extend:        extend,=0A=
    inspect:       inspect,=0A=
    toJSON:        toJSON,=0A=
    toQueryString: toQueryString,=0A=
    toHTML:        toHTML,=0A=
    keys:          keys,=0A=
    values:        values,=0A=
    clone:         clone,=0A=
    isElement:     isElement,=0A=
    isArray:       isArray,=0A=
    isHash:        isHash,=0A=
    isFunction:    isFunction,=0A=
    isString:      isString,=0A=
    isNumber:      isNumber,=0A=
    isUndefined:   isUndefined=0A=
  });=0A=
})();=0A=
Object.extend(Function.prototype, (function() {=0A=
  var slice =3D Array.prototype.slice;=0A=
=0A=
  function update(array, args) {=0A=
    var arrayLength =3D array.length, length =3D args.length;=0A=
    while (length--) array[arrayLength + length] =3D args[length];=0A=
    return array;=0A=
  }=0A=
=0A=
  function merge(array, args) {=0A=
    array =3D slice.call(array, 0);=0A=
    return update(array, args);=0A=
  }=0A=
=0A=
  function argumentNames() {=0A=
    var names =3D =
this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]=0A=
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')=0A=
      .replace(/\s+/g, '').split(',');=0A=
    return names.length =3D=3D 1 && !names[0] ? [] : names;=0A=
  }=0A=
=0A=
  function bind(context) {=0A=
    if (arguments.length < 2 && Object.isUndefined(arguments[0])) return =
this;=0A=
    var __method =3D this, args =3D slice.call(arguments, 1);=0A=
    return function() {=0A=
      var a =3D merge(args, arguments);=0A=
      return __method.apply(context, a);=0A=
    }=0A=
  }=0A=
=0A=
  function bindAsEventListener(context) {=0A=
    var __method =3D this, args =3D slice.call(arguments, 1);=0A=
    return function(event) {=0A=
      var a =3D update([event || window.event], args);=0A=
      return __method.apply(context, a);=0A=
    }=0A=
  }=0A=
=0A=
  function curry() {=0A=
    if (!arguments.length) return this;=0A=
    var __method =3D this, args =3D slice.call(arguments, 0);=0A=
    return function() {=0A=
      var a =3D merge(args, arguments);=0A=
      return __method.apply(this, a);=0A=
    }=0A=
  }=0A=
=0A=
  function delay(timeout) {=0A=
    var __method =3D this, args =3D slice.call(arguments, 1);=0A=
    timeout =3D timeout * 1000=0A=
    return window.setTimeout(function() {=0A=
      return __method.apply(__method, args);=0A=
    }, timeout);=0A=
  }=0A=
=0A=
  function defer() {=0A=
    var args =3D update([0.01], arguments);=0A=
    return this.delay.apply(this, args);=0A=
  }=0A=
=0A=
  function wrap(wrapper) {=0A=
    var __method =3D this;=0A=
    return function() {=0A=
      var a =3D update([__method.bind(this)], arguments);=0A=
      return wrapper.apply(this, a);=0A=
    }=0A=
  }=0A=
=0A=
  function methodize() {=0A=
    if (this._methodized) return this._methodized;=0A=
    var __method =3D this;=0A=
    return this._methodized =3D function() {=0A=
      var a =3D update([this], arguments);=0A=
      return __method.apply(null, a);=0A=
    };=0A=
  }=0A=
=0A=
  return {=0A=
    argumentNames:       argumentNames,=0A=
    bind:                bind,=0A=
    bindAsEventListener: bindAsEventListener,=0A=
    curry:               curry,=0A=
    delay:               delay,=0A=
    defer:               defer,=0A=
    wrap:                wrap,=0A=
    methodize:           methodize=0A=
  }=0A=
})());=0A=
=0A=
=0A=
Date.prototype.toJSON =3D function() {=0A=
  return '"' + this.getUTCFullYear() + '-' +=0A=
    (this.getUTCMonth() + 1).toPaddedString(2) + '-' +=0A=
    this.getUTCDate().toPaddedString(2) + 'T' +=0A=
    this.getUTCHours().toPaddedString(2) + ':' +=0A=
    this.getUTCMinutes().toPaddedString(2) + ':' +=0A=
    this.getUTCSeconds().toPaddedString(2) + 'Z"';=0A=
};=0A=
=0A=
=0A=
RegExp.prototype.match =3D RegExp.prototype.test;=0A=
=0A=
RegExp.escape =3D function(str) {=0A=
  return String(str).replace(/([.*+?^=3D!:${}()|[\]\/\\])/g, '\\$1');=0A=
};=0A=
var PeriodicalExecuter =3D Class.create({=0A=
  initialize: function(callback, frequency) {=0A=
    this.callback =3D callback;=0A=
    this.frequency =3D frequency;=0A=
    this.currentlyExecuting =3D false;=0A=
=0A=
    this.registerCallback();=0A=
  },=0A=
=0A=
  registerCallback: function() {=0A=
    this.timer =3D setInterval(this.onTimerEvent.bind(this), =
this.frequency * 1000);=0A=
  },=0A=
=0A=
  execute: function() {=0A=
    this.callback(this);=0A=
  },=0A=
=0A=
  stop: function() {=0A=
    if (!this.timer) return;=0A=
    clearInterval(this.timer);=0A=
    this.timer =3D null;=0A=
  },=0A=
=0A=
  onTimerEvent: function() {=0A=
    if (!this.currentlyExecuting) {=0A=
      try {=0A=
        this.currentlyExecuting =3D true;=0A=
        this.execute();=0A=
        this.currentlyExecuting =3D false;=0A=
      } catch(e) {=0A=
        this.currentlyExecuting =3D false;=0A=
        throw e;=0A=
      }=0A=
    }=0A=
  }=0A=
});=0A=
Object.extend(String, {=0A=
  interpret: function(value) {=0A=
    return value =3D=3D null ? '' : String(value);=0A=
  },=0A=
  specialChar: {=0A=
    '\b': '\\b',=0A=
    '\t': '\\t',=0A=
    '\n': '\\n',=0A=
    '\f': '\\f',=0A=
    '\r': '\\r',=0A=
    '\\': '\\\\'=0A=
  }=0A=
});=0A=
=0A=
Object.extend(String.prototype, (function() {=0A=
=0A=
  function prepareReplacement(replacement) {=0A=
    if (Object.isFunction(replacement)) return replacement;=0A=
    var template =3D new Template(replacement);=0A=
    return function(match) { return template.evaluate(match) };=0A=
  }=0A=
=0A=
  function gsub(pattern, replacement) {=0A=
    var result =3D '', source =3D this, match;=0A=
    replacement =3D prepareReplacement(replacement);=0A=
=0A=
    if (Object.isString(pattern))=0A=
      pattern =3D RegExp.escape(pattern);=0A=
=0A=
    if (!(pattern.length || pattern.source)) {=0A=
      replacement =3D replacement('');=0A=
      return replacement + source.split('').join(replacement) + =
replacement;=0A=
    }=0A=
=0A=
    while (source.length > 0) {=0A=
      if (match =3D source.match(pattern)) {=0A=
        result +=3D source.slice(0, match.index);=0A=
        result +=3D String.interpret(replacement(match));=0A=
        source  =3D source.slice(match.index + match[0].length);=0A=
      } else {=0A=
        result +=3D source, source =3D '';=0A=
      }=0A=
    }=0A=
    return result;=0A=
  }=0A=
=0A=
  function sub(pattern, replacement, count) {=0A=
    replacement =3D prepareReplacement(replacement);=0A=
    count =3D Object.isUndefined(count) ? 1 : count;=0A=
=0A=
    return this.gsub(pattern, function(match) {=0A=
      if (--count < 0) return match[0];=0A=
      return replacement(match);=0A=
    });=0A=
  }=0A=
=0A=
  function scan(pattern, iterator) {=0A=
    this.gsub(pattern, iterator);=0A=
    return String(this);=0A=
  }=0A=
=0A=
  function truncate(length, truncation) {=0A=
    length =3D length || 30;=0A=
    truncation =3D Object.isUndefined(truncation) ? '...' : truncation;=0A=
    return this.length > length ?=0A=
      this.slice(0, length - truncation.length) + truncation : =
String(this);=0A=
  }=0A=
=0A=
  function strip() {=0A=
    return this.replace(/^\s+/, '').replace(/\s+$/, '');=0A=
  }=0A=
=0A=
  function stripTags() {=0A=
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, =
'');=0A=
  }=0A=
=0A=
  function stripScripts() {=0A=
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');=0A=
  }=0A=
=0A=
  function extractScripts() {=0A=
    var matchAll =3D new RegExp(Prototype.ScriptFragment, 'img');=0A=
    var matchOne =3D new RegExp(Prototype.ScriptFragment, 'im');=0A=
    return (this.match(matchAll) || []).map(function(scriptTag) {=0A=
      return (scriptTag.match(matchOne) || ['', ''])[1];=0A=
    });=0A=
  }=0A=
=0A=
  function evalScripts() {=0A=
    return this.extractScripts().map(function(script) { return =
eval(script) });=0A=
  }=0A=
=0A=
  function escapeHTML() {=0A=
    return =
this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');=0A=
  }=0A=
=0A=
  function unescapeHTML() {=0A=
    return =
this.stripTags().replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;=
/g,'&');=0A=
  }=0A=
=0A=
=0A=
  function toQueryParams(separator) {=0A=
    var match =3D this.strip().match(/([^?#]*)(#.*)?$/);=0A=
    if (!match) return { };=0A=
=0A=
    return match[1].split(separator || '&').inject({ }, function(hash, =
pair) {=0A=
      if ((pair =3D pair.split('=3D'))[0]) {=0A=
        var key =3D decodeURIComponent(pair.shift());=0A=
        var value =3D pair.length > 1 ? pair.join('=3D') : pair[0];=0A=
        if (value !=3D undefined) value =3D decodeURIComponent(value);=0A=
=0A=
        if (key in hash) {=0A=
          if (!Object.isArray(hash[key])) hash[key] =3D [hash[key]];=0A=
          hash[key].push(value);=0A=
        }=0A=
        else hash[key] =3D value;=0A=
      }=0A=
      return hash;=0A=
    });=0A=
  }=0A=
=0A=
  function toArray() {=0A=
    return this.split('');=0A=
  }=0A=
=0A=
  function succ() {=0A=
    return this.slice(0, this.length - 1) +=0A=
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);=0A=
  }=0A=
=0A=
  function times(count) {=0A=
    return count < 1 ? '' : new Array(count + 1).join(this);=0A=
  }=0A=
=0A=
  function camelize() {=0A=
    var parts =3D this.split('-'), len =3D parts.length;=0A=
    if (len =3D=3D 1) return parts[0];=0A=
=0A=
    var camelized =3D this.charAt(0) =3D=3D '-'=0A=
      ? parts[0].charAt(0).toUpperCase() + parts[0].substring(1)=0A=
      : parts[0];=0A=
=0A=
    for (var i =3D 1; i < len; i++)=0A=
      camelized +=3D parts[i].charAt(0).toUpperCase() + =
parts[i].substring(1);=0A=
=0A=
    return camelized;=0A=
  }=0A=
=0A=
  function capitalize() {=0A=
    return this.charAt(0).toUpperCase() + =
this.substring(1).toLowerCase();=0A=
  }=0A=
=0A=
  function underscore() {=0A=
    return this.replace(/::/g, '/')=0A=
               .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')=0A=
               .replace(/([a-z\d])([A-Z])/g, '$1_$2')=0A=
               .replace(/-/g, '_')=0A=
               .toLowerCase();=0A=
  }=0A=
=0A=
  function dasherize() {=0A=
    return this.replace(/_/g, '-');=0A=
  }=0A=
=0A=
  function inspect(useDoubleQuotes) {=0A=
    var escapedString =3D this.replace(/[\x00-\x1f\\]/g, =
function(character) {=0A=
      if (character in String.specialChar) {=0A=
        return String.specialChar[character];=0A=
      }=0A=
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);=0A=
    });=0A=
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') =
+ '"';=0A=
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";=0A=
  }=0A=
=0A=
  function toJSON() {=0A=
    return this.inspect(true);=0A=
  }=0A=
=0A=
  function unfilterJSON(filter) {=0A=
    return this.replace(filter || Prototype.JSONFilter, '$1');=0A=
  }=0A=
=0A=
  function isJSON() {=0A=
    var str =3D this;=0A=
    if (str.blank()) return false;=0A=
    str =3D this.replace(/\\./g, '@').replace(/"[^"\\\n\r]*"/g, '');=0A=
    return (/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(str);=0A=
  }=0A=
=0A=
  function evalJSON(sanitize) {=0A=
    var json =3D this.unfilterJSON();=0A=
    try {=0A=
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');=0A=
    } catch (e) { }=0A=
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());=0A=
  }=0A=
=0A=
  function include(pattern) {=0A=
    return this.indexOf(pattern) > -1;=0A=
  }=0A=
=0A=
  function startsWith(pattern) {=0A=
    return this.indexOf(pattern) =3D=3D=3D 0;=0A=
  }=0A=
=0A=
  function endsWith(pattern) {=0A=
    var d =3D this.length - pattern.length;=0A=
    return d >=3D 0 && this.lastIndexOf(pattern) =3D=3D=3D d;=0A=
  }=0A=
=0A=
  function empty() {=0A=
    return this =3D=3D '';=0A=
  }=0A=
=0A=
  function blank() {=0A=
    return /^\s*$/.test(this);=0A=
  }=0A=
=0A=
  function interpolate(object, pattern) {=0A=
    return new Template(this, pattern).evaluate(object);=0A=
  }=0A=
=0A=
  return {=0A=
    gsub:           gsub,=0A=
    sub:            sub,=0A=
    scan:           scan,=0A=
    truncate:       truncate,=0A=
    strip:          String.prototype.trim ? String.prototype.trim : =
strip,=0A=
    stripTags:      stripTags,=0A=
    stripScripts:   stripScripts,=0A=
    extractScripts: extractScripts,=0A=
    evalScripts:    evalScripts,=0A=
    escapeHTML:     escapeHTML,=0A=
    unescapeHTML:   unescapeHTML,=0A=
    toQueryParams:  toQueryParams,=0A=
    parseQuery:     toQueryParams,=0A=
    toArray:        toArray,=0A=
    succ:           succ,=0A=
    times:          times,=0A=
    camelize:       camelize,=0A=
    capitalize:     capitalize,=0A=
    underscore:     underscore,=0A=
    dasherize:      dasherize,=0A=
    inspect:        inspect,=0A=
    toJSON:         toJSON,=0A=
    unfilterJSON:   unfilterJSON,=0A=
    isJSON:         isJSON,=0A=
    evalJSON:       evalJSON,=0A=
    include:        include,=0A=
    startsWith:     startsWith,=0A=
    endsWith:       endsWith,=0A=
    empty:          empty,=0A=
    blank:          blank,=0A=
    interpolate:    interpolate=0A=
  };=0A=
})());=0A=
=0A=
var Template =3D Class.create({=0A=
  initialize: function(template, pattern) {=0A=
    this.template =3D template.toString();=0A=
    this.pattern =3D pattern || Template.Pattern;=0A=
  },=0A=
=0A=
  evaluate: function(object) {=0A=
    if (object && Object.isFunction(object.toTemplateReplacements))=0A=
      object =3D object.toTemplateReplacements();=0A=
=0A=
    return this.template.gsub(this.pattern, function(match) {=0A=
      if (object =3D=3D null) return (match[1] + '');=0A=
=0A=
      var before =3D match[1] || '';=0A=
      if (before =3D=3D '\\') return match[2];=0A=
=0A=
      var ctx =3D object, expr =3D match[3];=0A=
      var pattern =3D /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;=0A=
      match =3D pattern.exec(expr);=0A=
      if (match =3D=3D null) return before;=0A=
=0A=
      while (match !=3D null) {=0A=
        var comp =3D match[1].startsWith('[') ? =
match[2].replace(/\\\\]/g, ']') : match[1];=0A=
        ctx =3D ctx[comp];=0A=
        if (null =3D=3D ctx || '' =3D=3D match[3]) break;=0A=
        expr =3D expr.substring('[' =3D=3D match[3] ? match[1].length : =
match[0].length);=0A=
        match =3D pattern.exec(expr);=0A=
      }=0A=
=0A=
      return before + String.interpret(ctx);=0A=
    });=0A=
  }=0A=
});=0A=
Template.Pattern =3D /(^|.|\r|\n)(#\{(.*?)\})/;=0A=
=0A=
var $break =3D { };=0A=
=0A=
var Enumerable =3D (function() {=0A=
  function each(iterator, context) {=0A=
    var index =3D 0;=0A=
    try {=0A=
      this._each(function(value) {=0A=
        iterator.call(context, value, index++);=0A=
      });=0A=
    } catch (e) {=0A=
      if (e !=3D $break) throw e;=0A=
    }=0A=
    return this;=0A=
  }=0A=
=0A=
  function eachSlice(number, iterator, context) {=0A=
    var index =3D -number, slices =3D [], array =3D this.toArray();=0A=
    if (number < 1) return array;=0A=
    while ((index +=3D number) < array.length)=0A=
      slices.push(array.slice(index, index+number));=0A=
    return slices.collect(iterator, context);=0A=
  }=0A=
=0A=
  function all(iterator, context) {=0A=
    iterator =3D iterator || Prototype.K;=0A=
    var result =3D true;=0A=
    this.each(function(value, index) {=0A=
      result =3D result && !!iterator.call(context, value, index);=0A=
      if (!result) throw $break;=0A=
    });=0A=
    return result;=0A=
  }=0A=
=0A=
  function any(iterator, context) {=0A=
    iterator =3D iterator || Prototype.K;=0A=
    var result =3D false;=0A=
    this.each(function(value, index) {=0A=
      if (result =3D !!iterator.call(context, value, index))=0A=
        throw $break;=0A=
    });=0A=
    return result;=0A=
  }=0A=
=0A=
  function collect(iterator, context) {=0A=
    iterator =3D iterator || Prototype.K;=0A=
    var results =3D [];=0A=
    this.each(function(value, index) {=0A=
      results.push(iterator.call(context, value, index));=0A=
    });=0A=
    return results;=0A=
  }=0A=
=0A=
  function detect(iterator, context) {=0A=
    var result;=0A=
    this.each(function(value, index) {=0A=
      if (iterator.call(context, value, index)) {=0A=
        result =3D value;=0A=
        throw $break;=0A=
      }=0A=
    });=0A=
    return result;=0A=
  }=0A=
=0A=
  function findAll(iterator, context) {=0A=
    var results =3D [];=0A=
    this.each(function(value, index) {=0A=
      if (iterator.call(context, value, index))=0A=
        results.push(value);=0A=
    });=0A=
    return results;=0A=
  }=0A=
=0A=
  function grep(filter, iterator, context) {=0A=
    iterator =3D iterator || Prototype.K;=0A=
    var results =3D [];=0A=
=0A=
    if (Object.isString(filter))=0A=
      filter =3D new RegExp(RegExp.escape(filter));=0A=
=0A=
    this.each(function(value, index) {=0A=
      if (filter.match(value))=0A=
        results.push(iterator.call(context, value, index));=0A=
    });=0A=
    return results;=0A=
  }=0A=
=0A=
  function include(object) {=0A=
    if (Object.isFunction(this.indexOf))=0A=
      if (this.indexOf(object) !=3D -1) return true;=0A=
=0A=
    var found =3D false;=0A=
    this.each(function(value) {=0A=
      if (value =3D=3D object) {=0A=
        found =3D true;=0A=
        throw $break;=0A=
      }=0A=
    });=0A=
    return found;=0A=
  }=0A=
=0A=
  function inGroupsOf(number, fillWith) {=0A=
    fillWith =3D Object.isUndefined(fillWith) ? null : fillWith;=0A=
    return this.eachSlice(number, function(slice) {=0A=
      while(slice.length < number) slice.push(fillWith);=0A=
      return slice;=0A=
    });=0A=
  }=0A=
=0A=
  function inject(memo, iterator, context) {=0A=
    this.each(function(value, index) {=0A=
      memo =3D iterator.call(context, memo, value, index);=0A=
    });=0A=
    return memo;=0A=
  }=0A=
=0A=
  function invoke(method) {=0A=
    var args =3D $A(arguments).slice(1);=0A=
    return this.map(function(value) {=0A=
      return value[method].apply(value, args);=0A=
    });=0A=
  }=0A=
=0A=
  function max(iterator, context) {=0A=
    iterator =3D iterator || Prototype.K;=0A=
    var result;=0A=
    this.each(function(value, index) {=0A=
      value =3D iterator.call(context, value, index);=0A=
      if (result =3D=3D null || value >=3D result)=0A=
        result =3D value;=0A=
    });=0A=
    return result;=0A=
  }=0A=
=0A=
  function min(iterator, context) {=0A=
    iterator =3D iterator || Prototype.K;=0A=
    var result;=0A=
    this.each(function(value, index) {=0A=
      value =3D iterator.call(context, value, index);=0A=
      if (result =3D=3D null || value < result)=0A=
        result =3D value;=0A=
    });=0A=
    return result;=0A=
  }=0A=
=0A=
  function partition(iterator, context) {=0A=
    iterator =3D iterator || Prototype.K;=0A=
    var trues =3D [], falses =3D [];=0A=
    this.each(function(value, index) {=0A=
      (iterator.call(context, value, index) ?=0A=
        trues : falses).push(value);=0A=
    });=0A=
    return [trues, falses];=0A=
  }=0A=
=0A=
  function pluck(property) {=0A=
    var results =3D [];=0A=
    this.each(function(value) {=0A=
      results.push(value[property]);=0A=
    });=0A=
    return results;=0A=
  }=0A=
=0A=
  function reject(iterator, context) {=0A=
    var results =3D [];=0A=
    this.each(function(value, index) {=0A=
      if (!iterator.call(context, value, index))=0A=
        results.push(value);=0A=
    });=0A=
    return results;=0A=
  }=0A=
=0A=
  function sortBy(iterator, context) {=0A=
    return this.map(function(value, index) {=0A=
      return {=0A=
        value: value,=0A=
        criteria: iterator.call(context, value, index)=0A=
      };=0A=
    }).sort(function(left, right) {=0A=
      var a =3D left.criteria, b =3D right.criteria;=0A=
      return a < b ? -1 : a > b ? 1 : 0;=0A=
    }).pluck('value');=0A=
  }=0A=
=0A=
  function toArray() {=0A=
    return this.map();=0A=
  }=0A=
=0A=
  function zip() {=0A=
    var iterator =3D Prototype.K, args =3D $A(arguments);=0A=
    if (Object.isFunction(args.last()))=0A=
      iterator =3D args.pop();=0A=
=0A=
    var collections =3D [this].concat(args).map($A);=0A=
    return this.map(function(value, index) {=0A=
      return iterator(collections.pluck(index));=0A=
    });=0A=
  }=0A=
=0A=
  function size() {=0A=
    return this.toArray().length;=0A=
  }=0A=
=0A=
  function inspect() {=0A=
    return '#<Enumerable:' + this.toArray().inspect() + '>';=0A=
  }=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
  return {=0A=
    each:       each,=0A=
    eachSlice:  eachSlice,=0A=
    all:        all,=0A=
    every:      all,=0A=
    any:        any,=0A=
    some:       any,=0A=
    collect:    collect,=0A=
    map:        collect,=0A=
    detect:     detect,=0A=
    findAll:    findAll,=0A=
    select:     findAll,=0A=
    filter:     findAll,=0A=
    grep:       grep,=0A=
    include:    include,=0A=
    member:     include,=0A=
    inGroupsOf: inGroupsOf,=0A=
    inject:     inject,=0A=
    invoke:     invoke,=0A=
    max:        max,=0A=
    min:        min,=0A=
    partition:  partition,=0A=
    pluck:      pluck,=0A=
    reject:     reject,=0A=
    sortBy:     sortBy,=0A=
    toArray:    toArray,=0A=
    entries:    toArray,=0A=
    zip:        zip,=0A=
    size:       size,=0A=
    inspect:    inspect,=0A=
    find:       detect=0A=
  };=0A=
})();=0A=
function $A(iterable) {=0A=
  if (!iterable) return [];=0A=
  if ('toArray' in Object(iterable)) return iterable.toArray();=0A=
  var length =3D iterable.length || 0, results =3D new Array(length);=0A=
  while (length--) results[length] =3D iterable[length];=0A=
  return results;=0A=
}=0A=
=0A=
function $w(string) {=0A=
  if (!Object.isString(string)) return [];=0A=
  string =3D string.strip();=0A=
  return string ? string.split(/\s+/) : [];=0A=
}=0A=
=0A=
Array.from =3D $A;=0A=
=0A=
=0A=
(function() {=0A=
  var arrayProto =3D Array.prototype,=0A=
      slice =3D arrayProto.slice,=0A=
      _each =3D arrayProto.forEach; // use native browser JS 1.6 =
implementation if available=0A=
=0A=
  function each(iterator) {=0A=
    for (var i =3D 0, length =3D this.length; i < length; i++)=0A=
      iterator(this[i]);=0A=
  }=0A=
  if (!_each) _each =3D each;=0A=
=0A=
  function clear() {=0A=
    this.length =3D 0;=0A=
    return this;=0A=
  }=0A=
=0A=
  function first() {=0A=
    return this[0];=0A=
  }=0A=
=0A=
  function last() {=0A=
    return this[this.length - 1];=0A=
  }=0A=
=0A=
  function compact() {=0A=
    return this.select(function(value) {=0A=
      return value !=3D null;=0A=
    });=0A=
  }=0A=
=0A=
  function flatten() {=0A=
    return this.inject([], function(array, value) {=0A=
      if (Object.isArray(value))=0A=
        return array.concat(value.flatten());=0A=
      array.push(value);=0A=
      return array;=0A=
    });=0A=
  }=0A=
=0A=
  function without() {=0A=
    var values =3D slice.call(arguments, 0);=0A=
    return this.select(function(value) {=0A=
      return !values.include(value);=0A=
    });=0A=
  }=0A=
=0A=
  function reverse(inline) {=0A=
    return (inline !=3D=3D false ? this : this.toArray())._reverse();=0A=
  }=0A=
=0A=
  function uniq(sorted) {=0A=
    return this.inject([], function(array, value, index) {=0A=
      if (0 =3D=3D index || (sorted ? array.last() !=3D value : =
!array.include(value)))=0A=
        array.push(value);=0A=
      return array;=0A=
    });=0A=
  }=0A=
=0A=
  function intersect(array) {=0A=
    return this.uniq().findAll(function(item) {=0A=
      return array.detect(function(value) { return item =3D=3D=3D value =
});=0A=
    });=0A=
  }=0A=
=0A=
=0A=
  function clone() {=0A=
    return slice.call(this, 0);=0A=
  }=0A=
=0A=
  function size() {=0A=
    return this.length;=0A=
  }=0A=
=0A=
  function inspect() {=0A=
    return '[' + this.map(Object.inspect).join(', ') + ']';=0A=
  }=0A=
=0A=
  function toJSON() {=0A=
    var results =3D [];=0A=
    this.each(function(object) {=0A=
      var value =3D Object.toJSON(object);=0A=
      if (!Object.isUndefined(value)) results.push(value);=0A=
    });=0A=
    return '[' + results.join(', ') + ']';=0A=
  }=0A=
=0A=
  function indexOf(item, i) {=0A=
    i || (i =3D 0);=0A=
    var length =3D this.length;=0A=
    if (i < 0) i =3D length + i;=0A=
    for (; i < length; i++)=0A=
      if (this[i] =3D=3D=3D item) return i;=0A=
    return -1;=0A=
  }=0A=
=0A=
  function lastIndexOf(item, i) {=0A=
    i =3D isNaN(i) ? this.length : (i < 0 ? this.length + i : i) + 1;=0A=
    var n =3D this.slice(0, i).reverse().indexOf(item);=0A=
    return (n < 0) ? n : i - n - 1;=0A=
  }=0A=
=0A=
  function concat() {=0A=
    var array =3D slice.call(this, 0), item;=0A=
    for (var i =3D 0, length =3D arguments.length; i < length; i++) {=0A=
      item =3D arguments[i];=0A=
      if (Object.isArray(item) && !('callee' in item)) {=0A=
        for (var j =3D 0, arrayLength =3D item.length; j < arrayLength; =
j++)=0A=
          array.push(item[j]);=0A=
      } else {=0A=
        array.push(item);=0A=
      }=0A=
    }=0A=
    return array;=0A=
  }=0A=
=0A=
  Object.extend(arrayProto, Enumerable);=0A=
=0A=
  if (!arrayProto._reverse)=0A=
    arrayProto._reverse =3D arrayProto.reverse;=0A=
=0A=
  Object.extend(arrayProto, {=0A=
    _each:     _each,=0A=
    clear:     clear,=0A=
    first:     first,=0A=
    last:      last,=0A=
    compact:   compact,=0A=
    flatten:   flatten,=0A=
    without:   without,=0A=
    reverse:   reverse,=0A=
    uniq:      uniq,=0A=
    intersect: intersect,=0A=
    clone:     clone,=0A=
    toArray:   clone,=0A=
    size:      size,=0A=
    inspect:   inspect,=0A=
    toJSON:    toJSON=0A=
  });=0A=
=0A=
  var CONCAT_ARGUMENTS_BUGGY =3D (function() {=0A=
    return [].concat(arguments)[0][0] !=3D=3D 1;=0A=
  })(1,2)=0A=
=0A=
  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat =3D concat;=0A=
=0A=
  if (!arrayProto.indexOf) arrayProto.indexOf =3D indexOf;=0A=
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf =3D lastIndexOf;=0A=
})();=0A=
function $H(object) {=0A=
  return new Hash(object);=0A=
};=0A=
=0A=
var Hash =3D Class.create(Enumerable, (function() {=0A=
  function initialize(object) {=0A=
    this._object =3D Object.isHash(object) ? object.toObject() : =
Object.clone(object);=0A=
  }=0A=
=0A=
  function _each(iterator) {=0A=
    for (var key in this._object) {=0A=
      var value =3D this._object[key], pair =3D [key, value];=0A=
      pair.key =3D key;=0A=
      pair.value =3D value;=0A=
      iterator(pair);=0A=
    }=0A=
  }=0A=
=0A=
  function set(key, value) {=0A=
    return this._object[key] =3D value;=0A=
  }=0A=
=0A=
  function get(key) {=0A=
    if (this._object[key] !=3D=3D Object.prototype[key])=0A=
      return this._object[key];=0A=
  }=0A=
=0A=
  function unset(key) {=0A=
    var value =3D this._object[key];=0A=
    delete this._object[key];=0A=
    return value;=0A=
  }=0A=
=0A=
  function toObject() {=0A=
    return Object.clone(this._object);=0A=
  }=0A=
=0A=
  function keys() {=0A=
    return this.pluck('key');=0A=
  }=0A=
=0A=
  function values() {=0A=
    return this.pluck('value');=0A=
  }=0A=
=0A=
  function index(value) {=0A=
    var match =3D this.detect(function(pair) {=0A=
      return pair.value =3D=3D=3D value;=0A=
    });=0A=
    return match && match.key;=0A=
  }=0A=
=0A=
  function merge(object) {=0A=
    return this.clone().update(object);=0A=
  }=0A=
=0A=
  function update(object) {=0A=
    return new Hash(object).inject(this, function(result, pair) {=0A=
      result.set(pair.key, pair.value);=0A=
      return result;=0A=
    });=0A=
  }=0A=
=0A=
  function toQueryPair(key, value) {=0A=
    if (Object.isUndefined(value)) return key;=0A=
    return key + '=3D' + encodeURIComponent(String.interpret(value));=0A=
  }=0A=
=0A=
  function toQueryString() {=0A=
    return this.inject([], function(results, pair) {=0A=
      var key =3D encodeURIComponent(pair.key), values =3D pair.value;=0A=
=0A=
      if (values && typeof values =3D=3D 'object') {=0A=
        if (Object.isArray(values))=0A=
          return results.concat(values.map(toQueryPair.curry(key)));=0A=
      } else results.push(toQueryPair(key, values));=0A=
      return results;=0A=
    }).join('&');=0A=
  }=0A=
=0A=
  function inspect() {=0A=
    return '#<Hash:{' + this.map(function(pair) {=0A=
      return pair.map(Object.inspect).join(': ');=0A=
    }).join(', ') + '}>';=0A=
  }=0A=
=0A=
  function toJSON() {=0A=
    return Object.toJSON(this.toObject());=0A=
  }=0A=
=0A=
  function clone() {=0A=
    return new Hash(this);=0A=
  }=0A=
=0A=
  return {=0A=
    initialize:             initialize,=0A=
    _each:                  _each,=0A=
    set:                    set,=0A=
    get:                    get,=0A=
    unset:                  unset,=0A=
    toObject:               toObject,=0A=
    toTemplateReplacements: toObject,=0A=
    keys:                   keys,=0A=
    values:                 values,=0A=
    index:                  index,=0A=
    merge:                  merge,=0A=
    update:                 update,=0A=
    toQueryString:          toQueryString,=0A=
    inspect:                inspect,=0A=
    toJSON:                 toJSON,=0A=
    clone:                  clone=0A=
  };=0A=
})());=0A=
=0A=
Hash.from =3D $H;=0A=
Object.extend(Number.prototype, (function() {=0A=
  function toColorPart() {=0A=
    return this.toPaddedString(2, 16);=0A=
  }=0A=
=0A=
  function succ() {=0A=
    return this + 1;=0A=
  }=0A=
=0A=
  function times(iterator, context) {=0A=
    $R(0, this, true).each(iterator, context);=0A=
    return this;=0A=
  }=0A=
=0A=
  function toPaddedString(length, radix) {=0A=
    var string =3D this.toString(radix || 10);=0A=
    return '0'.times(length - string.length) + string;=0A=
  }=0A=
=0A=
  function toJSON() {=0A=
    return isFinite(this) ? this.toString() : 'null';=0A=
  }=0A=
=0A=
  function abs() {=0A=
    return Math.abs(this);=0A=
  }=0A=
=0A=
  function round() {=0A=
    return Math.round(this);=0A=
  }=0A=
=0A=
  function ceil() {=0A=
    return Math.ceil(this);=0A=
  }=0A=
=0A=
  function floor() {=0A=
    return Math.floor(this);=0A=
  }=0A=
=0A=
  return {=0A=
    toColorPart:    toColorPart,=0A=
    succ:           succ,=0A=
    times:          times,=0A=
    toPaddedString: toPaddedString,=0A=
    toJSON:         toJSON,=0A=
    abs:            abs,=0A=
    round:          round,=0A=
    ceil:           ceil,=0A=
    floor:          floor=0A=
  };=0A=
})());=0A=
=0A=
function $R(start, end, exclusive) {=0A=
  return new ObjectRange(start, end, exclusive);=0A=
}=0A=
=0A=
var ObjectRange =3D Class.create(Enumerable, (function() {=0A=
  function initialize(start, end, exclusive) {=0A=
    this.start =3D start;=0A=
    this.end =3D end;=0A=
    this.exclusive =3D exclusive;=0A=
  }=0A=
=0A=
  function _each(iterator) {=0A=
    var value =3D this.start;=0A=
    while (this.include(value)) {=0A=
      iterator(value);=0A=
      value =3D value.succ();=0A=
    }=0A=
  }=0A=
=0A=
  function include(value) {=0A=
    if (value < this.start)=0A=
      return false;=0A=
    if (this.exclusive)=0A=
      return value < this.end;=0A=
    return value <=3D this.end;=0A=
  }=0A=
=0A=
  return {=0A=
    initialize: initialize,=0A=
    _each:      _each,=0A=
    include:    include=0A=
  };=0A=
})());=0A=
=0A=
=0A=
=0A=
var Ajax =3D {=0A=
  getTransport: function() {=0A=
    return Try.these(=0A=
      function() {return new XMLHttpRequest()},=0A=
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},=0A=
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}=0A=
    ) || false;=0A=
  },=0A=
=0A=
  activeRequestCount: 0=0A=
};=0A=
=0A=
Ajax.Responders =3D {=0A=
  responders: [],=0A=
=0A=
  _each: function(iterator) {=0A=
    this.responders._each(iterator);=0A=
  },=0A=
=0A=
  register: function(responder) {=0A=
    if (!this.include(responder))=0A=
      this.responders.push(responder);=0A=
  },=0A=
=0A=
  unregister: function(responder) {=0A=
    this.responders =3D this.responders.without(responder);=0A=
  },=0A=
=0A=
  dispatch: function(callback, request, transport, json) {=0A=
    this.each(function(responder) {=0A=
      if (Object.isFunction(responder[callback])) {=0A=
        try {=0A=
          responder[callback].apply(responder, [request, transport, =
json]);=0A=
        } catch (e) { }=0A=
      }=0A=
    });=0A=
  }=0A=
};=0A=
=0A=
Object.extend(Ajax.Responders, Enumerable);=0A=
=0A=
Ajax.Responders.register({=0A=
  onCreate:   function() { Ajax.activeRequestCount++ },=0A=
  onComplete: function() { Ajax.activeRequestCount-- }=0A=
});=0A=
Ajax.Base =3D Class.create({=0A=
  initialize: function(options) {=0A=
    this.options =3D {=0A=
      method:       'post',=0A=
      asynchronous: true,=0A=
      contentType:  'application/x-www-form-urlencoded',=0A=
      encoding:     'UTF-8',=0A=
      parameters:   '',=0A=
      evalJSON:     true,=0A=
      evalJS:       true=0A=
    };=0A=
    Object.extend(this.options, options || { });=0A=
=0A=
    this.options.method =3D this.options.method.toLowerCase();=0A=
=0A=
    if (Object.isString(this.options.parameters))=0A=
      this.options.parameters =3D =
this.options.parameters.toQueryParams();=0A=
    else if (Object.isHash(this.options.parameters))=0A=
      this.options.parameters =3D this.options.parameters.toObject();=0A=
  }=0A=
});=0A=
Ajax.Request =3D Class.create(Ajax.Base, {=0A=
  _complete: false,=0A=
=0A=
  initialize: function($super, url, options) {=0A=
    $super(options);=0A=
    this.transport =3D Ajax.getTransport();=0A=
    this.request(url);=0A=
  },=0A=
=0A=
  request: function(url) {=0A=
    this.url =3D url;=0A=
    this.method =3D this.options.method;=0A=
    var params =3D Object.clone(this.options.parameters);=0A=
=0A=
    if (!['get', 'post'].include(this.method)) {=0A=
      params['_method'] =3D this.method;=0A=
      this.method =3D 'post';=0A=
    }=0A=
=0A=
    this.parameters =3D params;=0A=
=0A=
    if (params =3D Object.toQueryString(params)) {=0A=
      if (this.method =3D=3D 'get')=0A=
        this.url +=3D (this.url.include('?') ? '&' : '?') + params;=0A=
      else if (/Konqueror|Safari|KHTML/.test(navigator.userAgent))=0A=
        params +=3D '&_=3D';=0A=
    }=0A=
=0A=
    try {=0A=
      var response =3D new Ajax.Response(this);=0A=
      if (this.options.onCreate) this.options.onCreate(response);=0A=
      Ajax.Responders.dispatch('onCreate', this, response);=0A=
=0A=
      this.transport.open(this.method.toUpperCase(), this.url,=0A=
        this.options.asynchronous);=0A=
=0A=
      if (this.options.asynchronous) =
this.respondToReadyState.bind(this).defer(1);=0A=
=0A=
      this.transport.onreadystatechange =3D =
this.onStateChange.bind(this);=0A=
      this.setRequestHeaders();=0A=
=0A=
      this.body =3D this.method =3D=3D 'post' ? (this.options.postBody =
|| params) : null;=0A=
      this.transport.send(this.body);=0A=
=0A=
      /* Force Firefox to handle ready state 4 for synchronous requests =
*/=0A=
      if (!this.options.asynchronous && this.transport.overrideMimeType)=0A=
        this.onStateChange();=0A=
=0A=
    }=0A=
    catch (e) {=0A=
      this.dispatchException(e);=0A=
    }=0A=
  },=0A=
=0A=
  onStateChange: function() {=0A=
    var readyState =3D this.transport.readyState;=0A=
    if (readyState > 1 && !((readyState =3D=3D 4) && this._complete))=0A=
      this.respondToReadyState(this.transport.readyState);=0A=
  },=0A=
=0A=
  setRequestHeaders: function() {=0A=
    var headers =3D {=0A=
      'X-Requested-With': 'XMLHttpRequest',=0A=
      'X-Prototype-Version': Prototype.Version,=0A=
      'Accept': 'text/javascript, text/html, application/xml, text/xml, =
*/*'=0A=
    };=0A=
=0A=
    if (this.method =3D=3D 'post') {=0A=
      headers['Content-type'] =3D this.options.contentType +=0A=
        (this.options.encoding ? '; charset=3D' + this.options.encoding =
: '');=0A=
=0A=
      /* Force "Connection: close" for older Mozilla browsers to work=0A=
       * around a bug where XMLHttpRequest sends an incorrect=0A=
       * Content-length header. See Mozilla Bugzilla #246651.=0A=
       */=0A=
      if (this.transport.overrideMimeType &&=0A=
          (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0,2005])[1] < =
2005)=0A=
            headers['Connection'] =3D 'close';=0A=
    }=0A=
=0A=
    if (typeof this.options.requestHeaders =3D=3D 'object') {=0A=
      var extras =3D this.options.requestHeaders;=0A=
=0A=
      if (Object.isFunction(extras.push))=0A=
        for (var i =3D 0, length =3D extras.length; i < length; i +=3D 2)=0A=
          headers[extras[i]] =3D extras[i+1];=0A=
      else=0A=
        $H(extras).each(function(pair) { headers[pair.key] =3D =
pair.value });=0A=
    }=0A=
=0A=
    for (var name in headers)=0A=
      this.transport.setRequestHeader(name, headers[name]);=0A=
  },=0A=
=0A=
  success: function() {=0A=
    var status =3D this.getStatus();=0A=
    return !status || (status >=3D 200 && status < 300);=0A=
  },=0A=
=0A=
  getStatus: function() {=0A=
    try {=0A=
      return this.transport.status || 0;=0A=
    } catch (e) { return 0 }=0A=
  },=0A=
=0A=
  respondToReadyState: function(readyState) {=0A=
    var state =3D Ajax.Request.Events[readyState], response =3D new =
Ajax.Response(this);=0A=
=0A=
    if (state =3D=3D 'Complete') {=0A=
      try {=0A=
        this._complete =3D true;=0A=
        (this.options['on' + response.status]=0A=
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]=0A=
         || Prototype.emptyFunction)(response, response.headerJSON);=0A=
      } catch (e) {=0A=
        this.dispatchException(e);=0A=
      }=0A=
=0A=
      var contentType =3D response.getHeader('Content-type');=0A=
      if (this.options.evalJS =3D=3D 'force'=0A=
          || (this.options.evalJS && this.isSameOrigin() && contentType=0A=
          && =
contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s=
*$/i)))=0A=
        this.evalResponse();=0A=
    }=0A=
=0A=
    try {=0A=
      (this.options['on' + state] || Prototype.emptyFunction)(response, =
response.headerJSON);=0A=
      Ajax.Responders.dispatch('on' + state, this, response, =
response.headerJSON);=0A=
    } catch (e) {=0A=
      this.dispatchException(e);=0A=
    }=0A=
=0A=
    if (state =3D=3D 'Complete') {=0A=
      this.transport.onreadystatechange =3D Prototype.emptyFunction;=0A=
    }=0A=
  },=0A=
=0A=
  isSameOrigin: function() {=0A=
    var m =3D this.url.match(/^\s*https?:\/\/[^\/]*/);=0A=
    return !m || (m[0] =3D=3D =
'#{protocol}//#{domain}#{port}'.interpolate({=0A=
      protocol: location.protocol,=0A=
      domain: document.domain,=0A=
      port: location.port ? ':' + location.port : ''=0A=
    }));=0A=
  },=0A=
=0A=
  getHeader: function(name) {=0A=
    try {=0A=
      return this.transport.getResponseHeader(name) || null;=0A=
    } catch (e) { return null; }=0A=
  },=0A=
=0A=
  evalResponse: function() {=0A=
    try {=0A=
      return eval((this.transport.responseText || '').unfilterJSON());=0A=
    } catch (e) {=0A=
      this.dispatchException(e);=0A=
    }=0A=
  },=0A=
=0A=
  dispatchException: function(exception) {=0A=
    (this.options.onException || Prototype.emptyFunction)(this, =
exception);=0A=
    Ajax.Responders.dispatch('onException', this, exception);=0A=
  }=0A=
});=0A=
=0A=
Ajax.Request.Events =3D=0A=
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
=0A=
Ajax.Response =3D Class.create({=0A=
  initialize: function(request){=0A=
    this.request =3D request;=0A=
    var transport  =3D this.transport  =3D request.transport,=0A=
        readyState =3D this.readyState =3D transport.readyState;=0A=
=0A=
    if((readyState > 2 && !Prototype.Browser.IE) || readyState =3D=3D 4) =
{=0A=
      this.status       =3D this.getStatus();=0A=
      this.statusText   =3D this.getStatusText();=0A=
      this.responseText =3D String.interpret(transport.responseText);=0A=
      this.headerJSON   =3D this._getHeaderJSON();=0A=
    }=0A=
=0A=
    if(readyState =3D=3D 4) {=0A=
      var xml =3D transport.responseXML;=0A=
      this.responseXML  =3D Object.isUndefined(xml) ? null : xml;=0A=
      this.responseJSON =3D this._getResponseJSON();=0A=
    }=0A=
  },=0A=
=0A=
  status:      0,=0A=
=0A=
  statusText: '',=0A=
=0A=
  getStatus: Ajax.Request.prototype.getStatus,=0A=
=0A=
  getStatusText: function() {=0A=
    try {=0A=
      return this.transport.statusText || '';=0A=
    } catch (e) { return '' }=0A=
  },=0A=
=0A=
  getHeader: Ajax.Request.prototype.getHeader,=0A=
=0A=
  getAllHeaders: function() {=0A=
    try {=0A=
      return this.getAllResponseHeaders();=0A=
    } catch (e) { return null }=0A=
  },=0A=
=0A=
  getResponseHeader: function(name) {=0A=
    return this.transport.getResponseHeader(name);=0A=
  },=0A=
=0A=
  getAllResponseHeaders: function() {=0A=
    return this.transport.getAllResponseHeaders();=0A=
  },=0A=
=0A=
  _getHeaderJSON: function() {=0A=
    var json =3D this.getHeader('X-JSON');=0A=
    if (!json) return null;=0A=
    json =3D decodeURIComponent(escape(json));=0A=
    try {=0A=
      return json.evalJSON(this.request.options.sanitizeJSON ||=0A=
        !this.request.isSameOrigin());=0A=
    } catch (e) {=0A=
      this.request.dispatchException(e);=0A=
    }=0A=
  },=0A=
=0A=
  _getResponseJSON: function() {=0A=
    var options =3D this.request.options;=0A=
    if (!options.evalJSON || (options.evalJSON !=3D 'force' &&=0A=
      !(this.getHeader('Content-type') || =
'').include('application/json')) ||=0A=
        this.responseText.blank())=0A=
          return null;=0A=
    try {=0A=
      return this.responseText.evalJSON(options.sanitizeJSON ||=0A=
        !this.request.isSameOrigin());=0A=
    } catch (e) {=0A=
      this.request.dispatchException(e);=0A=
    }=0A=
  }=0A=
});=0A=
=0A=
Ajax.Updater =3D Class.create(Ajax.Request, {=0A=
  initialize: function($super, container, url, options) {=0A=
    this.container =3D {=0A=
      success: (container.success || container),=0A=
      failure: (container.failure || (container.success ? null : =
container))=0A=
    };=0A=
=0A=
    options =3D Object.clone(options);=0A=
    var onComplete =3D options.onComplete;=0A=
    options.onComplete =3D (function(response, json) {=0A=
      this.updateContent(response.responseText);=0A=
      if (Object.isFunction(onComplete)) onComplete(response, json);=0A=
    }).bind(this);=0A=
=0A=
    $super(url, options);=0A=
  },=0A=
=0A=
  updateContent: function(responseText) {=0A=
    var receiver =3D this.container[this.success() ? 'success' : =
'failure'],=0A=
        options =3D this.options;=0A=
=0A=
    if (!options.evalScripts) responseText =3D =
responseText.stripScripts();=0A=
=0A=
    if (receiver =3D $(receiver)) {=0A=
      if (options.insertion) {=0A=
        if (Object.isString(options.insertion)) {=0A=
          var insertion =3D { }; insertion[options.insertion] =3D =
responseText;=0A=
          receiver.insert(insertion);=0A=
        }=0A=
        else options.insertion(receiver, responseText);=0A=
      }=0A=
      else receiver.update(responseText);=0A=
    }=0A=
  }=0A=
});=0A=
=0A=
Ajax.PeriodicalUpdater =3D Class.create(Ajax.Base, {=0A=
  initialize: function($super, container, url, options) {=0A=
    $super(options);=0A=
    this.onComplete =3D this.options.onComplete;=0A=
=0A=
    this.frequency =3D (this.options.frequency || 2);=0A=
    this.decay =3D (this.options.decay || 1);=0A=
=0A=
    this.updater =3D { };=0A=
    this.container =3D container;=0A=
    this.url =3D url;=0A=
=0A=
    this.start();=0A=
  },=0A=
=0A=
  start: function() {=0A=
    this.options.onComplete =3D this.updateComplete.bind(this);=0A=
    this.onTimerEvent();=0A=
  },=0A=
=0A=
  stop: function() {=0A=
    this.updater.options.onComplete =3D undefined;=0A=
    clearTimeout(this.timer);=0A=
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);=0A=
  },=0A=
=0A=
  updateComplete: function(response) {=0A=
    if (this.options.decay) {=0A=
      this.decay =3D (response.responseText =3D=3D this.lastText ?=0A=
        this.decay * this.options.decay : 1);=0A=
=0A=
      this.lastText =3D response.responseText;=0A=
    }=0A=
    this.timer =3D this.onTimerEvent.bind(this).delay(this.decay * =
this.frequency);=0A=
  },=0A=
=0A=
  onTimerEvent: function() {=0A=
    this.updater =3D new Ajax.Updater(this.container, this.url, =
this.options);=0A=
  }=0A=
});=0A=
=0A=
=0A=
=0A=
function $(element) {=0A=
  if (arguments.length > 1) {=0A=
    for (var i =3D 0, elements =3D [], length =3D arguments.length; i < =
length; i++)=0A=
      elements.push($(arguments[i]));=0A=
    return elements;=0A=
  }=0A=
  if (Object.isString(element))=0A=
    element =3D document.getElementById(element);=0A=
  return Element.extend(element);=0A=
}=0A=
=0A=
if (Prototype.BrowserFeatures.XPath) {=0A=
  document._getElementsByXPath =3D function(expression, parentElement) {=0A=
    var results =3D [];=0A=
    var query =3D document.evaluate(expression, $(parentElement) || =
document,=0A=
      null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);=0A=
    for (var i =3D 0, length =3D query.snapshotLength; i < length; i++)=0A=
      results.push(Element.extend(query.snapshotItem(i)));=0A=
    return results;=0A=
  };=0A=
}=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
if (!window.Node) var Node =3D { };=0A=
=0A=
if (!Node.ELEMENT_NODE) {=0A=
  Object.extend(Node, {=0A=
    ELEMENT_NODE: 1,=0A=
    ATTRIBUTE_NODE: 2,=0A=
    TEXT_NODE: 3,=0A=
    CDATA_SECTION_NODE: 4,=0A=
    ENTITY_REFERENCE_NODE: 5,=0A=
    ENTITY_NODE: 6,=0A=
    PROCESSING_INSTRUCTION_NODE: 7,=0A=
    COMMENT_NODE: 8,=0A=
    DOCUMENT_NODE: 9,=0A=
    DOCUMENT_TYPE_NODE: 10,=0A=
    DOCUMENT_FRAGMENT_NODE: 11,=0A=
    NOTATION_NODE: 12=0A=
  });=0A=
}=0A=
=0A=
=0A=
(function(global) {=0A=
=0A=
  var SETATTRIBUTE_IGNORES_NAME =3D (function(){=0A=
    var elForm =3D document.createElement("form");=0A=
    var elInput =3D document.createElement("input");=0A=
    var root =3D document.documentElement;=0A=
    elInput.setAttribute("name", "test");=0A=
    elForm.appendChild(elInput);=0A=
    root.appendChild(elForm);=0A=
    var isBuggy =3D elForm.elements=0A=
      ? (typeof elForm.elements.test =3D=3D "undefined")=0A=
      : null;=0A=
    root.removeChild(elForm);=0A=
    elForm =3D elInput =3D null;=0A=
    return isBuggy;=0A=
  })();=0A=
=0A=
  var element =3D global.Element;=0A=
  global.Element =3D function(tagName, attributes) {=0A=
    attributes =3D attributes || { };=0A=
    tagName =3D tagName.toLowerCase();=0A=
    var cache =3D Element.cache;=0A=
    if (SETATTRIBUTE_IGNORES_NAME && attributes.name) {=0A=
      tagName =3D '<' + tagName + ' name=3D"' + attributes.name + '">';=0A=
      delete attributes.name;=0A=
      return Element.writeAttribute(document.createElement(tagName), =
attributes);=0A=
    }=0A=
    if (!cache[tagName]) cache[tagName] =3D =
Element.extend(document.createElement(tagName));=0A=
    return Element.writeAttribute(cache[tagName].cloneNode(false), =
attributes);=0A=
  };=0A=
  Object.extend(global.Element, element || { });=0A=
  if (element) global.Element.prototype =3D element.prototype;=0A=
})(this);=0A=
=0A=
Element.cache =3D { };=0A=
Element.idCounter =3D 1;=0A=
=0A=
Element.Methods =3D {=0A=
  visible: function(element) {=0A=
    return $(element).style.display !=3D 'none';=0A=
  },=0A=
=0A=
  toggle: function(element) {=0A=
    element =3D $(element);=0A=
    Element[Element.visible(element) ? 'hide' : 'show'](element);=0A=
    return element;=0A=
  },=0A=
=0A=
=0A=
  hide: function(element) {=0A=
    element =3D $(element);=0A=
    element.style.display =3D 'none';=0A=
    return element;=0A=
  },=0A=
=0A=
  show: function(element) {=0A=
    element =3D $(element);=0A=
    element.style.display =3D '';=0A=
    return element;=0A=
  },=0A=
=0A=
  remove: function(element) {=0A=
    element =3D $(element);=0A=
    element.parentNode.removeChild(element);=0A=
    return element;=0A=
  },=0A=
=0A=
  update: (function(){=0A=
=0A=
    var SELECT_ELEMENT_INNERHTML_BUGGY =3D (function(){=0A=
      var el =3D document.createElement("select"),=0A=
          isBuggy =3D true;=0A=
      el.innerHTML =3D "<option value=3D\"test\">test</option>";=0A=
      if (el.options && el.options[0]) {=0A=
        isBuggy =3D el.options[0].nodeName.toUpperCase() !=3D=3D =
"OPTION";=0A=
      }=0A=
      el =3D null;=0A=
      return isBuggy;=0A=
    })();=0A=
=0A=
    var TABLE_ELEMENT_INNERHTML_BUGGY =3D (function(){=0A=
      try {=0A=
        var el =3D document.createElement("table");=0A=
        if (el && el.tBodies) {=0A=
          el.innerHTML =3D "<tbody><tr><td>test</td></tr></tbody>";=0A=
          var isBuggy =3D typeof el.tBodies[0] =3D=3D "undefined";=0A=
          el =3D null;=0A=
          return isBuggy;=0A=
        }=0A=
      } catch (e) {=0A=
        return true;=0A=
      }=0A=
    })();=0A=
=0A=
    var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING =3D (function () {=0A=
      var s =3D document.createElement("script"),=0A=
          isBuggy =3D false;=0A=
      try {=0A=
        s.appendChild(document.createTextNode(""));=0A=
        isBuggy =3D !s.firstChild ||=0A=
          s.firstChild && s.firstChild.nodeType !=3D=3D 3;=0A=
      } catch (e) {=0A=
        isBuggy =3D true;=0A=
      }=0A=
      s =3D null;=0A=
      return isBuggy;=0A=
    })();=0A=
=0A=
    function update(element, content) {=0A=
      element =3D $(element);=0A=
=0A=
      if (content && content.toElement)=0A=
        content =3D content.toElement();=0A=
=0A=
      if (Object.isElement(content))=0A=
        return element.update().insert(content);=0A=
=0A=
      content =3D Object.toHTML(content);=0A=
=0A=
      var tagName =3D element.tagName.toUpperCase();=0A=
=0A=
      if (tagName =3D=3D=3D 'SCRIPT' && =
SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {=0A=
        element.text =3D content;=0A=
        return element;=0A=
      }=0A=
=0A=
      if (SELECT_ELEMENT_INNERHTML_BUGGY || =
TABLE_ELEMENT_INNERHTML_BUGGY) {=0A=
        if (tagName in Element._insertionTranslations.tags) {=0A=
          while (element.firstChild) {=0A=
            element.removeChild(element.firstChild);=0A=
          }=0A=
          Element._getContentFromAnonymousElement(tagName, =
content.stripScripts())=0A=
            .each(function(node) {=0A=
              element.appendChild(node)=0A=
            });=0A=
        }=0A=
        else {=0A=
          element.innerHTML =3D content.stripScripts();=0A=
        }=0A=
      }=0A=
      else {=0A=
        element.innerHTML =3D content.stripScripts();=0A=
      }=0A=
=0A=
      content.evalScripts.bind(content).defer();=0A=
      return element;=0A=
    }=0A=
=0A=
    return update;=0A=
  })(),=0A=
=0A=
  replace: function(element, content) {=0A=
    element =3D $(element);=0A=
    if (content && content.toElement) content =3D content.toElement();=0A=
    else if (!Object.isElement(content)) {=0A=
      content =3D Object.toHTML(content);=0A=
      var range =3D element.ownerDocument.createRange();=0A=
      range.selectNode(element);=0A=
      content.evalScripts.bind(content).defer();=0A=
      content =3D range.createContextualFragment(content.stripScripts());=0A=
    }=0A=
    element.parentNode.replaceChild(content, element);=0A=
    return element;=0A=
  },=0A=
=0A=
  insert: function(element, insertions) {=0A=
    element =3D $(element);=0A=
=0A=
    if (Object.isString(insertions) || Object.isNumber(insertions) ||=0A=
        Object.isElement(insertions) || (insertions && =
(insertions.toElement || insertions.toHTML)))=0A=
          insertions =3D {bottom:insertions};=0A=
=0A=
    var content, insert, tagName, childNodes;=0A=
=0A=
    for (var position in insertions) {=0A=
      content  =3D insertions[position];=0A=
      position =3D position.toLowerCase();=0A=
      insert =3D Element._insertionTranslations[position];=0A=
=0A=
      if (content && content.toElement) content =3D content.toElement();=0A=
      if (Object.isElement(content)) {=0A=
        insert(element, content);=0A=
        continue;=0A=
      }=0A=
=0A=
      content =3D Object.toHTML(content);=0A=
=0A=
      tagName =3D ((position =3D=3D 'before' || position =3D=3D 'after')=0A=
        ? element.parentNode : element).tagName.toUpperCase();=0A=
=0A=
      childNodes =3D Element._getContentFromAnonymousElement(tagName, =
content.stripScripts());=0A=
=0A=
      if (position =3D=3D 'top' || position =3D=3D 'after') =
childNodes.reverse();=0A=
      childNodes.each(insert.curry(element));=0A=
=0A=
      content.evalScripts.bind(content).defer();=0A=
    }=0A=
=0A=
    return element;=0A=
  },=0A=
=0A=
  wrap: function(element, wrapper, attributes) {=0A=
    element =3D $(element);=0A=
    if (Object.isElement(wrapper))=0A=
      $(wrapper).writeAttribute(attributes || { });=0A=
    else if (Object.isString(wrapper)) wrapper =3D new Element(wrapper, =
attributes);=0A=
    else wrapper =3D new Element('div', wrapper);=0A=
    if (element.parentNode)=0A=
      element.parentNode.replaceChild(wrapper, element);=0A=
    wrapper.appendChild(element);=0A=
    return wrapper;=0A=
  },=0A=
=0A=
  inspect: function(element) {=0A=
    element =3D $(element);=0A=
    var result =3D '<' + element.tagName.toLowerCase();=0A=
    $H({'id': 'id', 'className': 'class'}).each(function(pair) {=0A=
      var property =3D pair.first(), attribute =3D pair.last();=0A=
      var value =3D (element[property] || '').toString();=0A=
      if (value) result +=3D ' ' + attribute + '=3D' + =
value.inspect(true);=0A=
    });=0A=
    return result + '>';=0A=
  },=0A=
=0A=
  recursivelyCollect: function(element, property) {=0A=
    element =3D $(element);=0A=
    var elements =3D [];=0A=
    while (element =3D element[property])=0A=
      if (element.nodeType =3D=3D 1)=0A=
        elements.push(Element.extend(element));=0A=
    return elements;=0A=
  },=0A=
=0A=
  ancestors: function(element) {=0A=
    return Element.recursivelyCollect(element, 'parentNode');=0A=
  },=0A=
=0A=
  descendants: function(element) {=0A=
    return Element.select(element, "*");=0A=
  },=0A=
=0A=
  firstDescendant: function(element) {=0A=
    element =3D $(element).firstChild;=0A=
    while (element && element.nodeType !=3D 1) element =3D =
element.nextSibling;=0A=
    return $(element);=0A=
  },=0A=
=0A=
  immediateDescendants: function(element) {=0A=
    if (!(element =3D $(element).firstChild)) return [];=0A=
    while (element && element.nodeType !=3D 1) element =3D =
element.nextSibling;=0A=
    if (element) return [element].concat($(element).nextSiblings());=0A=
    return [];=0A=
  },=0A=
=0A=
  previousSiblings: function(element) {=0A=
    return Element.recursivelyCollect(element, 'previousSibling');=0A=
  },=0A=
=0A=
  nextSiblings: function(element) {=0A=
    return Element.recursivelyCollect(element, 'nextSibling');=0A=
  },=0A=
=0A=
  siblings: function(element) {=0A=
    element =3D $(element);=0A=
    return Element.previousSiblings(element).reverse()=0A=
      .concat(Element.nextSiblings(element));=0A=
  },=0A=
=0A=
  match: function(element, selector) {=0A=
    if (Object.isString(selector))=0A=
      selector =3D new Selector(selector);=0A=
    return selector.match($(element));=0A=
  },=0A=
=0A=
  up: function(element, expression, index) {=0A=
    element =3D $(element);=0A=
    if (arguments.length =3D=3D 1) return $(element.parentNode);=0A=
    var ancestors =3D Element.ancestors(element);=0A=
    return Object.isNumber(expression) ? ancestors[expression] :=0A=
      Selector.findElement(ancestors, expression, index);=0A=
  },=0A=
=0A=
  down: function(element, expression, index) {=0A=
    element =3D $(element);=0A=
    if (arguments.length =3D=3D 1) return =
Element.firstDescendant(element);=0A=
    return Object.isNumber(expression) ? =
Element.descendants(element)[expression] :=0A=
      Element.select(element, expression)[index || 0];=0A=
  },=0A=
=0A=
  previous: function(element, expression, index) {=0A=
    element =3D $(element);=0A=
    if (arguments.length =3D=3D 1) return =
$(Selector.handlers.previousElementSibling(element));=0A=
    var previousSiblings =3D Element.previousSiblings(element);=0A=
    return Object.isNumber(expression) ? previousSiblings[expression] :=0A=
      Selector.findElement(previousSiblings, expression, index);=0A=
  },=0A=
=0A=
  next: function(element, expression, index) {=0A=
    element =3D $(element);=0A=
    if (arguments.length =3D=3D 1) return =
$(Selector.handlers.nextElementSibling(element));=0A=
    var nextSiblings =3D Element.nextSiblings(element);=0A=
    return Object.isNumber(expression) ? nextSiblings[expression] :=0A=
      Selector.findElement(nextSiblings, expression, index);=0A=
  },=0A=
=0A=
=0A=
  select: function(element) {=0A=
    var args =3D Array.prototype.slice.call(arguments, 1);=0A=
    return Selector.findChildElements(element, args);=0A=
  },=0A=
=0A=
  adjacent: function(element) {=0A=
    var args =3D Array.prototype.slice.call(arguments, 1);=0A=
    return Selector.findChildElements(element.parentNode, =
args).without(element);=0A=
  },=0A=
=0A=
  identify: function(element) {=0A=
    element =3D $(element);=0A=
    var id =3D Element.readAttribute(element, 'id');=0A=
    if (id) return id;=0A=
    do { id =3D 'anonymous_element_' + Element.idCounter++ } while =
($(id));=0A=
    Element.writeAttribute(element, 'id', id);=0A=
    return id;=0A=
  },=0A=
=0A=
  readAttribute: function(element, name) {=0A=
    element =3D $(element);=0A=
    if (Prototype.Browser.IE) {=0A=
      var t =3D Element._attributeTranslations.read;=0A=
      if (t.values[name]) return t.values[name](element, name);=0A=
      if (t.names[name]) name =3D t.names[name];=0A=
      if (name.include(':')) {=0A=
        return (!element.attributes || !element.attributes[name]) ? null =
:=0A=
         element.attributes[name].value;=0A=
      }=0A=
    }=0A=
    return element.getAttribute(name);=0A=
  },=0A=
=0A=
  writeAttribute: function(element, name, value) {=0A=
    element =3D $(element);=0A=
    var attributes =3D { }, t =3D Element._attributeTranslations.write;=0A=
=0A=
    if (typeof name =3D=3D 'object') attributes =3D name;=0A=
    else attributes[name] =3D Object.isUndefined(value) ? true : value;=0A=
=0A=
    for (var attr in attributes) {=0A=
      name =3D t.names[attr] || attr;=0A=
      value =3D attributes[attr];=0A=
      if (t.values[attr]) name =3D t.values[attr](element, value);=0A=
      if (value =3D=3D=3D false || value =3D=3D=3D null)=0A=
        element.removeAttribute(name);=0A=
      else if (value =3D=3D=3D true)=0A=
        element.setAttribute(name, name);=0A=
      else element.setAttribute(name, value);=0A=
    }=0A=
    return element;=0A=
  },=0A=
=0A=
  getHeight: function(element) {=0A=
    return Element.getDimensions(element).height;=0A=
  },=0A=
=0A=
  getWidth: function(element) {=0A=
    return Element.getDimensions(element).width;=0A=
  },=0A=
=0A=
  classNames: function(element) {=0A=
    return new Element.ClassNames(element);=0A=
  },=0A=
=0A=
  hasClassName: function(element, className) {=0A=
    if (!(element =3D $(element))) return;=0A=
    var elementClassName =3D element.className;=0A=
    return (elementClassName.length > 0 && (elementClassName =3D=3D =
className ||=0A=
      new RegExp("(^|\\s)" + className + =
"(\\s|$)").test(elementClassName)));=0A=
  },=0A=
=0A=
  addClassName: function(element, className) {=0A=
    if (!(element =3D $(element))) return;=0A=
    if (!Element.hasClassName(element, className))=0A=
      element.className +=3D (element.className ? ' ' : '') + className;=0A=
    return element;=0A=
  },=0A=
=0A=
  removeClassName: function(element, className) {=0A=
    if (!(element =3D $(element))) return;=0A=
    element.className =3D element.className.replace(=0A=
      new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();=0A=
    return element;=0A=
  },=0A=
=0A=
  toggleClassName: function(element, className) {=0A=
    if (!(element =3D $(element))) return;=0A=
    return Element[Element.hasClassName(element, className) ?=0A=
      'removeClassName' : 'addClassName'](element, className);=0A=
  },=0A=
=0A=
  cleanWhitespace: function(element) {=0A=
    element =3D $(element);=0A=
    var node =3D element.firstChild;=0A=
    while (node) {=0A=
      var nextNode =3D node.nextSibling;=0A=
      if (node.nodeType =3D=3D 3 && !/\S/.test(node.nodeValue))=0A=
        element.removeChild(node);=0A=
      node =3D nextNode;=0A=
    }=0A=
    return element;=0A=
  },=0A=
=0A=
  empty: function(element) {=0A=
    return $(element).innerHTML.blank();=0A=
  },=0A=
=0A=
  descendantOf: function(element, ancestor) {=0A=
    element =3D $(element), ancestor =3D $(ancestor);=0A=
=0A=
    if (element.compareDocumentPosition)=0A=
      return (element.compareDocumentPosition(ancestor) & 8) =3D=3D=3D 8;=0A=
=0A=
    if (ancestor.contains)=0A=
      return ancestor.contains(element) && ancestor !=3D=3D element;=0A=
=0A=
    while (element =3D element.parentNode)=0A=
      if (element =3D=3D ancestor) return true;=0A=
=0A=
    return false;=0A=
  },=0A=
=0A=
  scrollTo: function(element) {=0A=
    element =3D $(element);=0A=
    var pos =3D Element.cumulativeOffset(element);=0A=
    window.scrollTo(pos[0], pos[1]);=0A=
    return element;=0A=
  },=0A=
=0A=
  getStyle: function(element, style) {=0A=
    element =3D $(element);=0A=
    style =3D style =3D=3D 'float' ? 'cssFloat' : style.camelize();=0A=
    var value =3D element.style[style];=0A=
    if (!value || value =3D=3D 'auto') {=0A=
      var css =3D document.defaultView.getComputedStyle(element, null);=0A=
      value =3D css ? css[style] : null;=0A=
    }=0A=
    if (style =3D=3D 'opacity') return value ? parseFloat(value) : 1.0;=0A=
    return value =3D=3D 'auto' ? null : value;=0A=
  },=0A=
=0A=
  getOpacity: function(element) {=0A=
    return $(element).getStyle('opacity');=0A=
  },=0A=
=0A=
  setStyle: function(element, styles) {=0A=
    element =3D $(element);=0A=
    var elementStyle =3D element.style, match;=0A=
    if (Object.isString(styles)) {=0A=
      element.style.cssText +=3D ';' + styles;=0A=
      return styles.include('opacity') ?=0A=
        element.setOpacity(styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : =
element;=0A=
    }=0A=
    for (var property in styles)=0A=
      if (property =3D=3D 'opacity') =
element.setOpacity(styles[property]);=0A=
      else=0A=
        elementStyle[(property =3D=3D 'float' || property =3D=3D =
'cssFloat') ?=0A=
          (Object.isUndefined(elementStyle.styleFloat) ? 'cssFloat' : =
'styleFloat') :=0A=
            property] =3D styles[property];=0A=
=0A=
    return element;=0A=
  },=0A=
=0A=
  setOpacity: function(element, value) {=0A=
    element =3D $(element);=0A=
    element.style.opacity =3D (value =3D=3D 1 || value =3D=3D=3D '') ? =
'' :=0A=
      (value < 0.00001) ? 0 : value;=0A=
    return element;=0A=
  },=0A=
=0A=
  getDimensions: function(element) {=0A=
    element =3D $(element);=0A=
    var display =3D Element.getStyle(element, 'display');=0A=
    if (display !=3D 'none' && display !=3D null) // Safari bug=0A=
      return {width: element.offsetWidth, height: element.offsetHeight};=0A=
=0A=
    var els =3D element.style;=0A=
    var originalVisibility =3D els.visibility;=0A=
    var originalPosition =3D els.position;=0A=
    var originalDisplay =3D els.display;=0A=
    els.visibility =3D 'hidden';=0A=
    if (originalPosition !=3D 'fixed') // Switching fixed to absolute =
causes issues in Safari=0A=
      els.position =3D 'absolute';=0A=
    els.display =3D 'block';=0A=
    var originalWidth =3D element.clientWidth;=0A=
    var originalHeight =3D element.clientHeight;=0A=
    els.display =3D originalDisplay;=0A=
    els.position =3D originalPosition;=0A=
    els.visibility =3D originalVisibility;=0A=
    return {width: originalWidth, height: originalHeight};=0A=
  },=0A=
=0A=
  makePositioned: function(element) {=0A=
    element =3D $(element);=0A=
    var pos =3D Element.getStyle(element, 'position');=0A=
    if (pos =3D=3D 'static' || !pos) {=0A=
      element._madePositioned =3D true;=0A=
      element.style.position =3D 'relative';=0A=
      if (Prototype.Browser.Opera) {=0A=
        element.style.top =3D 0;=0A=
        element.style.left =3D 0;=0A=
      }=0A=
    }=0A=
    return element;=0A=
  },=0A=
=0A=
  undoPositioned: function(element) {=0A=
    element =3D $(element);=0A=
    if (element._madePositioned) {=0A=
      element._madePositioned =3D undefined;=0A=
      element.style.position =3D=0A=
        element.style.top =3D=0A=
        element.style.left =3D=0A=
        element.style.bottom =3D=0A=
        element.style.right =3D '';=0A=
    }=0A=
    return element;=0A=
  },=0A=
=0A=
  makeClipping: function(element) {=0A=
    element =3D $(element);=0A=
    if (element._overflow) return element;=0A=
    element._overflow =3D Element.getStyle(element, 'overflow') || =
'auto';=0A=
    if (element._overflow !=3D=3D 'hidden')=0A=
      element.style.overflow =3D 'hidden';=0A=
    return element;=0A=
  },=0A=
=0A=
  undoClipping: function(element) {=0A=
    element =3D $(element);=0A=
    if (!element._overflow) return element;=0A=
    element.style.overflow =3D element._overflow =3D=3D 'auto' ? '' : =
element._overflow;=0A=
    element._overflow =3D null;=0A=
    return element;=0A=
  },=0A=
=0A=
  cumulativeOffset: function(element) {=0A=
    var valueT =3D 0, valueL =3D 0;=0A=
    do {=0A=
      valueT +=3D element.offsetTop  || 0;=0A=
      valueL +=3D element.offsetLeft || 0;=0A=
      element =3D element.offsetParent;=0A=
    } while (element);=0A=
    return Element._returnOffset(valueL, valueT);=0A=
  },=0A=
=0A=
  positionedOffset: function(element) {=0A=
    var valueT =3D 0, valueL =3D 0;=0A=
    do {=0A=
      valueT +=3D element.offsetTop  || 0;=0A=
      valueL +=3D element.offsetLeft || 0;=0A=
      element =3D element.offsetParent;=0A=
      if (element) {=0A=
        if (element.tagName.toUpperCase() =3D=3D 'BODY') break;=0A=
        var p =3D Element.getStyle(element, 'position');=0A=
        if (p !=3D=3D 'static') break;=0A=
      }=0A=
    } while (element);=0A=
    return Element._returnOffset(valueL, valueT);=0A=
  },=0A=
=0A=
  absolutize: function(element) {=0A=
    element =3D $(element);=0A=
    if (Element.getStyle(element, 'position') =3D=3D 'absolute') return =
element;=0A=
=0A=
    var offsets =3D Element.positionedOffset(element);=0A=
    var top     =3D offsets[1];=0A=
    var left    =3D offsets[0];=0A=
    var width   =3D element.clientWidth;=0A=
    var height  =3D element.clientHeight;=0A=
=0A=
    element._originalLeft   =3D left - parseFloat(element.style.left  || =
0);=0A=
    element._originalTop    =3D top  - parseFloat(element.style.top || =
0);=0A=
    element._originalWidth  =3D element.style.width;=0A=
    element._originalHeight =3D element.style.height;=0A=
=0A=
    element.style.position =3D 'absolute';=0A=
    element.style.top    =3D top + 'px';=0A=
    element.style.left   =3D left + 'px';=0A=
    element.style.width  =3D width + 'px';=0A=
    element.style.height =3D height + 'px';=0A=
    return element;=0A=
  },=0A=
=0A=
  relativize: function(element) {=0A=
    element =3D $(element);=0A=
    if (Element.getStyle(element, 'position') =3D=3D 'relative') return =
element;=0A=
=0A=
    element.style.position =3D 'relative';=0A=
    var top  =3D parseFloat(element.style.top  || 0) - =
(element._originalTop || 0);=0A=
    var left =3D parseFloat(element.style.left || 0) - =
(element._originalLeft || 0);=0A=
=0A=
    element.style.top    =3D top + 'px';=0A=
    element.style.left   =3D left + 'px';=0A=
    element.style.height =3D element._originalHeight;=0A=
    element.style.width  =3D element._originalWidth;=0A=
    return element;=0A=
  },=0A=
=0A=
  cumulativeScrollOffset: function(element) {=0A=
    var valueT =3D 0, valueL =3D 0;=0A=
    do {=0A=
      valueT +=3D element.scrollTop  || 0;=0A=
      valueL +=3D element.scrollLeft || 0;=0A=
      element =3D element.parentNode;=0A=
    } while (element);=0A=
    return Element._returnOffset(valueL, valueT);=0A=
  },=0A=
=0A=
  getOffsetParent: function(element) {=0A=
    if (element.offsetParent) return $(element.offsetParent);=0A=
    if (element =3D=3D document.body) return $(element);=0A=
=0A=
    while ((element =3D element.parentNode) && element !=3D =
document.body)=0A=
      if (Element.getStyle(element, 'position') !=3D 'static')=0A=
        return $(element);=0A=
=0A=
    return $(document.body);=0A=
  },=0A=
=0A=
  viewportOffset: function(forElement) {=0A=
    var valueT =3D 0, valueL =3D 0;=0A=
=0A=
    var element =3D forElement;=0A=
    do {=0A=
      valueT +=3D element.offsetTop  || 0;=0A=
      valueL +=3D element.offsetLeft || 0;=0A=
=0A=
      if (element.offsetParent =3D=3D document.body &&=0A=
        Element.getStyle(element, 'position') =3D=3D 'absolute') break;=0A=
=0A=
    } while (element =3D element.offsetParent);=0A=
=0A=
    element =3D forElement;=0A=
    do {=0A=
      if (!Prototype.Browser.Opera || (element.tagName && =
(element.tagName.toUpperCase() =3D=3D 'BODY'))) {=0A=
        valueT -=3D element.scrollTop  || 0;=0A=
        valueL -=3D element.scrollLeft || 0;=0A=
      }=0A=
    } while (element =3D element.parentNode);=0A=
=0A=
    return Element._returnOffset(valueL, valueT);=0A=
  },=0A=
=0A=
  clonePosition: function(element, source) {=0A=
    var options =3D Object.extend({=0A=
      setLeft:    true,=0A=
      setTop:     true,=0A=
      setWidth:   true,=0A=
      setHeight:  true,=0A=
      offsetTop:  0,=0A=
      offsetLeft: 0=0A=
    }, arguments[2] || { });=0A=
=0A=
    source =3D $(source);=0A=
    var p =3D Element.viewportOffset(source);=0A=
=0A=
    element =3D $(element);=0A=
    var delta =3D [0, 0];=0A=
    var parent =3D null;=0A=
    if (Element.getStyle(element, 'position') =3D=3D 'absolute') {=0A=
      parent =3D Element.getOffsetParent(element);=0A=
      delta =3D Element.viewportOffset(parent);=0A=
    }=0A=
=0A=
    if (parent =3D=3D document.body) {=0A=
      delta[0] -=3D document.body.offsetLeft;=0A=
      delta[1] -=3D document.body.offsetTop;=0A=
    }=0A=
=0A=
    if (options.setLeft)   element.style.left  =3D (p[0] - delta[0] + =
options.offsetLeft) + 'px';=0A=
    if (options.setTop)    element.style.top   =3D (p[1] - delta[1] + =
options.offsetTop) + 'px';=0A=
    if (options.setWidth)  element.style.width =3D source.offsetWidth + =
'px';=0A=
    if (options.setHeight) element.style.height =3D source.offsetHeight =
+ 'px';=0A=
    return element;=0A=
  }=0A=
};=0A=
=0A=
Object.extend(Element.Methods, {=0A=
  getElementsBySelector: Element.Methods.select,=0A=
=0A=
  childElements: Element.Methods.immediateDescendants=0A=
});=0A=
=0A=
Element._attributeTranslations =3D {=0A=
  write: {=0A=
    names: {=0A=
      className: 'class',=0A=
      htmlFor:   'for'=0A=
    },=0A=
    values: { }=0A=
  }=0A=
};=0A=
=0A=
if (Prototype.Browser.Opera) {=0A=
  Element.Methods.getStyle =3D Element.Methods.getStyle.wrap(=0A=
    function(proceed, element, style) {=0A=
      switch (style) {=0A=
        case 'left': case 'top': case 'right': case 'bottom':=0A=
          if (proceed(element, 'position') =3D=3D=3D 'static') return =
null;=0A=
        case 'height': case 'width':=0A=
          if (!Element.visible(element)) return null;=0A=
=0A=
          var dim =3D parseInt(proceed(element, style), 10);=0A=
=0A=
          if (dim !=3D=3D element['offset' + style.capitalize()])=0A=
            return dim + 'px';=0A=
=0A=
          var properties;=0A=
          if (style =3D=3D=3D 'height') {=0A=
            properties =3D ['border-top-width', 'padding-top',=0A=
             'padding-bottom', 'border-bottom-width'];=0A=
          }=0A=
          else {=0A=
            properties =3D ['border-left-width', 'padding-left',=0A=
             'padding-right', 'border-right-width'];=0A=
          }=0A=
          return properties.inject(dim, function(memo, property) {=0A=
            var val =3D proceed(element, property);=0A=
            return val =3D=3D=3D null ? memo : memo - parseInt(val, 10);=0A=
          }) + 'px';=0A=
        default: return proceed(element, style);=0A=
      }=0A=
    }=0A=
  );=0A=
=0A=
  Element.Methods.readAttribute =3D Element.Methods.readAttribute.wrap(=0A=
    function(proceed, element, attribute) {=0A=
      if (attribute =3D=3D=3D 'title') return element.title;=0A=
      return proceed(element, attribute);=0A=
    }=0A=
  );=0A=
}=0A=
=0A=
else if (Prototype.Browser.IE) {=0A=
  Element.Methods.getOffsetParent =3D =
Element.Methods.getOffsetParent.wrap(=0A=
    function(proceed, element) {=0A=
      element =3D $(element);=0A=
      try { element.offsetParent }=0A=
      catch(e) { return $(document.body) }=0A=
      var position =3D element.getStyle('position');=0A=
      if (position !=3D=3D 'static') return proceed(element);=0A=
      element.setStyle({ position: 'relative' });=0A=
      var value =3D proceed(element);=0A=
      element.setStyle({ position: position });=0A=
      return value;=0A=
    }=0A=
  );=0A=
=0A=
  $w('positionedOffset viewportOffset').each(function(method) {=0A=
    Element.Methods[method] =3D Element.Methods[method].wrap(=0A=
      function(proceed, element) {=0A=
        element =3D $(element);=0A=
        try { element.offsetParent }=0A=
        catch(e) { return Element._returnOffset(0,0) }=0A=
        var position =3D element.getStyle('position');=0A=
        if (position !=3D=3D 'static') return proceed(element);=0A=
        var offsetParent =3D element.getOffsetParent();=0A=
        if (offsetParent && offsetParent.getStyle('position') =3D=3D=3D =
'fixed')=0A=
          offsetParent.setStyle({ zoom: 1 });=0A=
        element.setStyle({ position: 'relative' });=0A=
        var value =3D proceed(element);=0A=
        element.setStyle({ position: position });=0A=
        return value;=0A=
      }=0A=
    );=0A=
  });=0A=
=0A=
  Element.Methods.cumulativeOffset =3D =
Element.Methods.cumulativeOffset.wrap(=0A=
    function(proceed, element) {=0A=
      try { element.offsetParent }=0A=
      catch(e) { return Element._returnOffset(0,0) }=0A=
      return proceed(element);=0A=
    }=0A=
  );=0A=
=0A=
  Element.Methods.getStyle =3D function(element, style) {=0A=
    element =3D $(element);=0A=
    style =3D (style =3D=3D 'float' || style =3D=3D 'cssFloat') ? =
'styleFloat' : style.camelize();=0A=
    var value =3D element.style[style];=0A=
    if (!value && element.currentStyle) value =3D =
element.currentStyle[style];=0A=
=0A=
    if (style =3D=3D 'opacity') {=0A=
      if (value =3D (element.getStyle('filter') || =
'').match(/alpha\(opacity=3D(.*)\)/))=0A=
        if (value[1]) return parseFloat(value[1]) / 100;=0A=
      return 1.0;=0A=
    }=0A=
=0A=
    if (value =3D=3D 'auto') {=0A=
      if ((style =3D=3D 'width' || style =3D=3D 'height') && =
(element.getStyle('display') !=3D 'none'))=0A=
        return element['offset' + style.capitalize()] + 'px';=0A=
      return null;=0A=
    }=0A=
    return value;=0A=
  };=0A=
=0A=
  Element.Methods.setOpacity =3D function(element, value) {=0A=
    function stripAlpha(filter){=0A=
      return filter.replace(/alpha\([^\)]*\)/gi,'');=0A=
    }=0A=
    element =3D $(element);=0A=
    var currentStyle =3D element.currentStyle;=0A=
    if ((currentStyle && !currentStyle.hasLayout) ||=0A=
      (!currentStyle && element.style.zoom =3D=3D 'normal'))=0A=
        element.style.zoom =3D 1;=0A=
=0A=
    var filter =3D element.getStyle('filter'), style =3D element.style;=0A=
    if (value =3D=3D 1 || value =3D=3D=3D '') {=0A=
      (filter =3D stripAlpha(filter)) ?=0A=
        style.filter =3D filter : style.removeAttribute('filter');=0A=
      return element;=0A=
    } else if (value < 0.00001) value =3D 0;=0A=
    style.filter =3D stripAlpha(filter) +=0A=
      'alpha(opacity=3D' + (value * 100) + ')';=0A=
    return element;=0A=
  };=0A=
=0A=
  Element._attributeTranslations =3D (function(){=0A=
=0A=
    var classProp =3D 'className';=0A=
    var forProp =3D 'for';=0A=
=0A=
    var el =3D document.createElement('div');=0A=
=0A=
    el.setAttribute(classProp, 'x');=0A=
=0A=
    if (el.className !=3D=3D 'x') {=0A=
      el.setAttribute('class', 'x');=0A=
      if (el.className =3D=3D=3D 'x') {=0A=
        classProp =3D 'class';=0A=
      }=0A=
    }=0A=
    el =3D null;=0A=
=0A=
    el =3D document.createElement('label');=0A=
    el.setAttribute(forProp, 'x');=0A=
    if (el.htmlFor !=3D=3D 'x') {=0A=
      el.setAttribute('htmlFor', 'x');=0A=
      if (el.htmlFor =3D=3D=3D 'x') {=0A=
        forProp =3D 'htmlFor';=0A=
      }=0A=
    }=0A=
    el =3D null;=0A=
=0A=
    return {=0A=
      read: {=0A=
        names: {=0A=
          'class':      classProp,=0A=
          'className':  classProp,=0A=
          'for':        forProp,=0A=
          'htmlFor':    forProp=0A=
        },=0A=
        values: {=0A=
          _getAttr: function(element, attribute) {=0A=
            return element.getAttribute(attribute);=0A=
          },=0A=
          _getAttr2: function(element, attribute) {=0A=
            return element.getAttribute(attribute, 2);=0A=
          },=0A=
          _getAttrNode: function(element, attribute) {=0A=
            var node =3D element.getAttributeNode(attribute);=0A=
            return node ? node.value : "";=0A=
          },=0A=
          _getEv: (function(){=0A=
=0A=
            var el =3D document.createElement('div');=0A=
            el.onclick =3D Prototype.emptyFunction;=0A=
            var value =3D el.getAttribute('onclick');=0A=
            var f;=0A=
=0A=
            if (String(value).indexOf('{') > -1) {=0A=
              f =3D function(element, attribute) {=0A=
                attribute =3D element.getAttribute(attribute);=0A=
                if (!attribute) return null;=0A=
                attribute =3D attribute.toString();=0A=
                attribute =3D attribute.split('{')[1];=0A=
                attribute =3D attribute.split('}')[0];=0A=
                return attribute.strip();=0A=
              };=0A=
            }=0A=
            else if (value =3D=3D=3D '') {=0A=
              f =3D function(element, attribute) {=0A=
                attribute =3D element.getAttribute(attribute);=0A=
                if (!attribute) return null;=0A=
                return attribute.strip();=0A=
              };=0A=
            }=0A=
            el =3D null;=0A=
            return f;=0A=
          })(),=0A=
          _flag: function(element, attribute) {=0A=
            return $(element).hasAttribute(attribute) ? attribute : null;=0A=
          },=0A=
          style: function(element) {=0A=
            return element.style.cssText.toLowerCase();=0A=
          },=0A=
          title: function(element) {=0A=
            return element.title;=0A=
          }=0A=
        }=0A=
      }=0A=
    }=0A=
  })();=0A=
=0A=
  Element._attributeTranslations.write =3D {=0A=
    names: Object.extend({=0A=
      cellpadding: 'cellPadding',=0A=
      cellspacing: 'cellSpacing'=0A=
    }, Element._attributeTranslations.read.names),=0A=
    values: {=0A=
      checked: function(element, value) {=0A=
        element.checked =3D !!value;=0A=
      },=0A=
=0A=
      style: function(element, value) {=0A=
        element.style.cssText =3D value ? value : '';=0A=
      }=0A=
    }=0A=
  };=0A=
=0A=
  Element._attributeTranslations.has =3D {};=0A=
=0A=
  $w('colSpan rowSpan vAlign dateTime accessKey tabIndex ' +=0A=
      'encType maxLength readOnly longDesc =
frameBorder').each(function(attr) {=0A=
    Element._attributeTranslations.write.names[attr.toLowerCase()] =3D =
attr;=0A=
    Element._attributeTranslations.has[attr.toLowerCase()] =3D attr;=0A=
  });=0A=
=0A=
  (function(v) {=0A=
    Object.extend(v, {=0A=
      href:        v._getAttr2,=0A=
      src:         v._getAttr2,=0A=
      type:        v._getAttr,=0A=
      action:      v._getAttrNode,=0A=
      disabled:    v._flag,=0A=
      checked:     v._flag,=0A=
      readonly:    v._flag,=0A=
      multiple:    v._flag,=0A=
      onload:      v._getEv,=0A=
      onunload:    v._getEv,=0A=
      onclick:     v._getEv,=0A=
      ondblclick:  v._getEv,=0A=
      onmousedown: v._getEv,=0A=
      onmouseup:   v._getEv,=0A=
      onmouseover: v._getEv,=0A=
      onmousemove: v._getEv,=0A=
      onmouseout:  v._getEv,=0A=
      onfocus:     v._getEv,=0A=
      onblur:      v._getEv,=0A=
      onkeypress:  v._getEv,=0A=
      onkeydown:   v._getEv,=0A=
      onkeyup:     v._getEv,=0A=
      onsubmit:    v._getEv,=0A=
      onreset:     v._getEv,=0A=
      onselect:    v._getEv,=0A=
      onchange:    v._getEv=0A=
    });=0A=
  })(Element._attributeTranslations.read.values);=0A=
=0A=
  if (Prototype.BrowserFeatures.ElementExtensions) {=0A=
    (function() {=0A=
      function _descendants(element) {=0A=
        var nodes =3D element.getElementsByTagName('*'), results =3D [];=0A=
        for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
          if (node.tagName !=3D=3D "!") // Filter out comment nodes.=0A=
            results.push(node);=0A=
        return results;=0A=
      }=0A=
=0A=
      Element.Methods.down =3D function(element, expression, index) {=0A=
        element =3D $(element);=0A=
        if (arguments.length =3D=3D 1) return element.firstDescendant();=0A=
        return Object.isNumber(expression) ? =
_descendants(element)[expression] :=0A=
          Element.select(element, expression)[index || 0];=0A=
      }=0A=
    })();=0A=
  }=0A=
=0A=
}=0A=
=0A=
else if (Prototype.Browser.Gecko && =
/rv:1\.8\.0/.test(navigator.userAgent)) {=0A=
  Element.Methods.setOpacity =3D function(element, value) {=0A=
    element =3D $(element);=0A=
    element.style.opacity =3D (value =3D=3D 1) ? 0.999999 :=0A=
      (value =3D=3D=3D '') ? '' : (value < 0.00001) ? 0 : value;=0A=
    return element;=0A=
  };=0A=
}=0A=
=0A=
else if (Prototype.Browser.WebKit) {=0A=
  Element.Methods.setOpacity =3D function(element, value) {=0A=
    element =3D $(element);=0A=
    element.style.opacity =3D (value =3D=3D 1 || value =3D=3D=3D '') ? =
'' :=0A=
      (value < 0.00001) ? 0 : value;=0A=
=0A=
    if (value =3D=3D 1)=0A=
      if(element.tagName.toUpperCase() =3D=3D 'IMG' && element.width) {=0A=
        element.width++; element.width--;=0A=
      } else try {=0A=
        var n =3D document.createTextNode(' ');=0A=
        element.appendChild(n);=0A=
        element.removeChild(n);=0A=
      } catch (e) { }=0A=
=0A=
    return element;=0A=
  };=0A=
=0A=
  Element.Methods.cumulativeOffset =3D function(element) {=0A=
    var valueT =3D 0, valueL =3D 0;=0A=
    do {=0A=
      valueT +=3D element.offsetTop  || 0;=0A=
      valueL +=3D element.offsetLeft || 0;=0A=
      if (element.offsetParent =3D=3D document.body)=0A=
        if (Element.getStyle(element, 'position') =3D=3D 'absolute') =
break;=0A=
=0A=
      element =3D element.offsetParent;=0A=
    } while (element);=0A=
=0A=
    return Element._returnOffset(valueL, valueT);=0A=
  };=0A=
}=0A=
=0A=
if ('outerHTML' in document.documentElement) {=0A=
  Element.Methods.replace =3D function(element, content) {=0A=
    element =3D $(element);=0A=
=0A=
    if (content && content.toElement) content =3D content.toElement();=0A=
    if (Object.isElement(content)) {=0A=
      element.parentNode.replaceChild(content, element);=0A=
      return element;=0A=
    }=0A=
=0A=
    content =3D Object.toHTML(content);=0A=
    var parent =3D element.parentNode, tagName =3D =
parent.tagName.toUpperCase();=0A=
=0A=
    if (Element._insertionTranslations.tags[tagName]) {=0A=
      var nextSibling =3D element.next();=0A=
      var fragments =3D Element._getContentFromAnonymousElement(tagName, =
content.stripScripts());=0A=
      parent.removeChild(element);=0A=
      if (nextSibling)=0A=
        fragments.each(function(node) { parent.insertBefore(node, =
nextSibling) });=0A=
      else=0A=
        fragments.each(function(node) { parent.appendChild(node) });=0A=
    }=0A=
    else element.outerHTML =3D content.stripScripts();=0A=
=0A=
    content.evalScripts.bind(content).defer();=0A=
    return element;=0A=
  };=0A=
}=0A=
=0A=
Element._returnOffset =3D function(l, t) {=0A=
  var result =3D [l, t];=0A=
  result.left =3D l;=0A=
  result.top =3D t;=0A=
  return result;=0A=
};=0A=
=0A=
Element._getContentFromAnonymousElement =3D function(tagName, html) {=0A=
  var div =3D new Element('div'), t =3D =
Element._insertionTranslations.tags[tagName];=0A=
  if (t) {=0A=
    div.innerHTML =3D t[0] + html + t[1];=0A=
    t[2].times(function() { div =3D div.firstChild });=0A=
  } else div.innerHTML =3D html;=0A=
  return $A(div.childNodes);=0A=
};=0A=
=0A=
Element._insertionTranslations =3D {=0A=
  before: function(element, node) {=0A=
    element.parentNode.insertBefore(node, element);=0A=
  },=0A=
  top: function(element, node) {=0A=
    element.insertBefore(node, element.firstChild);=0A=
  },=0A=
  bottom: function(element, node) {=0A=
    element.appendChild(node);=0A=
  },=0A=
  after: function(element, node) {=0A=
    element.parentNode.insertBefore(node, element.nextSibling);=0A=
  },=0A=
  tags: {=0A=
    TABLE:  ['<table>',                '</table>',                   1],=0A=
    TBODY:  ['<table><tbody>',         '</tbody></table>',           2],=0A=
    TR:     ['<table><tbody><tr>',     '</tr></tbody></table>',      3],=0A=
    TD:     ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],=0A=
    SELECT: ['<select>',               '</select>',                  1]=0A=
  }=0A=
};=0A=
=0A=
(function() {=0A=
  var tags =3D Element._insertionTranslations.tags;=0A=
  Object.extend(tags, {=0A=
    THEAD: tags.TBODY,=0A=
    TFOOT: tags.TBODY,=0A=
    TH:    tags.TD=0A=
  });=0A=
})();=0A=
=0A=
Element.Methods.Simulated =3D {=0A=
  hasAttribute: function(element, attribute) {=0A=
    attribute =3D Element._attributeTranslations.has[attribute] || =
attribute;=0A=
    var node =3D $(element).getAttributeNode(attribute);=0A=
    return !!(node && node.specified);=0A=
  }=0A=
};=0A=
=0A=
Element.Methods.ByTag =3D { };=0A=
=0A=
Object.extend(Element, Element.Methods);=0A=
=0A=
(function(div) {=0A=
=0A=
  if (!Prototype.BrowserFeatures.ElementExtensions && div['__proto__']) {=0A=
    window.HTMLElement =3D { };=0A=
    window.HTMLElement.prototype =3D div['__proto__'];=0A=
    Prototype.BrowserFeatures.ElementExtensions =3D true;=0A=
  }=0A=
=0A=
  div =3D null;=0A=
=0A=
})(document.createElement('div'))=0A=
=0A=
Element.extend =3D (function() {=0A=
=0A=
  function checkDeficiency(tagName) {=0A=
    if (typeof window.Element !=3D 'undefined') {=0A=
      var proto =3D window.Element.prototype;=0A=
      if (proto) {=0A=
        var id =3D '_' + (Math.random()+'').slice(2);=0A=
        var el =3D document.createElement(tagName);=0A=
        proto[id] =3D 'x';=0A=
        var isBuggy =3D (el[id] !=3D=3D 'x');=0A=
        delete proto[id];=0A=
        el =3D null;=0A=
        return isBuggy;=0A=
      }=0A=
    }=0A=
    return false;=0A=
  }=0A=
=0A=
  function extendElementWith(element, methods) {=0A=
    for (var property in methods) {=0A=
      var value =3D methods[property];=0A=
      if (Object.isFunction(value) && !(property in element))=0A=
        element[property] =3D value.methodize();=0A=
    }=0A=
  }=0A=
=0A=
  var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY =3D checkDeficiency('object');=0A=
=0A=
  if (Prototype.BrowserFeatures.SpecificElementExtensions) {=0A=
    if (HTMLOBJECTELEMENT_PROTOTYPE_BUGGY) {=0A=
      return function(element) {=0A=
        if (element && typeof element._extendedByPrototype =3D=3D =
'undefined') {=0A=
          var t =3D element.tagName;=0A=
          if (t && (/^(?:object|applet|embed)$/i.test(t))) {=0A=
            extendElementWith(element, Element.Methods);=0A=
            extendElementWith(element, Element.Methods.Simulated);=0A=
            extendElementWith(element, =
Element.Methods.ByTag[t.toUpperCase()]);=0A=
          }=0A=
        }=0A=
        return element;=0A=
      }=0A=
    }=0A=
    return Prototype.K;=0A=
  }=0A=
=0A=
  var Methods =3D { }, ByTag =3D Element.Methods.ByTag;=0A=
=0A=
  var extend =3D Object.extend(function(element) {=0A=
    if (!element || typeof element._extendedByPrototype !=3D 'undefined' =
||=0A=
        element.nodeType !=3D 1 || element =3D=3D window) return element;=0A=
=0A=
    var methods =3D Object.clone(Methods),=0A=
        tagName =3D element.tagName.toUpperCase();=0A=
=0A=
    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);=0A=
=0A=
    extendElementWith(element, methods);=0A=
=0A=
    element._extendedByPrototype =3D Prototype.emptyFunction;=0A=
    return element;=0A=
=0A=
  }, {=0A=
    refresh: function() {=0A=
      if (!Prototype.BrowserFeatures.ElementExtensions) {=0A=
        Object.extend(Methods, Element.Methods);=0A=
        Object.extend(Methods, Element.Methods.Simulated);=0A=
      }=0A=
    }=0A=
  });=0A=
=0A=
  extend.refresh();=0A=
  return extend;=0A=
})();=0A=
=0A=
Element.hasAttribute =3D function(element, attribute) {=0A=
  if (element.hasAttribute) return element.hasAttribute(attribute);=0A=
  return Element.Methods.Simulated.hasAttribute(element, attribute);=0A=
};=0A=
=0A=
Element.addMethods =3D function(methods) {=0A=
  var F =3D Prototype.BrowserFeatures, T =3D Element.Methods.ByTag;=0A=
=0A=
  if (!methods) {=0A=
    Object.extend(Form, Form.Methods);=0A=
    Object.extend(Form.Element, Form.Element.Methods);=0A=
    Object.extend(Element.Methods.ByTag, {=0A=
      "FORM":     Object.clone(Form.Methods),=0A=
      "INPUT":    Object.clone(Form.Element.Methods),=0A=
      "SELECT":   Object.clone(Form.Element.Methods),=0A=
      "TEXTAREA": Object.clone(Form.Element.Methods)=0A=
    });=0A=
  }=0A=
=0A=
  if (arguments.length =3D=3D 2) {=0A=
    var tagName =3D methods;=0A=
    methods =3D arguments[1];=0A=
  }=0A=
=0A=
  if (!tagName) Object.extend(Element.Methods, methods || { });=0A=
  else {=0A=
    if (Object.isArray(tagName)) tagName.each(extend);=0A=
    else extend(tagName);=0A=
  }=0A=
=0A=
  function extend(tagName) {=0A=
    tagName =3D tagName.toUpperCase();=0A=
    if (!Element.Methods.ByTag[tagName])=0A=
      Element.Methods.ByTag[tagName] =3D { };=0A=
    Object.extend(Element.Methods.ByTag[tagName], methods);=0A=
  }=0A=
=0A=
  function copy(methods, destination, onlyIfAbsent) {=0A=
    onlyIfAbsent =3D onlyIfAbsent || false;=0A=
    for (var property in methods) {=0A=
      var value =3D methods[property];=0A=
      if (!Object.isFunction(value)) continue;=0A=
      if (!onlyIfAbsent || !(property in destination))=0A=
        destination[property] =3D value.methodize();=0A=
    }=0A=
  }=0A=
=0A=
  function findDOMClass(tagName) {=0A=
    var klass;=0A=
    var trans =3D {=0A=
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",=0A=
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": =
"DList",=0A=
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": =
"Heading",=0A=
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",=0A=
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", =
"CAPTION":=0A=
      "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":=0A=
      "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", =
"TR":=0A=
      "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":=0A=
      "FrameSet", "IFRAME": "IFrame"=0A=
    };=0A=
    if (trans[tagName]) klass =3D 'HTML' + trans[tagName] + 'Element';=0A=
    if (window[klass]) return window[klass];=0A=
    klass =3D 'HTML' + tagName + 'Element';=0A=
    if (window[klass]) return window[klass];=0A=
    klass =3D 'HTML' + tagName.capitalize() + 'Element';=0A=
    if (window[klass]) return window[klass];=0A=
=0A=
    var element =3D document.createElement(tagName);=0A=
    var proto =3D element['__proto__'] || element.constructor.prototype;=0A=
    element =3D null;=0A=
    return proto;=0A=
  }=0A=
=0A=
  var elementPrototype =3D window.HTMLElement ? HTMLElement.prototype :=0A=
   Element.prototype;=0A=
=0A=
  if (F.ElementExtensions) {=0A=
    copy(Element.Methods, elementPrototype);=0A=
    copy(Element.Methods.Simulated, elementPrototype, true);=0A=
  }=0A=
=0A=
  if (F.SpecificElementExtensions) {=0A=
    for (var tag in Element.Methods.ByTag) {=0A=
      var klass =3D findDOMClass(tag);=0A=
      if (Object.isUndefined(klass)) continue;=0A=
      copy(T[tag], klass.prototype);=0A=
    }=0A=
  }=0A=
=0A=
  Object.extend(Element, Element.Methods);=0A=
  delete Element.ByTag;=0A=
=0A=
  if (Element.extend.refresh) Element.extend.refresh();=0A=
  Element.cache =3D { };=0A=
};=0A=
=0A=
=0A=
document.viewport =3D {=0A=
=0A=
  getDimensions: function() {=0A=
    return { width: this.getWidth(), height: this.getHeight() };=0A=
  },=0A=
=0A=
  getScrollOffsets: function() {=0A=
    return Element._returnOffset(=0A=
      window.pageXOffset || document.documentElement.scrollLeft || =
document.body.scrollLeft,=0A=
      window.pageYOffset || document.documentElement.scrollTop  || =
document.body.scrollTop);=0A=
  }=0A=
};=0A=
=0A=
(function(viewport) {=0A=
  var B =3D Prototype.Browser, doc =3D document, element, property =3D =
{};=0A=
=0A=
  function getRootElement() {=0A=
    if (B.WebKit && !doc.evaluate)=0A=
      return document;=0A=
=0A=
    if (B.Opera && window.parseFloat(window.opera.version()) < 9.5)=0A=
      return document.body;=0A=
=0A=
    return document.documentElement;=0A=
  }=0A=
=0A=
  function define(D) {=0A=
    if (!element) element =3D getRootElement();=0A=
=0A=
    property[D] =3D 'client' + D;=0A=
=0A=
    viewport['get' + D] =3D function() { return element[property[D]] };=0A=
    return viewport['get' + D]();=0A=
  }=0A=
=0A=
  viewport.getWidth  =3D define.curry('Width');=0A=
=0A=
  viewport.getHeight =3D define.curry('Height');=0A=
})(document.viewport);=0A=
=0A=
=0A=
Element.Storage =3D {=0A=
  UID: 1=0A=
};=0A=
=0A=
Element.addMethods({=0A=
  getStorage: function(element) {=0A=
    if (!(element =3D $(element))) return;=0A=
=0A=
    var uid;=0A=
    if (element =3D=3D=3D window) {=0A=
      uid =3D 0;=0A=
    } else {=0A=
      if (typeof element._prototypeUID =3D=3D=3D "undefined")=0A=
        element._prototypeUID =3D [Element.Storage.UID++];=0A=
      uid =3D element._prototypeUID[0];=0A=
    }=0A=
=0A=
    if (!Element.Storage[uid])=0A=
      Element.Storage[uid] =3D $H();=0A=
=0A=
    return Element.Storage[uid];=0A=
  },=0A=
=0A=
  store: function(element, key, value) {=0A=
    if (!(element =3D $(element))) return;=0A=
=0A=
    if (arguments.length =3D=3D=3D 2) {=0A=
      Element.getStorage(element).update(key);=0A=
    } else {=0A=
      Element.getStorage(element).set(key, value);=0A=
    }=0A=
=0A=
    return element;=0A=
  },=0A=
=0A=
  retrieve: function(element, key, defaultValue) {=0A=
    if (!(element =3D $(element))) return;=0A=
    var hash =3D Element.getStorage(element), value =3D hash.get(key);=0A=
=0A=
    if (Object.isUndefined(value)) {=0A=
      hash.set(key, defaultValue);=0A=
      value =3D defaultValue;=0A=
    }=0A=
=0A=
    return value;=0A=
  },=0A=
=0A=
  clone: function(element, deep) {=0A=
    if (!(element =3D $(element))) return;=0A=
    var clone =3D element.cloneNode(deep);=0A=
    clone._prototypeUID =3D void 0;=0A=
    if (deep) {=0A=
      var descendants =3D Element.select(clone, '*'),=0A=
          i =3D descendants.length;=0A=
      while (i--) {=0A=
        descendants[i]._prototypeUID =3D void 0;=0A=
      }=0A=
    }=0A=
    return Element.extend(clone);=0A=
  }=0A=
});=0A=
/* Portions of the Selector class are derived from Jack Slocum's =
DomQuery,=0A=
 * part of YUI-Ext version 0.40, distributed under the terms of an =
MIT-style=0A=
 * license.  Please see http://www.yui-ext.com/ for more information. */=0A=
=0A=
var Selector =3D Class.create({=0A=
  initialize: function(expression) {=0A=
    this.expression =3D expression.strip();=0A=
=0A=
    if (this.shouldUseSelectorsAPI()) {=0A=
      this.mode =3D 'selectorsAPI';=0A=
    } else if (this.shouldUseXPath()) {=0A=
      this.mode =3D 'xpath';=0A=
      this.compileXPathMatcher();=0A=
    } else {=0A=
      this.mode =3D "normal";=0A=
      this.compileMatcher();=0A=
    }=0A=
=0A=
  },=0A=
=0A=
  shouldUseXPath: (function() {=0A=
=0A=
    var IS_DESCENDANT_SELECTOR_BUGGY =3D (function(){=0A=
      var isBuggy =3D false;=0A=
      if (document.evaluate && window.XPathResult) {=0A=
        var el =3D document.createElement('div');=0A=
        el.innerHTML =3D =
'<ul><li></li></ul><div><ul><li></li></ul></div>';=0A=
=0A=
        var xpath =3D ".//*[local-name()=3D'ul' or local-name()=3D'UL']" =
+=0A=
          "//*[local-name()=3D'li' or local-name()=3D'LI']";=0A=
=0A=
        var result =3D document.evaluate(xpath, el, null,=0A=
          XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);=0A=
=0A=
        isBuggy =3D (result.snapshotLength !=3D=3D 2);=0A=
        el =3D null;=0A=
      }=0A=
      return isBuggy;=0A=
    })();=0A=
=0A=
    return function() {=0A=
      if (!Prototype.BrowserFeatures.XPath) return false;=0A=
=0A=
      var e =3D this.expression;=0A=
=0A=
      if (Prototype.Browser.WebKit &&=0A=
       (e.include("-of-type") || e.include(":empty")))=0A=
        return false;=0A=
=0A=
      if ((/(\[[\w-]*?:|:checked)/).test(e))=0A=
        return false;=0A=
=0A=
      if (IS_DESCENDANT_SELECTOR_BUGGY) return false;=0A=
=0A=
      return true;=0A=
    }=0A=
=0A=
  })(),=0A=
=0A=
  shouldUseSelectorsAPI: function() {=0A=
    if (!Prototype.BrowserFeatures.SelectorsAPI) return false;=0A=
=0A=
    if (Selector.CASE_INSENSITIVE_CLASS_NAMES) return false;=0A=
=0A=
    if (!Selector._div) Selector._div =3D new Element('div');=0A=
=0A=
    try {=0A=
      Selector._div.querySelector(this.expression);=0A=
    } catch(e) {=0A=
      return false;=0A=
    }=0A=
=0A=
    return true;=0A=
  },=0A=
=0A=
  compileMatcher: function() {=0A=
    var e =3D this.expression, ps =3D Selector.patterns, h =3D =
Selector.handlers,=0A=
        c =3D Selector.criteria, le, p, m, len =3D ps.length, name;=0A=
=0A=
    if (Selector._cache[e]) {=0A=
      this.matcher =3D Selector._cache[e];=0A=
      return;=0A=
    }=0A=
=0A=
    this.matcher =3D ["this.matcher =3D function(root) {",=0A=
                    "var r =3D root, h =3D Selector.handlers, c =3D =
false, n;"];=0A=
=0A=
    while (e && le !=3D e && (/\S/).test(e)) {=0A=
      le =3D e;=0A=
      for (var i =3D 0; i<len; i++) {=0A=
        p =3D ps[i].re;=0A=
        name =3D ps[i].name;=0A=
        if (m =3D e.match(p)) {=0A=
          this.matcher.push(Object.isFunction(c[name]) ? c[name](m) :=0A=
            new Template(c[name]).evaluate(m));=0A=
          e =3D e.replace(m[0], '');=0A=
          break;=0A=
        }=0A=
      }=0A=
    }=0A=
=0A=
    this.matcher.push("return h.unique(n);\n}");=0A=
    eval(this.matcher.join('\n'));=0A=
    Selector._cache[this.expression] =3D this.matcher;=0A=
  },=0A=
=0A=
  compileXPathMatcher: function() {=0A=
    var e =3D this.expression, ps =3D Selector.patterns,=0A=
        x =3D Selector.xpath, le, m, len =3D ps.length, name;=0A=
=0A=
    if (Selector._cache[e]) {=0A=
      this.xpath =3D Selector._cache[e]; return;=0A=
    }=0A=
=0A=
    this.matcher =3D ['.//*'];=0A=
    while (e && le !=3D e && (/\S/).test(e)) {=0A=
      le =3D e;=0A=
      for (var i =3D 0; i<len; i++) {=0A=
        name =3D ps[i].name;=0A=
        if (m =3D e.match(ps[i].re)) {=0A=
          this.matcher.push(Object.isFunction(x[name]) ? x[name](m) :=0A=
            new Template(x[name]).evaluate(m));=0A=
          e =3D e.replace(m[0], '');=0A=
          break;=0A=
        }=0A=
      }=0A=
    }=0A=
=0A=
    this.xpath =3D this.matcher.join('');=0A=
    Selector._cache[this.expression] =3D this.xpath;=0A=
  },=0A=
=0A=
  findElements: function(root) {=0A=
    root =3D root || document;=0A=
    var e =3D this.expression, results;=0A=
=0A=
    switch (this.mode) {=0A=
      case 'selectorsAPI':=0A=
        if (root !=3D=3D document) {=0A=
          var oldId =3D root.id, id =3D $(root).identify();=0A=
          id =3D id.replace(/([\.:])/g, "\\$1");=0A=
          e =3D "#" + id + " " + e;=0A=
        }=0A=
=0A=
        results =3D $A(root.querySelectorAll(e)).map(Element.extend);=0A=
        root.id =3D oldId;=0A=
=0A=
        return results;=0A=
      case 'xpath':=0A=
        return document._getElementsByXPath(this.xpath, root);=0A=
      default:=0A=
       return this.matcher(root);=0A=
    }=0A=
  },=0A=
=0A=
  match: function(element) {=0A=
    this.tokens =3D [];=0A=
=0A=
    var e =3D this.expression, ps =3D Selector.patterns, as =3D =
Selector.assertions;=0A=
    var le, p, m, len =3D ps.length, name;=0A=
=0A=
    while (e && le !=3D=3D e && (/\S/).test(e)) {=0A=
      le =3D e;=0A=
      for (var i =3D 0; i<len; i++) {=0A=
        p =3D ps[i].re;=0A=
        name =3D ps[i].name;=0A=
        if (m =3D e.match(p)) {=0A=
          if (as[name]) {=0A=
            this.tokens.push([name, Object.clone(m)]);=0A=
            e =3D e.replace(m[0], '');=0A=
          } else {=0A=
            return this.findElements(document).include(element);=0A=
          }=0A=
        }=0A=
      }=0A=
    }=0A=
=0A=
    var match =3D true, name, matches;=0A=
    for (var i =3D 0, token; token =3D this.tokens[i]; i++) {=0A=
      name =3D token[0], matches =3D token[1];=0A=
      if (!Selector.assertions[name](element, matches)) {=0A=
        match =3D false; break;=0A=
      }=0A=
    }=0A=
=0A=
    return match;=0A=
  },=0A=
=0A=
  toString: function() {=0A=
    return this.expression;=0A=
  },=0A=
=0A=
  inspect: function() {=0A=
    return "#<Selector:" + this.expression.inspect() + ">";=0A=
  }=0A=
});=0A=
=0A=
if (Prototype.BrowserFeatures.SelectorsAPI &&=0A=
 document.compatMode =3D=3D=3D 'BackCompat') {=0A=
  Selector.CASE_INSENSITIVE_CLASS_NAMES =3D (function(){=0A=
    var div =3D document.createElement('div'),=0A=
     span =3D document.createElement('span');=0A=
=0A=
    div.id =3D "prototype_test_id";=0A=
    span.className =3D 'Test';=0A=
    div.appendChild(span);=0A=
    var isIgnored =3D (div.querySelector('#prototype_test_id .test') =
!=3D=3D null);=0A=
    div =3D span =3D null;=0A=
    return isIgnored;=0A=
  })();=0A=
}=0A=
=0A=
Object.extend(Selector, {=0A=
  _cache: { },=0A=
=0A=
  xpath: {=0A=
    descendant:   "//*",=0A=
    child:        "/*",=0A=
    adjacent:     "/following-sibling::*[1]",=0A=
    laterSibling: '/following-sibling::*',=0A=
    tagName:      function(m) {=0A=
      if (m[1] =3D=3D '*') return '';=0A=
      return "[local-name()=3D'" + m[1].toLowerCase() +=0A=
             "' or local-name()=3D'" + m[1].toUpperCase() + "']";=0A=
    },=0A=
    className:    "[contains(concat(' ', @class, ' '), ' #{1} ')]",=0A=
    id:           "[@id=3D'#{1}']",=0A=
    attrPresence: function(m) {=0A=
      m[1] =3D m[1].toLowerCase();=0A=
      return new Template("[@#{1}]").evaluate(m);=0A=
    },=0A=
    attr: function(m) {=0A=
      m[1] =3D m[1].toLowerCase();=0A=
      m[3] =3D m[5] || m[6];=0A=
      return new Template(Selector.xpath.operators[m[2]]).evaluate(m);=0A=
    },=0A=
    pseudo: function(m) {=0A=
      var h =3D Selector.xpath.pseudos[m[1]];=0A=
      if (!h) return '';=0A=
      if (Object.isFunction(h)) return h(m);=0A=
      return new Template(Selector.xpath.pseudos[m[1]]).evaluate(m);=0A=
    },=0A=
    operators: {=0A=
      '=3D':  "[@#{1}=3D'#{3}']",=0A=
      '!=3D': "[@#{1}!=3D'#{3}']",=0A=
      '^=3D': "[starts-with(@#{1}, '#{3}')]",=0A=
      '$=3D': "[substring(@#{1}, (string-length(@#{1}) - =
string-length('#{3}') + 1))=3D'#{3}']",=0A=
      '*=3D': "[contains(@#{1}, '#{3}')]",=0A=
      '~=3D': "[contains(concat(' ', @#{1}, ' '), ' #{3} ')]",=0A=
      '|=3D': "[contains(concat('-', @#{1}, '-'), '-#{3}-')]"=0A=
    },=0A=
    pseudos: {=0A=
      'first-child': '[not(preceding-sibling::*)]',=0A=
      'last-child':  '[not(following-sibling::*)]',=0A=
      'only-child':  '[not(preceding-sibling::* or =
following-sibling::*)]',=0A=
      'empty':       "[count(*) =3D 0 and (count(text()) =3D 0)]",=0A=
      'checked':     "[@checked]",=0A=
      'disabled':    "[(@disabled) and (@type!=3D'hidden')]",=0A=
      'enabled':     "[not(@disabled) and (@type!=3D'hidden')]",=0A=
      'not': function(m) {=0A=
        var e =3D m[6], p =3D Selector.patterns,=0A=
            x =3D Selector.xpath, le, v, len =3D p.length, name;=0A=
=0A=
        var exclusion =3D [];=0A=
        while (e && le !=3D e && (/\S/).test(e)) {=0A=
          le =3D e;=0A=
          for (var i =3D 0; i<len; i++) {=0A=
            name =3D p[i].name=0A=
            if (m =3D e.match(p[i].re)) {=0A=
              v =3D Object.isFunction(x[name]) ? x[name](m) : new =
Template(x[name]).evaluate(m);=0A=
              exclusion.push("(" + v.substring(1, v.length - 1) + ")");=0A=
              e =3D e.replace(m[0], '');=0A=
              break;=0A=
            }=0A=
          }=0A=
        }=0A=
        return "[not(" + exclusion.join(" and ") + ")]";=0A=
      },=0A=
      'nth-child':      function(m) {=0A=
        return =
Selector.xpath.pseudos.nth("(count(./preceding-sibling::*) + 1) ", m);=0A=
      },=0A=
      'nth-last-child': function(m) {=0A=
        return =
Selector.xpath.pseudos.nth("(count(./following-sibling::*) + 1) ", m);=0A=
      },=0A=
      'nth-of-type':    function(m) {=0A=
        return Selector.xpath.pseudos.nth("position() ", m);=0A=
      },=0A=
      'nth-last-of-type': function(m) {=0A=
        return Selector.xpath.pseudos.nth("(last() + 1 - position()) ", =
m);=0A=
      },=0A=
      'first-of-type':  function(m) {=0A=
        m[6] =3D "1"; return Selector.xpath.pseudos['nth-of-type'](m);=0A=
      },=0A=
      'last-of-type':   function(m) {=0A=
        m[6] =3D "1"; return =
Selector.xpath.pseudos['nth-last-of-type'](m);=0A=
      },=0A=
      'only-of-type':   function(m) {=0A=
        var p =3D Selector.xpath.pseudos; return p['first-of-type'](m) + =
p['last-of-type'](m);=0A=
      },=0A=
      nth: function(fragment, m) {=0A=
        var mm, formula =3D m[6], predicate;=0A=
        if (formula =3D=3D 'even') formula =3D '2n+0';=0A=
        if (formula =3D=3D 'odd')  formula =3D '2n+1';=0A=
        if (mm =3D formula.match(/^(\d+)$/)) // digit only=0A=
          return '[' + fragment + "=3D " + mm[1] + ']';=0A=
        if (mm =3D formula.match(/^(-?\d*)?n(([+-])(\d+))?/)) { // an+b=0A=
          if (mm[1] =3D=3D "-") mm[1] =3D -1;=0A=
          var a =3D mm[1] ? Number(mm[1]) : 1;=0A=
          var b =3D mm[2] ? Number(mm[2]) : 0;=0A=
          predicate =3D "[((#{fragment} - #{b}) mod #{a} =3D 0) and " +=0A=
          "((#{fragment} - #{b}) div #{a} >=3D 0)]";=0A=
          return new Template(predicate).evaluate({=0A=
            fragment: fragment, a: a, b: b });=0A=
        }=0A=
      }=0A=
    }=0A=
  },=0A=
=0A=
  criteria: {=0A=
    tagName:      'n =3D h.tagName(n, r, "#{1}", c);      c =3D false;',=0A=
    className:    'n =3D h.className(n, r, "#{1}", c);    c =3D false;',=0A=
    id:           'n =3D h.id(n, r, "#{1}", c);           c =3D false;',=0A=
    attrPresence: 'n =3D h.attrPresence(n, r, "#{1}", c); c =3D false;',=0A=
    attr: function(m) {=0A=
      m[3] =3D (m[5] || m[6]);=0A=
      return new Template('n =3D h.attr(n, r, "#{1}", "#{3}", "#{2}", =
c); c =3D false;').evaluate(m);=0A=
    },=0A=
    pseudo: function(m) {=0A=
      if (m[6]) m[6] =3D m[6].replace(/"/g, '\\"');=0A=
      return new Template('n =3D h.pseudo(n, "#{1}", "#{6}", r, c); c =
=3D false;').evaluate(m);=0A=
    },=0A=
    descendant:   'c =3D "descendant";',=0A=
    child:        'c =3D "child";',=0A=
    adjacent:     'c =3D "adjacent";',=0A=
    laterSibling: 'c =3D "laterSibling";'=0A=
  },=0A=
=0A=
  patterns: [=0A=
    { name: 'laterSibling', re: /^\s*~\s*/ },=0A=
    { name: 'child',        re: /^\s*>\s*/ },=0A=
    { name: 'adjacent',     re: /^\s*\+\s*/ },=0A=
    { name: 'descendant',   re: /^\s/ },=0A=
=0A=
    { name: 'tagName',      re: /^\s*(\*|[\w\-]+)(\b|$)?/ },=0A=
    { name: 'id',           re: /^#([\w\-\*]+)(\b|$)/ },=0A=
    { name: 'className',    re: /^\.([\w\-\*]+)(\b|$)/ },=0A=
    { name: 'pseudo',       re: =
/^:((first|last|nth|nth-last|only)(-child|-of-type)|empty|checked|(en|dis=
)abled|not)(\((.*?)\))?(\b|$|(?=3D\s|[:+~>]))/ },=0A=
    { name: 'attrPresence', re: /^\[((?:[\w-]+:)?[\w-]+)\]/ },=0A=
    { name: 'attr',         re: =
/\[((?:[\w-]*:)?[\w-]+)\s*(?:([!^$*~|]?=3D)\s*((['"])([^\4]*?)\4|([^'"][^=
\]]*?)))?\]/ }=0A=
  ],=0A=
=0A=
  assertions: {=0A=
    tagName: function(element, matches) {=0A=
      return matches[1].toUpperCase() =3D=3D =
element.tagName.toUpperCase();=0A=
    },=0A=
=0A=
    className: function(element, matches) {=0A=
      return Element.hasClassName(element, matches[1]);=0A=
    },=0A=
=0A=
    id: function(element, matches) {=0A=
      return element.id =3D=3D=3D matches[1];=0A=
    },=0A=
=0A=
    attrPresence: function(element, matches) {=0A=
      return Element.hasAttribute(element, matches[1]);=0A=
    },=0A=
=0A=
    attr: function(element, matches) {=0A=
      var nodeValue =3D Element.readAttribute(element, matches[1]);=0A=
      return nodeValue && Selector.operators[matches[2]](nodeValue, =
matches[5] || matches[6]);=0A=
    }=0A=
  },=0A=
=0A=
  handlers: {=0A=
    concat: function(a, b) {=0A=
      for (var i =3D 0, node; node =3D b[i]; i++)=0A=
        a.push(node);=0A=
      return a;=0A=
    },=0A=
=0A=
    mark: function(nodes) {=0A=
      var _true =3D Prototype.emptyFunction;=0A=
      for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
        node._countedByPrototype =3D _true;=0A=
      return nodes;=0A=
    },=0A=
=0A=
    unmark: (function(){=0A=
=0A=
      var PROPERTIES_ATTRIBUTES_MAP =3D (function(){=0A=
        var el =3D document.createElement('div'),=0A=
            isBuggy =3D false,=0A=
            propName =3D '_countedByPrototype',=0A=
            value =3D 'x'=0A=
        el[propName] =3D value;=0A=
        isBuggy =3D (el.getAttribute(propName) =3D=3D=3D value);=0A=
        el =3D null;=0A=
        return isBuggy;=0A=
      })();=0A=
=0A=
      return PROPERTIES_ATTRIBUTES_MAP ?=0A=
        function(nodes) {=0A=
          for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
            node.removeAttribute('_countedByPrototype');=0A=
          return nodes;=0A=
        } :=0A=
        function(nodes) {=0A=
          for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
            node._countedByPrototype =3D void 0;=0A=
          return nodes;=0A=
        }=0A=
    })(),=0A=
=0A=
    index: function(parentNode, reverse, ofType) {=0A=
      parentNode._countedByPrototype =3D Prototype.emptyFunction;=0A=
      if (reverse) {=0A=
        for (var nodes =3D parentNode.childNodes, i =3D nodes.length - =
1, j =3D 1; i >=3D 0; i--) {=0A=
          var node =3D nodes[i];=0A=
          if (node.nodeType =3D=3D 1 && (!ofType || =
node._countedByPrototype)) node.nodeIndex =3D j++;=0A=
        }=0A=
      } else {=0A=
        for (var i =3D 0, j =3D 1, nodes =3D parentNode.childNodes; node =
=3D nodes[i]; i++)=0A=
          if (node.nodeType =3D=3D 1 && (!ofType || =
node._countedByPrototype)) node.nodeIndex =3D j++;=0A=
      }=0A=
    },=0A=
=0A=
    unique: function(nodes) {=0A=
      if (nodes.length =3D=3D 0) return nodes;=0A=
      var results =3D [], n;=0A=
      for (var i =3D 0, l =3D nodes.length; i < l; i++)=0A=
        if (typeof (n =3D nodes[i])._countedByPrototype =3D=3D =
'undefined') {=0A=
          n._countedByPrototype =3D Prototype.emptyFunction;=0A=
          results.push(Element.extend(n));=0A=
        }=0A=
      return Selector.handlers.unmark(results);=0A=
    },=0A=
=0A=
    descendant: function(nodes) {=0A=
      var h =3D Selector.handlers;=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++)=0A=
        h.concat(results, node.getElementsByTagName('*'));=0A=
      return results;=0A=
    },=0A=
=0A=
    child: function(nodes) {=0A=
      var h =3D Selector.handlers;=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++) {=0A=
        for (var j =3D 0, child; child =3D node.childNodes[j]; j++)=0A=
          if (child.nodeType =3D=3D 1 && child.tagName !=3D '!') =
results.push(child);=0A=
      }=0A=
      return results;=0A=
    },=0A=
=0A=
    adjacent: function(nodes) {=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++) {=0A=
        var next =3D this.nextElementSibling(node);=0A=
        if (next) results.push(next);=0A=
      }=0A=
      return results;=0A=
    },=0A=
=0A=
    laterSibling: function(nodes) {=0A=
      var h =3D Selector.handlers;=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++)=0A=
        h.concat(results, Element.nextSiblings(node));=0A=
      return results;=0A=
    },=0A=
=0A=
    nextElementSibling: function(node) {=0A=
      while (node =3D node.nextSibling)=0A=
        if (node.nodeType =3D=3D 1) return node;=0A=
      return null;=0A=
    },=0A=
=0A=
    previousElementSibling: function(node) {=0A=
      while (node =3D node.previousSibling)=0A=
        if (node.nodeType =3D=3D 1) return node;=0A=
      return null;=0A=
    },=0A=
=0A=
    tagName: function(nodes, root, tagName, combinator) {=0A=
      var uTagName =3D tagName.toUpperCase();=0A=
      var results =3D [], h =3D Selector.handlers;=0A=
      if (nodes) {=0A=
        if (combinator) {=0A=
          if (combinator =3D=3D "descendant") {=0A=
            for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
              h.concat(results, node.getElementsByTagName(tagName));=0A=
            return results;=0A=
          } else nodes =3D this[combinator](nodes);=0A=
          if (tagName =3D=3D "*") return nodes;=0A=
        }=0A=
        for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
          if (node.tagName.toUpperCase() =3D=3D=3D uTagName) =
results.push(node);=0A=
        return results;=0A=
      } else return root.getElementsByTagName(tagName);=0A=
    },=0A=
=0A=
    id: function(nodes, root, id, combinator) {=0A=
      var targetNode =3D $(id), h =3D Selector.handlers;=0A=
=0A=
      if (root =3D=3D document) {=0A=
        if (!targetNode) return [];=0A=
        if (!nodes) return [targetNode];=0A=
      } else {=0A=
        if (!root.sourceIndex || root.sourceIndex < 1) {=0A=
          var nodes =3D root.getElementsByTagName('*');=0A=
          for (var j =3D 0, node; node =3D nodes[j]; j++) {=0A=
            if (node.id =3D=3D=3D id) return [node];=0A=
          }=0A=
        }=0A=
      }=0A=
=0A=
      if (nodes) {=0A=
        if (combinator) {=0A=
          if (combinator =3D=3D 'child') {=0A=
            for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
              if (targetNode.parentNode =3D=3D node) return [targetNode];=0A=
          } else if (combinator =3D=3D 'descendant') {=0A=
            for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
              if (Element.descendantOf(targetNode, node)) return =
[targetNode];=0A=
          } else if (combinator =3D=3D 'adjacent') {=0A=
            for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
              if (Selector.handlers.previousElementSibling(targetNode) =
=3D=3D node)=0A=
                return [targetNode];=0A=
          } else nodes =3D h[combinator](nodes);=0A=
        }=0A=
        for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
          if (node =3D=3D targetNode) return [targetNode];=0A=
        return [];=0A=
      }=0A=
      return (targetNode && Element.descendantOf(targetNode, root)) ? =
[targetNode] : [];=0A=
    },=0A=
=0A=
    className: function(nodes, root, className, combinator) {=0A=
      if (nodes && combinator) nodes =3D this[combinator](nodes);=0A=
      return Selector.handlers.byClassName(nodes, root, className);=0A=
    },=0A=
=0A=
    byClassName: function(nodes, root, className) {=0A=
      if (!nodes) nodes =3D Selector.handlers.descendant([root]);=0A=
      var needle =3D ' ' + className + ' ';=0A=
      for (var i =3D 0, results =3D [], node, nodeClassName; node =3D =
nodes[i]; i++) {=0A=
        nodeClassName =3D node.className;=0A=
        if (nodeClassName.length =3D=3D 0) continue;=0A=
        if (nodeClassName =3D=3D className || (' ' + nodeClassName + ' =
').include(needle))=0A=
          results.push(node);=0A=
      }=0A=
      return results;=0A=
    },=0A=
=0A=
    attrPresence: function(nodes, root, attr, combinator) {=0A=
      if (!nodes) nodes =3D root.getElementsByTagName("*");=0A=
      if (nodes && combinator) nodes =3D this[combinator](nodes);=0A=
      var results =3D [];=0A=
      for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
        if (Element.hasAttribute(node, attr)) results.push(node);=0A=
      return results;=0A=
    },=0A=
=0A=
    attr: function(nodes, root, attr, value, operator, combinator) {=0A=
      if (!nodes) nodes =3D root.getElementsByTagName("*");=0A=
      if (nodes && combinator) nodes =3D this[combinator](nodes);=0A=
      var handler =3D Selector.operators[operator], results =3D [];=0A=
      for (var i =3D 0, node; node =3D nodes[i]; i++) {=0A=
        var nodeValue =3D Element.readAttribute(node, attr);=0A=
        if (nodeValue =3D=3D=3D null) continue;=0A=
        if (handler(nodeValue, value)) results.push(node);=0A=
      }=0A=
      return results;=0A=
    },=0A=
=0A=
    pseudo: function(nodes, name, value, root, combinator) {=0A=
      if (nodes && combinator) nodes =3D this[combinator](nodes);=0A=
      if (!nodes) nodes =3D root.getElementsByTagName("*");=0A=
      return Selector.pseudos[name](nodes, value, root);=0A=
    }=0A=
  },=0A=
=0A=
  pseudos: {=0A=
    'first-child': function(nodes, value, root) {=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++) {=0A=
        if (Selector.handlers.previousElementSibling(node)) continue;=0A=
          results.push(node);=0A=
      }=0A=
      return results;=0A=
    },=0A=
    'last-child': function(nodes, value, root) {=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++) {=0A=
        if (Selector.handlers.nextElementSibling(node)) continue;=0A=
          results.push(node);=0A=
      }=0A=
      return results;=0A=
    },=0A=
    'only-child': function(nodes, value, root) {=0A=
      var h =3D Selector.handlers;=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++)=0A=
        if (!h.previousElementSibling(node) && =
!h.nextElementSibling(node))=0A=
          results.push(node);=0A=
      return results;=0A=
    },=0A=
    'nth-child':        function(nodes, formula, root) {=0A=
      return Selector.pseudos.nth(nodes, formula, root);=0A=
    },=0A=
    'nth-last-child':   function(nodes, formula, root) {=0A=
      return Selector.pseudos.nth(nodes, formula, root, true);=0A=
    },=0A=
    'nth-of-type':      function(nodes, formula, root) {=0A=
      return Selector.pseudos.nth(nodes, formula, root, false, true);=0A=
    },=0A=
    'nth-last-of-type': function(nodes, formula, root) {=0A=
      return Selector.pseudos.nth(nodes, formula, root, true, true);=0A=
    },=0A=
    'first-of-type':    function(nodes, formula, root) {=0A=
      return Selector.pseudos.nth(nodes, "1", root, false, true);=0A=
    },=0A=
    'last-of-type':     function(nodes, formula, root) {=0A=
      return Selector.pseudos.nth(nodes, "1", root, true, true);=0A=
    },=0A=
    'only-of-type':     function(nodes, formula, root) {=0A=
      var p =3D Selector.pseudos;=0A=
      return p['last-of-type'](p['first-of-type'](nodes, formula, root), =
formula, root);=0A=
    },=0A=
=0A=
    getIndices: function(a, b, total) {=0A=
      if (a =3D=3D 0) return b > 0 ? [b] : [];=0A=
      return $R(1, total).inject([], function(memo, i) {=0A=
        if (0 =3D=3D (i - b) % a && (i - b) / a >=3D 0) memo.push(i);=0A=
        return memo;=0A=
      });=0A=
    },=0A=
=0A=
    nth: function(nodes, formula, root, reverse, ofType) {=0A=
      if (nodes.length =3D=3D 0) return [];=0A=
      if (formula =3D=3D 'even') formula =3D '2n+0';=0A=
      if (formula =3D=3D 'odd')  formula =3D '2n+1';=0A=
      var h =3D Selector.handlers, results =3D [], indexed =3D [], m;=0A=
      h.mark(nodes);=0A=
      for (var i =3D 0, node; node =3D nodes[i]; i++) {=0A=
        if (!node.parentNode._countedByPrototype) {=0A=
          h.index(node.parentNode, reverse, ofType);=0A=
          indexed.push(node.parentNode);=0A=
        }=0A=
      }=0A=
      if (formula.match(/^\d+$/)) { // just a number=0A=
        formula =3D Number(formula);=0A=
        for (var i =3D 0, node; node =3D nodes[i]; i++)=0A=
          if (node.nodeIndex =3D=3D formula) results.push(node);=0A=
      } else if (m =3D formula.match(/^(-?\d*)?n(([+-])(\d+))?/)) { // =
an+b=0A=
        if (m[1] =3D=3D "-") m[1] =3D -1;=0A=
        var a =3D m[1] ? Number(m[1]) : 1;=0A=
        var b =3D m[2] ? Number(m[2]) : 0;=0A=
        var indices =3D Selector.pseudos.getIndices(a, b, nodes.length);=0A=
        for (var i =3D 0, node, l =3D indices.length; node =3D nodes[i]; =
i++) {=0A=
          for (var j =3D 0; j < l; j++)=0A=
            if (node.nodeIndex =3D=3D indices[j]) results.push(node);=0A=
        }=0A=
      }=0A=
      h.unmark(nodes);=0A=
      h.unmark(indexed);=0A=
      return results;=0A=
    },=0A=
=0A=
    'empty': function(nodes, value, root) {=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++) {=0A=
        if (node.tagName =3D=3D '!' || node.firstChild) continue;=0A=
        results.push(node);=0A=
      }=0A=
      return results;=0A=
    },=0A=
=0A=
    'not': function(nodes, selector, root) {=0A=
      var h =3D Selector.handlers, selectorType, m;=0A=
      var exclusions =3D new Selector(selector).findElements(root);=0A=
      h.mark(exclusions);=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++)=0A=
        if (!node._countedByPrototype) results.push(node);=0A=
      h.unmark(exclusions);=0A=
      return results;=0A=
    },=0A=
=0A=
    'enabled': function(nodes, value, root) {=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++)=0A=
        if (!node.disabled && (!node.type || node.type !=3D=3D 'hidden'))=0A=
          results.push(node);=0A=
      return results;=0A=
    },=0A=
=0A=
    'disabled': function(nodes, value, root) {=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++)=0A=
        if (node.disabled) results.push(node);=0A=
      return results;=0A=
    },=0A=
=0A=
    'checked': function(nodes, value, root) {=0A=
      for (var i =3D 0, results =3D [], node; node =3D nodes[i]; i++)=0A=
        if (node.checked) results.push(node);=0A=
      return results;=0A=
    }=0A=
  },=0A=
=0A=
  operators: {=0A=
    '=3D':  function(nv, v) { return nv =3D=3D v; },=0A=
    '!=3D': function(nv, v) { return nv !=3D v; },=0A=
    '^=3D': function(nv, v) { return nv =3D=3D v || nv && =
nv.startsWith(v); },=0A=
    '$=3D': function(nv, v) { return nv =3D=3D v || nv && =
nv.endsWith(v); },=0A=
    '*=3D': function(nv, v) { return nv =3D=3D v || nv && nv.include(v); =
},=0A=
    '~=3D': function(nv, v) { return (' ' + nv + ' ').include(' ' + v + =
' '); },=0A=
    '|=3D': function(nv, v) { return ('-' + (nv || "").toUpperCase() +=0A=
     '-').include('-' + (v || "").toUpperCase() + '-'); }=0A=
  },=0A=
=0A=
  split: function(expression) {=0A=
    var expressions =3D [];=0A=
    expression.scan(/(([\w#:.~>+()\s-]+|\*|\[.*?\])+)\s*(,|$)/, =
function(m) {=0A=
      expressions.push(m[1].strip());=0A=
    });=0A=
    return expressions;=0A=
  },=0A=
=0A=
  matchElements: function(elements, expression) {=0A=
    var matches =3D $$(expression), h =3D Selector.handlers;=0A=
    h.mark(matches);=0A=
    for (var i =3D 0, results =3D [], element; element =3D elements[i]; =
i++)=0A=
      if (element._countedByPrototype) results.push(element);=0A=
    h.unmark(matches);=0A=
    return results;=0A=
  },=0A=
=0A=
  findElement: function(elements, expression, index) {=0A=
    if (Object.isNumber(expression)) {=0A=
      index =3D expression; expression =3D false;=0A=
    }=0A=
    return Selector.matchElements(elements, expression || '*')[index || =
0];=0A=
  },=0A=
=0A=
  findChildElements: function(element, expressions) {=0A=
    expressions =3D Selector.split(expressions.join(','));=0A=
    var results =3D [], h =3D Selector.handlers;=0A=
    for (var i =3D 0, l =3D expressions.length, selector; i < l; i++) {=0A=
      selector =3D new Selector(expressions[i].strip());=0A=
      h.concat(results, selector.findElements(element));=0A=
    }=0A=
    return (l > 1) ? h.unique(results) : results;=0A=
  }=0A=
});=0A=
=0A=
if (Prototype.Browser.IE) {=0A=
  Object.extend(Selector.handlers, {=0A=
    concat: function(a, b) {=0A=
      for (var i =3D 0, node; node =3D b[i]; i++)=0A=
        if (node.tagName !=3D=3D "!") a.push(node);=0A=
      return a;=0A=
    }=0A=
  });=0A=
}=0A=
=0A=
function $$() {=0A=
  return Selector.findChildElements(document, $A(arguments));=0A=
}=0A=
=0A=
var Form =3D {=0A=
  reset: function(form) {=0A=
    form =3D $(form);=0A=
    form.reset();=0A=
    return form;=0A=
  },=0A=
=0A=
  serializeElements: function(elements, options) {=0A=
    if (typeof options !=3D 'object') options =3D { hash: !!options };=0A=
    else if (Object.isUndefined(options.hash)) options.hash =3D true;=0A=
    var key, value, submitted =3D false, submit =3D options.submit;=0A=
=0A=
    var data =3D elements.inject({ }, function(result, element) {=0A=
      if (!element.disabled && element.name) {=0A=
        key =3D element.name; value =3D $(element).getValue();=0A=
        if (value !=3D null && element.type !=3D 'file' && (element.type =
!=3D 'submit' || (!submitted &&=0A=
            submit !=3D=3D false && (!submit || key =3D=3D submit) && =
(submitted =3D true)))) {=0A=
          if (key in result) {=0A=
            if (!Object.isArray(result[key])) result[key] =3D =
[result[key]];=0A=
            result[key].push(value);=0A=
          }=0A=
          else result[key] =3D value;=0A=
        }=0A=
      }=0A=
      return result;=0A=
    });=0A=
=0A=
    return options.hash ? data : Object.toQueryString(data);=0A=
  }=0A=
};=0A=
=0A=
Form.Methods =3D {=0A=
  serialize: function(form, options) {=0A=
    return Form.serializeElements(Form.getElements(form), options);=0A=
  },=0A=
=0A=
  getElements: function(form) {=0A=
    var elements =3D $(form).getElementsByTagName('*'),=0A=
        element,=0A=
        arr =3D [ ],=0A=
        serializers =3D Form.Element.Serializers;=0A=
    for (var i =3D 0; element =3D elements[i]; i++) {=0A=
      arr.push(element);=0A=
    }=0A=
    return arr.inject([], function(elements, child) {=0A=
      if (serializers[child.tagName.toLowerCase()])=0A=
        elements.push(Element.extend(child));=0A=
      return elements;=0A=
    })=0A=
  },=0A=
=0A=
  getInputs: function(form, typeName, name) {=0A=
    form =3D $(form);=0A=
    var inputs =3D form.getElementsByTagName('input');=0A=
=0A=
    if (!typeName && !name) return $A(inputs).map(Element.extend);=0A=
=0A=
    for (var i =3D 0, matchingInputs =3D [], length =3D inputs.length; i =
< length; i++) {=0A=
      var input =3D inputs[i];=0A=
      if ((typeName && input.type !=3D typeName) || (name && input.name =
!=3D name))=0A=
        continue;=0A=
      matchingInputs.push(Element.extend(input));=0A=
    }=0A=
=0A=
    return matchingInputs;=0A=
  },=0A=
=0A=
  disable: function(form) {=0A=
    form =3D $(form);=0A=
    Form.getElements(form).invoke('disable');=0A=
    return form;=0A=
  },=0A=
=0A=
  enable: function(form) {=0A=
    form =3D $(form);=0A=
    Form.getElements(form).invoke('enable');=0A=
    return form;=0A=
  },=0A=
=0A=
  findFirstElement: function(form) {=0A=
    var elements =3D $(form).getElements().findAll(function(element) {=0A=
      return 'hidden' !=3D element.type && !element.disabled;=0A=
    });=0A=
    var firstByIndex =3D elements.findAll(function(element) {=0A=
      return element.hasAttribute('tabIndex') && element.tabIndex >=3D 0;=0A=
    }).sortBy(function(element) { return element.tabIndex }).first();=0A=
=0A=
    return firstByIndex ? firstByIndex : elements.find(function(element) =
{=0A=
      return /^(?:input|select|textarea)$/i.test(element.tagName);=0A=
    });=0A=
  },=0A=
=0A=
  focusFirstElement: function(form) {=0A=
    form =3D $(form);=0A=
    form.findFirstElement().activate();=0A=
    return form;=0A=
  },=0A=
=0A=
  request: function(form, options) {=0A=
    form =3D $(form), options =3D Object.clone(options || { });=0A=
=0A=
    var params =3D options.parameters, action =3D =
form.readAttribute('action') || '';=0A=
    if (action.blank()) action =3D window.location.href;=0A=
    options.parameters =3D form.serialize(true);=0A=
=0A=
    if (params) {=0A=
      if (Object.isString(params)) params =3D params.toQueryParams();=0A=
      Object.extend(options.parameters, params);=0A=
    }=0A=
=0A=
    if (form.hasAttribute('method') && !options.method)=0A=
      options.method =3D form.method;=0A=
=0A=
    return new Ajax.Request(action, options);=0A=
  }=0A=
};=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
=0A=
Form.Element =3D {=0A=
  focus: function(element) {=0A=
    $(element).focus();=0A=
    return element;=0A=
  },=0A=
=0A=
  select: function(element) {=0A=
    $(element).select();=0A=
    return element;=0A=
  }=0A=
};=0A=
=0A=
Form.Element.Methods =3D {=0A=
=0A=
  serialize: function(element) {=0A=
    element =3D $(element);=0A=
    if (!element.disabled && element.name) {=0A=
      var value =3D element.getValue();=0A=
      if (value !=3D undefined) {=0A=
        var pair =3D { };=0A=
        pair[element.name] =3D value;=0A=
        return Object.toQueryString(pair);=0A=
      }=0A=
    }=0A=
    return '';=0A=
  },=0A=
=0A=
  getValue: function(element) {=0A=
    element =3D $(element);=0A=
    var method =3D element.tagName.toLowerCase();=0A=
    return Form.Element.Serializers[method](element);=0A=
  },=0A=
=0A=
  setValue: function(element, value) {=0A=
    element =3D $(element);=0A=
    var method =3D element.tagName.toLowerCase();=0A=
    Form.Element.Serializers[method](element, value);=0A=
    return element;=0A=
  },=0A=
=0A=
  clear: function(element) {=0A=
    $(element).value =3D '';=0A=
    return element;=0A=
  },=0A=
=0A=
  present: function(element) {=0A=
    return $(element).value !=3D '';=0A=
  },=0A=
=0A=
  activate: function(element) {=0A=
    element =3D $(element);=0A=
    try {=0A=
      element.focus();=0A=
      if (element.select && (element.tagName.toLowerCase() !=3D 'input' =
||=0A=
          !(/^(?:button|reset|submit)$/i.test(element.type))))=0A=
        element.select();=0A=
    } catch (e) { }=0A=
    return element;=0A=
  },=0A=
=0A=
  disable: function(element) {=0A=
    element =3D $(element);=0A=
    element.disabled =3D true;=0A=
    return element;=0A=
  },=0A=
=0A=
  enable: function(element) {=0A=
    element =3D $(element);=0A=
    element.disabled =3D false;=0A=
    return element;=0A=
  }=0A=
};=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
var Field =3D Form.Element;=0A=
=0A=
var $F =3D Form.Element.Methods.getValue;=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
Form.Element.Serializers =3D {=0A=
  input: function(element, value) {=0A=
    switch (element.type.toLowerCase()) {=0A=
      case 'checkbox':=0A=
      case 'radio':=0A=
        return Form.Element.Serializers.inputSelector(element, value);=0A=
      default:=0A=
        return Form.Element.Serializers.textarea(element, value);=0A=
    }=0A=
  },=0A=
=0A=
  inputSelector: function(element, value) {=0A=
    if (Object.isUndefined(value)) return element.checked ? =
element.value : null;=0A=
    else element.checked =3D !!value;=0A=
  },=0A=
=0A=
  textarea: function(element, value) {=0A=
    if (Object.isUndefined(value)) return element.value;=0A=
    else element.value =3D value;=0A=
  },=0A=
=0A=
  select: function(element, value) {=0A=
    if (Object.isUndefined(value))=0A=
      return this[element.type =3D=3D 'select-one' ?=0A=
        'selectOne' : 'selectMany'](element);=0A=
    else {=0A=
      var opt, currentValue, single =3D !Object.isArray(value);=0A=
      for (var i =3D 0, length =3D element.length; i < length; i++) {=0A=
        opt =3D element.options[i];=0A=
        currentValue =3D this.optionValue(opt);=0A=
        if (single) {=0A=
          if (currentValue =3D=3D value) {=0A=
            opt.selected =3D true;=0A=
            return;=0A=
          }=0A=
        }=0A=
        else opt.selected =3D value.include(currentValue);=0A=
      }=0A=
    }=0A=
  },=0A=
=0A=
  selectOne: function(element) {=0A=
    var index =3D element.selectedIndex;=0A=
    return index >=3D 0 ? this.optionValue(element.options[index]) : =
null;=0A=
  },=0A=
=0A=
  selectMany: function(element) {=0A=
    var values, length =3D element.length;=0A=
    if (!length) return null;=0A=
=0A=
    for (var i =3D 0, values =3D []; i < length; i++) {=0A=
      var opt =3D element.options[i];=0A=
      if (opt.selected) values.push(this.optionValue(opt));=0A=
    }=0A=
    return values;=0A=
  },=0A=
=0A=
  optionValue: function(opt) {=0A=
    return Element.extend(opt).hasAttribute('value') ? opt.value : =
opt.text;=0A=
  }=0A=
};=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
=0A=
Abstract.TimedObserver =3D Class.create(PeriodicalExecuter, {=0A=
  initialize: function($super, element, frequency, callback) {=0A=
    $super(callback, frequency);=0A=
    this.element   =3D $(element);=0A=
    this.lastValue =3D this.getValue();=0A=
  },=0A=
=0A=
  execute: function() {=0A=
    var value =3D this.getValue();=0A=
    if (Object.isString(this.lastValue) && Object.isString(value) ?=0A=
        this.lastValue !=3D value : String(this.lastValue) !=3D =
String(value)) {=0A=
      this.callback(this.element, value);=0A=
      this.lastValue =3D value;=0A=
    }=0A=
  }=0A=
});=0A=
=0A=
Form.Element.Observer =3D Class.create(Abstract.TimedObserver, {=0A=
  getValue: function() {=0A=
    return Form.Element.getValue(this.element);=0A=
  }=0A=
});=0A=
=0A=
Form.Observer =3D Class.create(Abstract.TimedObserver, {=0A=
  getValue: function() {=0A=
    return Form.serialize(this.element);=0A=
  }=0A=
});=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
Abstract.EventObserver =3D Class.create({=0A=
  initialize: function(element, callback) {=0A=
    this.element  =3D $(element);=0A=
    this.callback =3D callback;=0A=
=0A=
    this.lastValue =3D this.getValue();=0A=
    if (this.element.tagName.toLowerCase() =3D=3D 'form')=0A=
      this.registerFormCallbacks();=0A=
    else=0A=
      this.registerCallback(this.element);=0A=
  },=0A=
=0A=
  onElementEvent: function() {=0A=
    var value =3D this.getValue();=0A=
    if (this.lastValue !=3D value) {=0A=
      this.callback(this.element, value);=0A=
      this.lastValue =3D value;=0A=
    }=0A=
  },=0A=
=0A=
  registerFormCallbacks: function() {=0A=
    Form.getElements(this.element).each(this.registerCallback, this);=0A=
  },=0A=
=0A=
  registerCallback: function(element) {=0A=
    if (element.type) {=0A=
      switch (element.type.toLowerCase()) {=0A=
        case 'checkbox':=0A=
        case 'radio':=0A=
          Event.observe(element, 'click', =
this.onElementEvent.bind(this));=0A=
          break;=0A=
        default:=0A=
          Event.observe(element, 'change', =
this.onElementEvent.bind(this));=0A=
          break;=0A=
      }=0A=
    }=0A=
  }=0A=
});=0A=
=0A=
Form.Element.EventObserver =3D Class.create(Abstract.EventObserver, {=0A=
  getValue: function() {=0A=
    return Form.Element.getValue(this.element);=0A=
  }=0A=
});=0A=
=0A=
Form.EventObserver =3D Class.create(Abstract.EventObserver, {=0A=
  getValue: function() {=0A=
    return Form.serialize(this.element);=0A=
  }=0A=
});=0A=
(function() {=0A=
=0A=
  var Event =3D {=0A=
    KEY_BACKSPACE: 8,=0A=
    KEY_TAB:       9,=0A=
    KEY_RETURN:   13,=0A=
    KEY_ESC:      27,=0A=
    KEY_LEFT:     37,=0A=
    KEY_UP:       38,=0A=
    KEY_RIGHT:    39,=0A=
    KEY_DOWN:     40,=0A=
    KEY_DELETE:   46,=0A=
    KEY_HOME:     36,=0A=
    KEY_END:      35,=0A=
    KEY_PAGEUP:   33,=0A=
    KEY_PAGEDOWN: 34,=0A=
    KEY_INSERT:   45,=0A=
=0A=
    cache: {}=0A=
  };=0A=
=0A=
  var docEl =3D document.documentElement;=0A=
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED =3D 'onmouseenter' in docEl=0A=
    && 'onmouseleave' in docEl;=0A=
=0A=
  var _isButton;=0A=
  if (Prototype.Browser.IE) {=0A=
    var buttonMap =3D { 0: 1, 1: 4, 2: 2 };=0A=
    _isButton =3D function(event, code) {=0A=
      return event.button =3D=3D=3D buttonMap[code];=0A=
    };=0A=
  } else if (Prototype.Browser.WebKit) {=0A=
    _isButton =3D function(event, code) {=0A=
      switch (code) {=0A=
        case 0: return event.which =3D=3D 1 && !event.metaKey;=0A=
        case 1: return event.which =3D=3D 1 && event.metaKey;=0A=
        default: return false;=0A=
      }=0A=
    };=0A=
  } else {=0A=
    _isButton =3D function(event, code) {=0A=
      return event.which ? (event.which =3D=3D=3D code + 1) : =
(event.button =3D=3D=3D code);=0A=
    };=0A=
  }=0A=
=0A=
  function isLeftClick(event)   { return _isButton(event, 0) }=0A=
=0A=
  function isMiddleClick(event) { return _isButton(event, 1) }=0A=
=0A=
  function isRightClick(event)  { return _isButton(event, 2) }=0A=
=0A=
  function element(event) {=0A=
    event =3D Event.extend(event);=0A=
=0A=
    var node =3D event.target, type =3D event.type,=0A=
     currentTarget =3D event.currentTarget;=0A=
=0A=
    if (currentTarget && currentTarget.tagName) {=0A=
      if (type =3D=3D=3D 'load' || type =3D=3D=3D 'error' ||=0A=
        (type =3D=3D=3D 'click' && currentTarget.tagName.toLowerCase() =
=3D=3D=3D 'input'=0A=
          && currentTarget.type =3D=3D=3D 'radio'))=0A=
            node =3D currentTarget;=0A=
    }=0A=
=0A=
    if (node.nodeType =3D=3D Node.TEXT_NODE)=0A=
      node =3D node.parentNode;=0A=
=0A=
    return Element.extend(node);=0A=
  }=0A=
=0A=
  function findElement(event, expression) {=0A=
    var element =3D Event.element(event);=0A=
    if (!expression) return element;=0A=
    var elements =3D [element].concat(element.ancestors());=0A=
    return Selector.findElement(elements, expression, 0);=0A=
  }=0A=
=0A=
  function pointer(event) {=0A=
    return { x: pointerX(event), y: pointerY(event) };=0A=
  }=0A=
=0A=
  function pointerX(event) {=0A=
    var docElement =3D document.documentElement,=0A=
     body =3D document.body || { scrollLeft: 0 };=0A=
=0A=
    return event.pageX || (event.clientX +=0A=
      (docElement.scrollLeft || body.scrollLeft) -=0A=
      (docElement.clientLeft || 0));=0A=
  }=0A=
=0A=
  function pointerY(event) {=0A=
    var docElement =3D document.documentElement,=0A=
     body =3D document.body || { scrollTop: 0 };=0A=
=0A=
    return  event.pageY || (event.clientY +=0A=
       (docElement.scrollTop || body.scrollTop) -=0A=
       (docElement.clientTop || 0));=0A=
  }=0A=
=0A=
=0A=
  function stop(event) {=0A=
    Event.extend(event);=0A=
    event.preventDefault();=0A=
    event.stopPropagation();=0A=
=0A=
    event.stopped =3D true;=0A=
  }=0A=
=0A=
  Event.Methods =3D {=0A=
    isLeftClick: isLeftClick,=0A=
    isMiddleClick: isMiddleClick,=0A=
    isRightClick: isRightClick,=0A=
=0A=
    element: element,=0A=
    findElement: findElement,=0A=
=0A=
    pointer: pointer,=0A=
    pointerX: pointerX,=0A=
    pointerY: pointerY,=0A=
=0A=
    stop: stop=0A=
  };=0A=
=0A=
=0A=
  var methods =3D Object.keys(Event.Methods).inject({ }, function(m, =
name) {=0A=
    m[name] =3D Event.Methods[name].methodize();=0A=
    return m;=0A=
  });=0A=
=0A=
  if (Prototype.Browser.IE) {=0A=
    function _relatedTarget(event) {=0A=
      var element;=0A=
      switch (event.type) {=0A=
        case 'mouseover': element =3D event.fromElement; break;=0A=
        case 'mouseout':  element =3D event.toElement;   break;=0A=
        default: return null;=0A=
      }=0A=
      return Element.extend(element);=0A=
    }=0A=
=0A=
    Object.extend(methods, {=0A=
      stopPropagation: function() { this.cancelBubble =3D true },=0A=
      preventDefault:  function() { this.returnValue =3D false },=0A=
      inspect: function() { return '[object Event]' }=0A=
    });=0A=
=0A=
    Event.extend =3D function(event, element) {=0A=
      if (!event) return false;=0A=
      if (event._extendedByPrototype) return event;=0A=
=0A=
      event._extendedByPrototype =3D Prototype.emptyFunction;=0A=
      var pointer =3D Event.pointer(event);=0A=
=0A=
      Object.extend(event, {=0A=
        target: event.srcElement || element,=0A=
        relatedTarget: _relatedTarget(event),=0A=
        pageX:  pointer.x,=0A=
        pageY:  pointer.y=0A=
      });=0A=
=0A=
      return Object.extend(event, methods);=0A=
    };=0A=
  } else {=0A=
    Event.prototype =3D window.Event.prototype || =
document.createEvent('HTMLEvents').__proto__;=0A=
    Object.extend(Event.prototype, methods);=0A=
    Event.extend =3D Prototype.K;=0A=
  }=0A=
=0A=
  function _createResponder(element, eventName, handler) {=0A=
    var registry =3D Element.retrieve(element, =
'prototype_event_registry');=0A=
=0A=
    if (Object.isUndefined(registry)) {=0A=
      CACHE.push(element);=0A=
      registry =3D Element.retrieve(element, 'prototype_event_registry', =
$H());=0A=
    }=0A=
=0A=
    var respondersForEvent =3D registry.get(eventName);=0A=
    if (Object.isUndefined(respondersForEvent)) {=0A=
      respondersForEvent =3D [];=0A=
      registry.set(eventName, respondersForEvent);=0A=
    }=0A=
=0A=
    if (respondersForEvent.pluck('handler').include(handler)) return =
false;=0A=
=0A=
    var responder;=0A=
    if (eventName.include(":")) {=0A=
      responder =3D function(event) {=0A=
        if (Object.isUndefined(event.eventName))=0A=
          return false;=0A=
=0A=
        if (event.eventName !=3D=3D eventName)=0A=
          return false;=0A=
=0A=
        Event.extend(event, element);=0A=
        handler.call(element, event);=0A=
      };=0A=
    } else {=0A=
      if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED &&=0A=
       (eventName =3D=3D=3D "mouseenter" || eventName =3D=3D=3D =
"mouseleave")) {=0A=
        if (eventName =3D=3D=3D "mouseenter" || eventName =3D=3D=3D =
"mouseleave") {=0A=
          responder =3D function(event) {=0A=
            Event.extend(event, element);=0A=
=0A=
            var parent =3D event.relatedTarget;=0A=
            while (parent && parent !=3D=3D element) {=0A=
              try { parent =3D parent.parentNode; }=0A=
              catch(e) { parent =3D element; }=0A=
            }=0A=
=0A=
            if (parent =3D=3D=3D element) return;=0A=
=0A=
            handler.call(element, event);=0A=
          };=0A=
        }=0A=
      } else {=0A=
        responder =3D function(event) {=0A=
          Event.extend(event, element);=0A=
          handler.call(element, event);=0A=
        };=0A=
      }=0A=
    }=0A=
=0A=
    responder.handler =3D handler;=0A=
    respondersForEvent.push(responder);=0A=
    return responder;=0A=
  }=0A=
=0A=
  function _destroyCache() {=0A=
    for (var i =3D 0, length =3D CACHE.length; i < length; i++) {=0A=
      Event.stopObserving(CACHE[i]);=0A=
      CACHE[i] =3D null;=0A=
    }=0A=
  }=0A=
=0A=
  var CACHE =3D [];=0A=
=0A=
  if (Prototype.Browser.IE)=0A=
    window.attachEvent('onunload', _destroyCache);=0A=
=0A=
  if (Prototype.Browser.WebKit)=0A=
    window.addEventListener('unload', Prototype.emptyFunction, false);=0A=
=0A=
=0A=
  var _getDOMEventName =3D Prototype.K;=0A=
=0A=
  if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED) {=0A=
    _getDOMEventName =3D function(eventName) {=0A=
      var translations =3D { mouseenter: "mouseover", mouseleave: =
"mouseout" };=0A=
      return eventName in translations ? translations[eventName] : =
eventName;=0A=
    };=0A=
  }=0A=
=0A=
  function observe(element, eventName, handler) {=0A=
    element =3D $(element);=0A=
=0A=
    var responder =3D _createResponder(element, eventName, handler);=0A=
=0A=
    if (!responder) return element;=0A=
=0A=
    if (eventName.include(':')) {=0A=
      if (element.addEventListener)=0A=
        element.addEventListener("dataavailable", responder, false);=0A=
      else {=0A=
        element.attachEvent("ondataavailable", responder);=0A=
        element.attachEvent("onfilterchange", responder);=0A=
      }=0A=
    } else {=0A=
      var actualEventName =3D _getDOMEventName(eventName);=0A=
=0A=
      if (element.addEventListener)=0A=
        element.addEventListener(actualEventName, responder, false);=0A=
      else=0A=
        element.attachEvent("on" + actualEventName, responder);=0A=
    }=0A=
=0A=
    return element;=0A=
  }=0A=
=0A=
  function stopObserving(element, eventName, handler) {=0A=
    element =3D $(element);=0A=
=0A=
    var registry =3D Element.retrieve(element, =
'prototype_event_registry');=0A=
=0A=
    if (Object.isUndefined(registry)) return element;=0A=
=0A=
    if (eventName && !handler) {=0A=
      var responders =3D registry.get(eventName);=0A=
=0A=
      if (Object.isUndefined(responders)) return element;=0A=
=0A=
      responders.each( function(r) {=0A=
        Element.stopObserving(element, eventName, r.handler);=0A=
      });=0A=
      return element;=0A=
    } else if (!eventName) {=0A=
      registry.each( function(pair) {=0A=
        var eventName =3D pair.key, responders =3D pair.value;=0A=
=0A=
        responders.each( function(r) {=0A=
          Element.stopObserving(element, eventName, r.handler);=0A=
        });=0A=
      });=0A=
      return element;=0A=
    }=0A=
=0A=
    var responders =3D registry.get(eventName);=0A=
=0A=
    if (!responders) return;=0A=
=0A=
    var responder =3D responders.find( function(r) { return r.handler =
=3D=3D=3D handler; });=0A=
    if (!responder) return element;=0A=
=0A=
    var actualEventName =3D _getDOMEventName(eventName);=0A=
=0A=
    if (eventName.include(':')) {=0A=
      if (element.removeEventListener)=0A=
        element.removeEventListener("dataavailable", responder, false);=0A=
      else {=0A=
        element.detachEvent("ondataavailable", responder);=0A=
        element.detachEvent("onfilterchange",  responder);=0A=
      }=0A=
    } else {=0A=
      if (element.removeEventListener)=0A=
        element.removeEventListener(actualEventName, responder, false);=0A=
      else=0A=
        element.detachEvent('on' + actualEventName, responder);=0A=
    }=0A=
=0A=
    registry.set(eventName, responders.without(responder));=0A=
=0A=
    return element;=0A=
  }=0A=
=0A=
  function fire(element, eventName, memo, bubble) {=0A=
    element =3D $(element);=0A=
=0A=
    if (Object.isUndefined(bubble))=0A=
      bubble =3D true;=0A=
=0A=
    if (element =3D=3D document && document.createEvent && =
!element.dispatchEvent)=0A=
      element =3D document.documentElement;=0A=
=0A=
    var event;=0A=
    if (document.createEvent) {=0A=
      event =3D document.createEvent('HTMLEvents');=0A=
      event.initEvent('dataavailable', true, true);=0A=
    } else {=0A=
      event =3D document.createEventObject();=0A=
      event.eventType =3D bubble ? 'ondataavailable' : 'onfilterchange';=0A=
    }=0A=
=0A=
    event.eventName =3D eventName;=0A=
    event.memo =3D memo || { };=0A=
=0A=
    if (document.createEvent)=0A=
      element.dispatchEvent(event);=0A=
    else=0A=
      element.fireEvent(event.eventType, event);=0A=
=0A=
    return Event.extend(event);=0A=
  }=0A=
=0A=
=0A=
  Object.extend(Event, Event.Methods);=0A=
=0A=
  Object.extend(Event, {=0A=
    fire:          fire,=0A=
    observe:       observe,=0A=
    stopObserving: stopObserving=0A=
  });=0A=
=0A=
  Element.addMethods({=0A=
    fire:          fire,=0A=
=0A=
    observe:       observe,=0A=
=0A=
    stopObserving: stopObserving=0A=
  });=0A=
=0A=
  Object.extend(document, {=0A=
    fire:          fire.methodize(),=0A=
=0A=
    observe:       observe.methodize(),=0A=
=0A=
    stopObserving: stopObserving.methodize(),=0A=
=0A=
    loaded:        false=0A=
  });=0A=
=0A=
  if (window.Event) Object.extend(window.Event, Event);=0A=
  else window.Event =3D Event;=0A=
})();=0A=
=0A=
(function() {=0A=
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,=0A=
     Matthias Miller, Dean Edwards, John Resig, and Diego Perini. */=0A=
=0A=
  var timer;=0A=
=0A=
  function fireContentLoadedEvent() {=0A=
    if (document.loaded) return;=0A=
    if (timer) window.clearTimeout(timer);=0A=
    document.loaded =3D true;=0A=
    document.fire('dom:loaded');=0A=
  }=0A=
=0A=
  function checkReadyState() {=0A=
    if (document.readyState =3D=3D=3D 'complete') {=0A=
      document.stopObserving('readystatechange', checkReadyState);=0A=
      fireContentLoadedEvent();=0A=
    }=0A=
  }=0A=
=0A=
  function pollDoScroll() {=0A=
    try { document.documentElement.doScroll('left'); }=0A=
    catch(e) {=0A=
      timer =3D pollDoScroll.defer();=0A=
      return;=0A=
    }=0A=
    fireContentLoadedEvent();=0A=
  }=0A=
=0A=
  if (document.addEventListener) {=0A=
    document.addEventListener('DOMContentLoaded', =
fireContentLoadedEvent, false);=0A=
  } else {=0A=
    document.observe('readystatechange', checkReadyState);=0A=
    if (window =3D=3D top)=0A=
      timer =3D pollDoScroll.defer();=0A=
  }=0A=
=0A=
  Event.observe(window, 'load', fireContentLoadedEvent);=0A=
})();=0A=
=0A=
Element.addMethods();=0A=
=0A=
/*------------------------------- DEPRECATED =
-------------------------------*/=0A=
=0A=
Hash.toQueryString =3D Object.toQueryString;=0A=
=0A=
var Toggle =3D { display: Element.toggle };=0A=
=0A=
Element.Methods.childOf =3D Element.Methods.descendantOf;=0A=
=0A=
var Insertion =3D {=0A=
  Before: function(element, content) {=0A=
    return Element.insert(element, {before:content});=0A=
  },=0A=
=0A=
  Top: function(element, content) {=0A=
    return Element.insert(element, {top:content});=0A=
  },=0A=
=0A=
  Bottom: function(element, content) {=0A=
    return Element.insert(element, {bottom:content});=0A=
  },=0A=
=0A=
  After: function(element, content) {=0A=
    return Element.insert(element, {after:content});=0A=
  }=0A=
};=0A=
=0A=
var $continue =3D new Error('"throw $continue" is deprecated, use =
"return" instead');=0A=
=0A=
var Position =3D {=0A=
  includeScrollOffsets: false,=0A=
=0A=
  prepare: function() {=0A=
    this.deltaX =3D  window.pageXOffset=0A=
                || document.documentElement.scrollLeft=0A=
                || document.body.scrollLeft=0A=
                || 0;=0A=
    this.deltaY =3D  window.pageYOffset=0A=
                || document.documentElement.scrollTop=0A=
                || document.body.scrollTop=0A=
                || 0;=0A=
  },=0A=
=0A=
  within: function(element, x, y) {=0A=
    if (this.includeScrollOffsets)=0A=
      return this.withinIncludingScrolloffsets(element, x, y);=0A=
    this.xcomp =3D x;=0A=
    this.ycomp =3D y;=0A=
    this.offset =3D Element.cumulativeOffset(element);=0A=
=0A=
    return (y >=3D this.offset[1] &&=0A=
            y <  this.offset[1] + element.offsetHeight &&=0A=
            x >=3D this.offset[0] &&=0A=
            x <  this.offset[0] + element.offsetWidth);=0A=
  },=0A=
=0A=
  withinIncludingScrolloffsets: function(element, x, y) {=0A=
    var offsetcache =3D Element.cumulativeScrollOffset(element);=0A=
=0A=
    this.xcomp =3D x + offsetcache[0] - this.deltaX;=0A=
    this.ycomp =3D y + offsetcache[1] - this.deltaY;=0A=
    this.offset =3D Element.cumulativeOffset(element);=0A=
=0A=
    return (this.ycomp >=3D this.offset[1] &&=0A=
            this.ycomp <  this.offset[1] + element.offsetHeight &&=0A=
            this.xcomp >=3D this.offset[0] &&=0A=
            this.xcomp <  this.offset[0] + element.offsetWidth);=0A=
  },=0A=
=0A=
  overlap: function(mode, element) {=0A=
    if (!mode) return 0;=0A=
    if (mode =3D=3D 'vertical')=0A=
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /=0A=
        element.offsetHeight;=0A=
    if (mode =3D=3D 'horizontal')=0A=
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /=0A=
        element.offsetWidth;=0A=
  },=0A=
=0A=
=0A=
  cumulativeOffset: Element.Methods.cumulativeOffset,=0A=
=0A=
  positionedOffset: Element.Methods.positionedOffset,=0A=
=0A=
  absolutize: function(element) {=0A=
    Position.prepare();=0A=
    return Element.absolutize(element);=0A=
  },=0A=
=0A=
  relativize: function(element) {=0A=
    Position.prepare();=0A=
    return Element.relativize(element);=0A=
  },=0A=
=0A=
  realOffset: Element.Methods.cumulativeScrollOffset,=0A=
=0A=
  offsetParent: Element.Methods.getOffsetParent,=0A=
=0A=
  page: Element.Methods.viewportOffset,=0A=
=0A=
  clone: function(source, target, options) {=0A=
    options =3D options || { };=0A=
    return Element.clonePosition(target, source, options);=0A=
  }=0A=
};=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
if (!document.getElementsByClassName) document.getElementsByClassName =
=3D function(instanceMethods){=0A=
  function iter(name) {=0A=
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' =
" + name + " ')]";=0A=
  }=0A=
=0A=
  instanceMethods.getElementsByClassName =3D =
Prototype.BrowserFeatures.XPath ?=0A=
  function(element, className) {=0A=
    className =3D className.toString().strip();=0A=
    var cond =3D /\s/.test(className) ? $w(className).map(iter).join('') =
: iter(className);=0A=
    return cond ? document._getElementsByXPath('.//*' + cond, element) : =
[];=0A=
  } : function(element, className) {=0A=
    className =3D className.toString().strip();=0A=
    var elements =3D [], classNames =3D (/\s/.test(className) ? =
$w(className) : null);=0A=
    if (!classNames && !className) return elements;=0A=
=0A=
    var nodes =3D $(element).getElementsByTagName('*');=0A=
    className =3D ' ' + className + ' ';=0A=
=0A=
    for (var i =3D 0, child, cn; child =3D nodes[i]; i++) {=0A=
      if (child.className && (cn =3D ' ' + child.className + ' ') && =
(cn.include(className) ||=0A=
          (classNames && classNames.all(function(name) {=0A=
            return !name.toString().blank() && cn.include(' ' + name + ' =
');=0A=
          }))))=0A=
        elements.push(Element.extend(child));=0A=
    }=0A=
    return elements;=0A=
  };=0A=
=0A=
  return function(className, parentElement) {=0A=
    return $(parentElement || =
document.body).getElementsByClassName(className);=0A=
  };=0A=
}(Element.Methods);=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
Element.ClassNames =3D Class.create();=0A=
Element.ClassNames.prototype =3D {=0A=
  initialize: function(element) {=0A=
    this.element =3D $(element);=0A=
  },=0A=
=0A=
  _each: function(iterator) {=0A=
    this.element.className.split(/\s+/).select(function(name) {=0A=
      return name.length > 0;=0A=
    })._each(iterator);=0A=
  },=0A=
=0A=
  set: function(className) {=0A=
    this.element.className =3D className;=0A=
  },=0A=
=0A=
  add: function(classNameToAdd) {=0A=
    if (this.include(classNameToAdd)) return;=0A=
    this.set($A(this).concat(classNameToAdd).join(' '));=0A=
  },=0A=
=0A=
  remove: function(classNameToRemove) {=0A=
    if (!this.include(classNameToRemove)) return;=0A=
    this.set($A(this).without(classNameToRemove).join(' '));=0A=
  },=0A=
=0A=
  toString: function() {=0A=
    return $A(this).join(' ');=0A=
  }=0A=
};=0A=
=0A=
Object.extend(Element.ClassNames.prototype, Enumerable);=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
// Copyright (c) 2005-2008 Thomas Fuchs (http://script.aculo.us, =
http://mir.aculo.us)=0A=
// Contributors:=0A=
//  Justin Palmer (http://encytemedia.com/)=0A=
//  Mark Pilgrim (http://diveintomark.org/)=0A=
//  Martin Bialasinki=0A=
//=0A=
// script.aculo.us is freely distributable under the terms of an =
MIT-style license.=0A=
// For details, see the script.aculo.us web site: http://script.aculo.us/=0A=
=0A=
// converts rgb() and #xxx to #xxxxxx format,=0A=
// returns self (or first argument) if not convertable=0A=
String.prototype.parseColor =3D function() {=0A=
  var color =3D '#';=0A=
  if (this.slice(0,4) =3D=3D 'rgb(') {=0A=
    var cols =3D this.slice(4,this.length-1).split(',');=0A=
    var i=3D0; do { color +=3D parseInt(cols[i]).toColorPart() } while =
(++i<3);=0A=
  } else {=0A=
    if (this.slice(0,1) =3D=3D '#') {=0A=
      if (this.length=3D=3D4) for(var i=3D1;i<4;i++) color +=3D =
(this.charAt(i) + this.charAt(i)).toLowerCase();=0A=
      if (this.length=3D=3D7) color =3D this.toLowerCase();=0A=
    }=0A=
  }=0A=
  return (color.length=3D=3D7 ? color : (arguments[0] || this));=0A=
};=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
Element.collectTextNodes =3D function(element) {=0A=
  return $A($(element).childNodes).collect( function(node) {=0A=
    return (node.nodeType=3D=3D3 ? node.nodeValue :=0A=
      (node.hasChildNodes() ? Element.collectTextNodes(node) : ''));=0A=
  }).flatten().join('');=0A=
};=0A=
=0A=
Element.collectTextNodesIgnoreClass =3D function(element, className) {=0A=
  return $A($(element).childNodes).collect( function(node) {=0A=
    return (node.nodeType=3D=3D3 ? node.nodeValue :=0A=
      ((node.hasChildNodes() && !Element.hasClassName(node,className)) ?=0A=
        Element.collectTextNodesIgnoreClass(node, className) : ''));=0A=
  }).flatten().join('');=0A=
};=0A=
=0A=
Element.setContentZoom =3D function(element, percent) {=0A=
  element =3D $(element);=0A=
  element.setStyle({fontSize: (percent/100) + 'em'});=0A=
  if (Prototype.Browser.WebKit) window.scrollBy(0,0);=0A=
  return element;=0A=
};=0A=
=0A=
Element.getInlineOpacity =3D function(element){=0A=
  return $(element).style.opacity || '';=0A=
};=0A=
=0A=
Element.forceRerendering =3D function(element) {=0A=
  try {=0A=
    element =3D $(element);=0A=
    var n =3D document.createTextNode(' ');=0A=
    element.appendChild(n);=0A=
    element.removeChild(n);=0A=
  } catch(e) { }=0A=
};=0A=
=0A=
/*-----------------------------------------------------------------------=
---*/=0A=
=0A=
var Effect =3D {=0A=
  _elementDoesNotExistError: {=0A=
    name: 'ElementDoesNotExistError',=0A=
    message: 'The specified DOM element does not exist, but is required =
for this effect to operate'=0A=
  },=0A=
  Transitions: {=0A=
    linear: Prototype.K,=0A=
    sinoidal: function(pos) {=0A=
      return (-Math.cos(pos*Math.PI)/2) + .5;=0A=
    },=0A=
    reverse: function(pos) {=0A=
      return 1-pos;=0A=
    },=0A=
    flicker: function(pos) {=0A=
      var pos =3D ((-Math.cos(pos*Math.PI)/4) + .75) + Math.random()/4;=0A=
      return pos > 1 ? 1 : pos;=0A=
    },=0A=
    wobble: function(pos) {=0A=
      return (-Math.cos(pos*Math.PI*(9*pos))/2) + .5;=0A=
    },=0A=
    pulse: function(pos, pulses) {=0A=
      return (-Math.cos((pos*((pulses||5)-.5)*2)*Math.PI)/2) + .5;=0A=
    },=0A=
    spring: function(pos) {=0A=
      return 1 - (Math.cos(pos * 4.5 * Math.PI) * Math.exp(-pos * 6));=0A=
    },=0A=
    none: function(pos) {=0A=
      return 0;=0A=
    },=0A=
    full: function(pos) {=0A=
      return 1;=0A=
    }=0A=
  },=0A=
  DefaultOptions: {=0A=
    duration:   1.0,   // seconds=0A=
    fps:        100,   // 100=3D assume 66fps max.=0A=
    sync:       false, // true for combining=0A=
    from:       0.0,=0A=
    to:         1.0,=0A=
    delay:      0.0,=0A=
    queue:      'parallel'=0A=
  },=0A=
  tagifyText: function(element) {=0A=
    var tagifyStyle =3D 'position:relative';=0A=
    if (Prototype.Browser.IE) tagifyStyle +=3D ';zoom:1';=0A=
=0A=
    element =3D $(element);=0A=
    $A(element.childNodes).each( function(child) {=0A=
      if (child.nodeType=3D=3D3) {=0A=
        child.nodeValue.toArray().each( function(character) {=0A=
          element.insertBefore(=0A=
            new Element('span', {style: tagifyStyle}).update(=0A=
              character =3D=3D ' ' ? String.fromCharCode(160) : =
character),=0A=
              child);=0A=
        });=0A=
        Element.remove(child);=0A=
      }=0A=
    });=0A=
  },=0A=
  multiple: function(element, effect) {=0A=
    var elements;=0A=
    if (((typeof element =3D=3D 'object') ||=0A=
        Object.isFunction(element)) &&=0A=
       (element.length))=0A=
      elements =3D element;=0A=
    else=0A=
      elements =3D $(element).childNodes;=0A=
=0A=
    var options =3D Object.extend({=0A=
      speed: 0.1,=0A=
      delay: 0.0=0A=
    }, arguments[2] || { });=0A=
    var masterDelay =3D options.delay;=0A=
=0A=
    $A(elements).each( function(element, index) {=0A=
      new effect(element, Object.extend(options, { delay: index * =
options.speed + masterDelay }));=0A=
    });=0A=
  },=0A=
  PAIRS: {=0A=
    'slide':  ['SlideDown','SlideUp'],=0A=
    'blind':  ['BlindDown','BlindUp'],=0A=
    'appear': ['Appear','Fade']=0A=
  },=0A=
  toggle: function(element, effect) {=0A=
    element =3D $(element);=0A=
    effect =3D (effect || 'appear').toLowerCase();=0A=
    var options =3D Object.extend({=0A=
      queue: { position:'end', scope:(element.id || 'global'), limit: 1 }=0A=
    }, arguments[2] || { });=0A=
    Effect[element.visible() ?=0A=
      Effect.PAIRS[effect][1] : Effect.PAIRS[effect][0]](element, =
options);=0A=
  }=0A=
};=0A=
=0A=
Effect.DefaultOptions.transition =3D Effect.Transitions.sinoidal;=0A=
=0A=
/* ------------- core effects ------------- */=0A=
=0A=
Effect.ScopedQueue =3D Class.create(Enumerable, {=0A=
  initialize: function() {=0A=
    this.effects  =3D [];=0A=
    this.interval =3D null;=0A=
  },=0A=
  _each: function(iterator) {=0A=
    this.effects._each(iterator);=0A=
  },=0A=
  add: function(effect) {=0A=
    var timestamp =3D new Date().getTime();=0A=
=0A=
    var position =3D Object.isString(effect.options.queue) ?=0A=
      effect.options.queue : effect.options.queue.position;=0A=
=0A=
    switch(position) {=0A=
      case 'front':=0A=
        // move unstarted effects after this effect=0A=
        this.effects.findAll(function(e){ return e.state=3D=3D'idle' =
}).each( function(e) {=0A=
            e.startOn  +=3D effect.finishOn;=0A=
            e.finishOn +=3D effect.finishOn;=0A=
          });=0A=
        break;=0A=
      case 'with-last':=0A=
        timestamp =3D this.effects.pluck('startOn').max() || timestamp;=0A=
        break;=0A=
      case 'end':=0A=
        // start effect after last queued effect has finished=0A=
        timestamp =3D this.effects.pluck('finishOn').max() || timestamp;=0A=
        break;=0A=
    }=0A=
=0A=
    effect.startOn  +=3D timestamp;=0A=
    effect.finishOn +=3D timestamp;=0A=
=0A=
    if (!effect.options.queue.limit || (this.effects.length < =
effect.options.queue.limit))=0A=
      this.effects.push(effect);=0A=
=0A=
    if (!this.interval)=0A=
      this.interval =3D setInterval(this.loop.bind(this), 15);=0A=
  },=0A=
  remove: function(effect) {=0A=
    this.effects =3D this.effects.reject(function(e) { return =
e=3D=3Deffect });=0A=
    if (this.effects.length =3D=3D 0) {=0A=
      clearInterval(this.interval);=0A=
      this.interval =3D null;=0A=
    }=0A=
  },=0A=
  loop: function() {=0A=
    var timePos =3D new Date().getTime();=0A=
    for(var i=3D0, len=3Dthis.effects.length;i<len;i++)=0A=
      this.effects[i] && this.effects[i].loop(timePos);=0A=
  }=0A=
});=0A=
=0A=
Effect.Queues =3D {=0A=
  instances: $H(),=0A=
  get: function(queueName) {=0A=
    if (!Object.isString(queueName)) return queueName;=0A=
=0A=
    return this.instances.get(queueName) ||=0A=
      this.instances.set(queueName, new Effect.ScopedQueue());=0A=
  }=0A=
};=0A=
Effect.Queue =3D Effect.Queues.get('global');=0A=
=0A=
Effect.Base =3D Class.create({=0A=
  position: null,=0A=
  start: function(options) {=0A=
    function codeForEvent(options,eventName){=0A=
      return (=0A=
        (options[eventName+'Internal'] ? =
'this.options.'+eventName+'Internal(this);' : '') +=0A=
        (options[eventName] ? 'this.options.'+eventName+'(this);' : '')=0A=
      );=0A=
    }=0A=
    if (options && options.transition =3D=3D=3D false) =
options.transition =3D Effect.Transitions.linear;=0A=
    this.options      =3D Object.extend(Object.extend({ =
},Effect.DefaultOptions), options || { });=0A=
    this.currentFrame =3D 0;=0A=
    this.state        =3D 'idle';=0A=
    this.startOn      =3D this.options.delay*1000;=0A=
    this.finishOn     =3D this.startOn+(this.options.duration*1000);=0A=
    this.fromToDelta  =3D this.options.to-this.options.from;=0A=
    this.totalTime    =3D this.finishOn-this.startOn;=0A=
    this.totalFrames  =3D this.options.fps*this.options.duration;=0A=
=0A=
    this.render =3D (function() {=0A=
      function dispatch(effect, eventName) {=0A=
        if (effect.options[eventName + 'Internal'])=0A=
          effect.options[eventName + 'Internal'](effect);=0A=
        if (effect.options[eventName])=0A=
          effect.options[eventName](effect);=0A=
      }=0A=
=0A=
      return function(pos) {=0A=
        if (this.state =3D=3D=3D "idle") {=0A=
          this.state =3D "running";=0A=
          dispatch(this, 'beforeSetup');=0A=
          if (this.setup) this.setup();=0A=
          dispatch(this, 'afterSetup');=0A=
        }=0A=
        if (this.state =3D=3D=3D "running") {=0A=
          pos =3D (this.options.transition(pos) * this.fromToDelta) + =
this.options.from;=0A=
          this.position =3D pos;=0A=
          dispatch(this, 'beforeUpdate');=0A=
          if (this.update) this.update(pos);=0A=
          dispatch(this, 'afterUpdate');=0A=
        }=0A=
      };=0A=
    })();=0A=
=0A=
    this.event('beforeStart');=0A=
    if (!this.options.sync)=0A=
      Effect.Queues.get(Object.isString(this.options.queue) ?=0A=
        'global' : this.options.queue.scope).add(this);=0A=
  },=0A=
  loop: function(timePos) {=0A=
    if (timePos >=3D this.startOn) {=0A=
      if (timePos >=3D this.finishOn) {=0A=
        this.render(1.0);=0A=
        this.cancel();=0A=
        this.event('beforeFinish');=0A=
        if (this.finish) this.finish();=0A=
        this.event('afterFinish');=0A=
        return;=0A=
      }=0A=
      var pos   =3D (timePos - this.startOn) / this.totalTime,=0A=
          frame =3D (pos * this.totalFrames).round();=0A=
      if (frame > this.currentFrame) {=0A=
        this.render(pos);=0A=
        this.currentFrame =3D frame;=0A=
      }=0A=
    }=0A=
  },=0A=
  cancel: function() {=0A=
    if (!this.options.sync)=0A=
      Effect.Queues.get(Object.isString(this.options.queue) ?=0A=
        'global' : this.options.queue.scope).remove(this);=0A=
    this.state =3D 'finished';=0A=
  },=0A=
  event: function(eventName) {=0A=
    if (this.options[eventName + 'Internal']) this.options[eventName + =
'Internal'](this);=0A=
    if (this.options[eventName]) this.options[eventName](this);=0A=
  },=0A=
  inspect: function() {=0A=
    var data =3D $H();=0A=
    for(property in this)=0A=
      if (!Object.isFunction(this[property])) data.set(property, =
this[property]);=0A=
    return '#<Effect:' + data.inspect() + ',options:' + =
$H(this.options).inspect() + '>';=0A=
  }=0A=
});=0A=
=0A=
Effect.Parallel =3D Class.create(Effect.Base, {=0A=
  initialize: function(effects) {=0A=
    this.effects =3D effects || [];=0A=
    this.start(arguments[1]);=0A=
  },=0A=
  update: function(position) {=0A=
    this.effects.invoke('render', position);=0A=
  },=0A=
  finish: function(position) {=0A=
    this.effects.each( function(effect) {=0A=
      effect.render(1.0);=0A=
      effect.cancel();=0A=
      effect.event('beforeFinish');=0A=
      if (effect.finish) effect.finish(position);=0A=
      effect.event('afterFinish');=0A=
    });=0A=
  }=0A=
});=0A=
=0A=
Effect.Tween =3D Class.create(Effect.Base, {=0A=
  initialize: function(object, from, to) {=0A=
    object =3D Object.isString(object) ? $(object) : object;=0A=
    var args =3D $A(arguments), method =3D args.last(),=0A=
      options =3D args.length =3D=3D 5 ? args[3] : null;=0A=
    this.method =3D Object.isFunction(method) ? method.bind(object) :=0A=
      Object.isFunction(object[method]) ? object[method].bind(object) :=0A=
      function(value) { object[method] =3D value };=0A=
    this.start(Object.extend({ from: from, to: to }, options || { }));=0A=
  },=0A=
  update: function(position) {=0A=
    this.method(position);=0A=
  }=0A=
});=0A=
=0A=
Effect.Event =3D Class.create(Effect.Base, {=0A=
  initialize: function() {=0A=
    this.start(Object.extend({ duration: 0 }, arguments[0] || { }));=0A=
  },=0A=
  update: Prototype.emptyFunction=0A=
});=0A=
=0A=
Effect.Opacity =3D Class.create(Effect.Base, {=0A=
  initialize: function(element) {=0A=
    this.element =3D $(element);=0A=
    if (!this.element) throw(Effect._elementDoesNotExistError);=0A=
    // make this work on IE on elements without 'layout'=0A=
    if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))=0A=
      this.element.setStyle({zoom: 1});=0A=
    var options =3D Object.extend({=0A=
      from: this.element.getOpacity() || 0.0,=0A=
      to:   1.0=0A=
    }, arguments[1] || { });=0A=
    this.start(options);=0A=
  },=0A=
  update: function(position) {=0A=
    this.element.setOpacity(position);=0A=
  }=0A=
});=0A=
=0A=
Effect.Move =3D Class.create(Effect.Base, {=0A=
  initialize: function(element) {=0A=
    this.element =3D $(element);=0A=
    if (!this.element) throw(Effect._elementDoesNotExistError);=0A=
    var options =3D Object.extend({=0A=
      x:    0,=0A=
      y:    0,=0A=
      mode: 'relative'=0A=
    }, arguments[1] || { });=0A=
    this.start(options);=0A=
  },=0A=
  setup: function() {=0A=
    this.element.makePositioned();=0A=
    this.originalLeft =3D parseFloat(this.element.getStyle('left') || =
'0');=0A=
    this.originalTop  =3D parseFloat(this.element.getStyle('top')  || =
'0');=0A=
    if (this.options.mode =3D=3D 'absolute') {=0A=
      this.options.x =3D this.options.x - this.originalLeft;=0A=
      this.options.y =3D this.options.y - this.originalTop;=0A=
    }=0A=
  },=0A=
  update: function(position) {=0A=
    this.element.setStyle({=0A=
      left: (this.options.x  * position + this.originalLeft).round() + =
'px',=0A=
      top:  (this.options.y  * position + this.originalTop).round()  + =
'px'=0A=
    });=0A=
  }=0A=
});=0A=
=0A=
// for backwards compatibility=0A=
Effect.MoveBy =3D function(element, toTop, toLeft) {=0A=
  return new Effect.Move(element,=0A=
    Object.extend({ x: toLeft, y: toTop }, arguments[3] || { }));=0A=
};=0A=
=0A=
Effect.Scale =3D Class.create(Effect.Base, {=0A=
  initialize: function(element, percent) {=0A=
    this.element =3D $(element);=0A=
    if (!this.element) throw(Effect._elementDoesNotExistError);=0A=
    var options =3D Object.extend({=0A=
      scaleX: true,=0A=
      scaleY: true,=0A=
      scaleContent: true,=0A=
      scaleFromCenter: false,=0A=
      scaleMode: 'box',        // 'box' or 'contents' or { } with =
provided values=0A=
      scaleFrom: 100.0,=0A=
      scaleTo:   percent=0A=
    }, arguments[2] || { });=0A=
    this.start(options);=0A=
  },=0A=
  setup: function() {=0A=
    this.restoreAfterFinish =3D this.options.restoreAfterFinish || false;=0A=
    this.elementPositioning =3D this.element.getStyle('position');=0A=
=0A=
    this.originalStyle =3D { };=0A=
    ['top','left','width','height','fontSize'].each( function(k) {=0A=
      this.originalStyle[k] =3D this.element.style[k];=0A=
    }.bind(this));=0A=
=0A=
    this.originalTop  =3D this.element.offsetTop;=0A=
    this.originalLeft =3D this.element.offsetLeft;=0A=
=0A=
    var fontSize =3D this.element.getStyle('font-size') || '100%';=0A=
    ['em','px','%','pt'].each( function(fontSizeType) {=0A=
      if (fontSize.indexOf(fontSizeType)>0) {=0A=
        this.fontSize     =3D parseFloat(fontSize);=0A=
        this.fontSizeType =3D fontSizeType;=0A=
      }=0A=
    }.bind(this));=0A=
=0A=
    this.factor =3D (this.options.scaleTo - this.options.scaleFrom)/100;=0A=
=0A=
    this.dims =3D null;=0A=
    if (this.options.scaleMode=3D=3D'box')=0A=
      this.dims =3D [this.element.offsetHeight, =
this.element.offsetWidth];=0A=
    if (/^content/.test(this.options.scaleMode))=0A=
      this.dims =3D [this.element.scrollHeight, =
this.element.scrollWidth];=0A=
    if (!this.dims)=0A=
      this.dims =3D [this.options.scaleMode.originalHeight,=0A=
                   this.options.scaleMode.originalWidth];=0A=
  },=0A=
  update: function(position) {=0A=
    var currentScale =3D (this.options.scaleFrom/100.0) + (this.factor * =
position);=0A=
    if (this.options.scaleContent && this.fontSize)=0A=
      this.element.setStyle({fontSize: this.fontSize * currentScale + =
this.fontSizeType });=0A=
    this.setDimensions(this.dims[0] * currentScale, this.dims[1] * =
currentScale);=0A=
  },=0A=
  finish: function(position) {=0A=
    if (this.restoreAfterFinish) =
this.element.setStyle(this.originalStyle);=0A=
  },=0A=
  setDimensions: function(height, width) {=0A=
    var d =3D { };=0A=
    if (this.options.scaleX) d.width =3D width.round() + 'px';=0A=
    if (this.options.scaleY) d.height =3D height.round() + 'px';=0A=
    if (this.options.scaleFromCenter) {=0A=
      var topd  =3D (height - this.dims[0])/2;=0A=
      var leftd =3D (width  - this.dims[1])/2;=0A=
      if (this.elementPositioning =3D=3D 'absolute') {=0A=
        if (this.options.scaleY) d.top =3D this.originalTop-topd + 'px';=0A=
        if (this.options.scaleX) d.left =3D this.originalLeft-leftd + =
'px';=0A=
      } else {=0A=
        if (this.options.scaleY) d.top =3D -topd + 'px';=0A=
        if (this.options.scaleX) d.left =3D -leftd + 'px';=0A=
      }=0A=
    }=0A=
    this.element.setStyle(d);=0A=
  }=0A=
});=0A=
=0A=
Effect.Highlight =3D Class.create(Effect.Base, {=0A=
  initialize: function(element) {=0A=
    this.element =3D $(element);=0A=
    if (!this.element) throw(Effect._elementDoesNotExistError);=0A=
    var options =3D Object.extend({ startcolor: '#ffff99' }, =
arguments[1] || { });=0A=
    this.start(options);=0A=
  },=0A=
  setup: function() {=0A=
    // Prevent executing on elements not in the layout flow=0A=
    if (this.element.getStyle('display')=3D=3D'none') { this.cancel(); =
return; }=0A=
    // Disable background image during the effect=0A=
    this.oldStyle =3D { };=0A=
    if (!this.options.keepBackgroundImage) {=0A=
      this.oldStyle.backgroundImage =3D =
this.element.getStyle('background-image');=0A=
      this.element.setStyle({backgroundImage: 'none'});=0A=
    }=0A=
    if (!this.options.endcolor)=0A=
      this.options.endcolor =3D =
this.element.getStyle('background-color').parseColor('#ffffff');=0A=
    if (!this.options.restorecolor)=0A=
      this.options.restorecolor =3D =
this.element.getStyle('background-color');=0A=
    // init color calculations=0A=
    this._base  =3D $R(0,2).map(function(i){ return =
parseInt(this.options.startcolor.slice(i*2+1,i*2+3),16) }.bind(this));=0A=
    this._delta =3D $R(0,2).map(function(i){ return =
parseInt(this.options.endcolor.slice(i*2+1,i*2+3),16)-this._base[i] =
}.bind(this));=0A=
  },=0A=
  update: function(position) {=0A=
    this.element.setStyle({backgroundColor: =
$R(0,2).inject('#',function(m,v,i){=0A=
      return =
m+((this._base[i]+(this._delta[i]*position)).round().toColorPart()); =
}.bind(this)) });=0A=
  },=0A=
  finish: function() {=0A=
    this.element.setStyle(Object.extend(this.oldStyle, {=0A=
      backgroundColor: this.options.restorecolor=0A=
    }));=0A=
  }=0A=
});=0A=
=0A=
Effect.ScrollTo =3D function(element) {=0A=
  var options =3D arguments[1] || { },=0A=
  scrollOffsets =3D document.viewport.getScrollOffsets(),=0A=
  elementOffsets =3D $(element).cumulativeOffset();=0A=
=0A=
  if (options.offset) elementOffsets[1] +=3D options.offset;=0A=
=0A=
  return new Effect.Tween(null,=0A=
    scrollOffsets.top,=0A=
    elementOffsets[1],=0A=
    options,=0A=
    function(p){ scrollTo(scrollOffsets.left, p.round()); }=0A=
  );=0A=
};=0A=
=0A=
/* ------------- combination effects ------------- */=0A=
=0A=
Effect.Fade =3D function(element) {=0A=
  element =3D $(element);=0A=
  var oldOpacity =3D element.getInlineOpacity();=0A=
  var options =3D Object.extend({=0A=
    from: element.getOpacity() || 1.0,=0A=
    to:   0.0,=0A=
    afterFinishInternal: function(effect) {=0A=
      if (effect.options.to!=3D0) return;=0A=
      effect.element.hide().setStyle({opacity: oldOpacity});=0A=
    }=0A=
  }, arguments[1] || { });=0A=
  return new Effect.Opacity(element,options);=0A=
};=0A=
=0A=
Effect.Appear =3D function(element) {=0A=
  element =3D $(element);=0A=
  var options =3D Object.extend({=0A=
  from: (element.getStyle('display') =3D=3D 'none' ? 0.0 : =
element.getOpacity() || 0.0),=0A=
  to:   1.0,=0A=
  // force Safari to render floated elements properly=0A=
  afterFinishInternal: function(effect) {=0A=
    effect.element.forceRerendering();=0A=
  },=0A=
  beforeSetup: function(effect) {=0A=
    effect.element.setOpacity(effect.options.from).show();=0A=
  }}, arguments[1] || { });=0A=
  return new Effect.Opacity(element,options);=0A=
};=0A=
=0A=
Effect.Puff =3D function(element) {=0A=
  element =3D $(element);=0A=
  var oldStyle =3D {=0A=
    opacity: element.getInlineOpacity(),=0A=
    position: element.getStyle('position'),=0A=
    top:  element.style.top,=0A=
    left: element.style.left,=0A=
    width: element.style.width,=0A=
    height: element.style.height=0A=
  };=0A=
  return new Effect.Parallel(=0A=
   [ new Effect.Scale(element, 200,=0A=
      { sync: true, scaleFromCenter: true, scaleContent: true, =
restoreAfterFinish: true }),=0A=
     new Effect.Opacity(element, { sync: true, to: 0.0 } ) ],=0A=
     Object.extend({ duration: 1.0,=0A=
      beforeSetupInternal: function(effect) {=0A=
        Position.absolutize(effect.effects[0].element);=0A=
      },=0A=
      afterFinishInternal: function(effect) {=0A=
         effect.effects[0].element.hide().setStyle(oldStyle); }=0A=
     }, arguments[1] || { })=0A=
   );=0A=
};=0A=
=0A=
Effect.BlindUp =3D function(element) {=0A=
  element =3D $(element);=0A=
  element.makeClipping();=0A=
  return new Effect.Scale(element, 0,=0A=
    Object.extend({ scaleContent: false,=0A=
      scaleX: false,=0A=
      restoreAfterFinish: true,=0A=
      afterFinishInternal: function(effect) {=0A=
        effect.element.hide().undoClipping();=0A=
      }=0A=
    }, arguments[1] || { })=0A=
  );=0A=
};=0A=
=0A=
Effect.BlindDown =3D function(element) {=0A=
  element =3D $(element);=0A=
  var elementDimensions =3D element.getDimensions();=0A=
  return new Effect.Scale(element, 100, Object.extend({=0A=
    scaleContent: false,=0A=
    scaleX: false,=0A=
    scaleFrom: 0,=0A=
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: =
elementDimensions.width},=0A=
    restoreAfterFinish: true,=0A=
    afterSetup: function(effect) {=0A=
      effect.element.makeClipping().setStyle({height: '0px'}).show();=0A=
    },=0A=
    afterFinishInternal: function(effect) {=0A=
      effect.element.undoClipping();=0A=
    }=0A=
  }, arguments[1] || { }));=0A=
};=0A=
=0A=
Effect.SwitchOff =3D function(element) {=0A=
  element =3D $(element);=0A=
  var oldOpacity =3D element.getInlineOpacity();=0A=
  return new Effect.Appear(element, Object.extend({=0A=
    duration: 0.4,=0A=
    from: 0,=0A=
    transition: Effect.Transitions.flicker,=0A=
    afterFinishInternal: function(effect) {=0A=
      new Effect.Scale(effect.element, 1, {=0A=
        duration: 0.3, scaleFromCenter: true,=0A=
        scaleX: false, scaleContent: false, restoreAfterFinish: true,=0A=
        beforeSetup: function(effect) {=0A=
          effect.element.makePositioned().makeClipping();=0A=
        },=0A=
        afterFinishInternal: function(effect) {=0A=
          =
effect.element.hide().undoClipping().undoPositioned().setStyle({opacity: =
oldOpacity});=0A=
        }=0A=
      });=0A=
    }=0A=
  }, arguments[1] || { }));=0A=
};=0A=
=0A=
Effect.DropOut =3D function(element) {=0A=
  element =3D $(element);=0A=
  var oldStyle =3D {=0A=
    top: element.getStyle('top'),=0A=
    left: element.getStyle('left'),=0A=
    opacity: element.getInlineOpacity() };=0A=
  return new Effect.Parallel(=0A=
    [ new Effect.Move(element, {x: 0, y: 100, sync: true }),=0A=
      new Effect.Opacity(element, { sync: true, to: 0.0 }) ],=0A=
    Object.extend(=0A=
      { duration: 0.5,=0A=
        beforeSetup: function(effect) {=0A=
          effect.effects[0].element.makePositioned();=0A=
        },=0A=
        afterFinishInternal: function(effect) {=0A=
          =
effect.effects[0].element.hide().undoPositioned().setStyle(oldStyle);=0A=
        }=0A=
      }, arguments[1] || { }));=0A=
};=0A=
=0A=
Effect.Shake =3D function(element) {=0A=
  element =3D $(element);=0A=
  var options =3D Object.extend({=0A=
    distance: 20,=0A=
    duration: 0.5=0A=
  }, arguments[1] || {});=0A=
  var distance =3D parseFloat(options.distance);=0A=
  var split =3D parseFloat(options.duration) / 10.0;=0A=
  var oldStyle =3D {=0A=
    top: element.getStyle('top'),=0A=
    left: element.getStyle('left') };=0A=
    return new Effect.Move(element,=0A=
      { x:  distance, y: 0, duration: split, afterFinishInternal: =
function(effect) {=0A=
    new Effect.Move(effect.element,=0A=
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: =
function(effect) {=0A=
    new Effect.Move(effect.element,=0A=
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: =
function(effect) {=0A=
    new Effect.Move(effect.element,=0A=
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: =
function(effect) {=0A=
    new Effect.Move(effect.element,=0A=
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: =
function(effect) {=0A=
    new Effect.Move(effect.element,=0A=
      { x: -distance, y: 0, duration: split, afterFinishInternal: =
function(effect) {=0A=
        effect.element.undoPositioned().setStyle(oldStyle);=0A=
  }}); }}); }}); }}); }}); }});=0A=
};=0A=
=0A=
Effect.SlideDown =3D function(element) {=0A=
  element =3D $(element).cleanWhitespace();=0A=
  // SlideDown need to have the content of the element wrapped in a =
container element with fixed height!=0A=
  var oldInnerBottom =3D element.down().getStyle('bottom');=0A=
  var elementDimensions =3D element.getDimensions();=0A=
  return new Effect.Scale(element, 100, Object.extend({=0A=
    scaleContent: false,=0A=
    scaleX: false,=0A=
    scaleFrom: window.opera ? 0 : 1,=0A=
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: =
elementDimensions.width},=0A=
    restoreAfterFinish: true,=0A=
    afterSetup: function(effect) {=0A=
      effect.element.makePositioned();=0A=
      effect.element.down().makePositioned();=0A=
      if (window.opera) effect.element.setStyle({top: ''});=0A=
      effect.element.makeClipping().setStyle({height: '0px'}).show();=0A=
    },=0A=
    afterUpdateInternal: function(effect) {=0A=
      effect.element.down().setStyle({bottom:=0A=
        (effect.dims[0] - effect.element.clientHeight) + 'px' });=0A=
    },=0A=
    afterFinishInternal: function(effect) {=0A=
      effect.element.undoClipping().undoPositioned();=0A=
      effect.element.down().undoPositioned().setStyle({bottom: =
oldInnerBottom}); }=0A=
    }, arguments[1] || { })=0A=
  );=0A=
};=0A=
=0A=
Effect.SlideUp =3D function(element) {=0A=
  element =3D $(element).cleanWhitespace();=0A=
  var oldInnerBottom =3D element.down().getStyle('bottom');=0A=
  var elementDimensions =3D element.getDimensions();=0A=
  return new Effect.Scale(element, window.opera ? 0 : 1,=0A=
   Object.extend({ scaleContent: false,=0A=
    scaleX: false,=0A=
    scaleMode: 'box',=0A=
    scaleFrom: 100,=0A=
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: =
elementDimensions.width},=0A=
    restoreAfterFinish: true,=0A=
    afterSetup: function(effect) {=0A=
      effect.element.makePositioned();=0A=
      effect.element.down().makePositioned();=0A=
      if (window.opera) effect.element.setStyle({top: ''});=0A=
      effect.element.makeClipping().show();=0A=
    },=0A=
    afterUpdateInternal: function(effect) {=0A=
      effect.element.down().setStyle({bottom:=0A=
        (effect.dims[0] - effect.element.clientHeight) + 'px' });=0A=
    },=0A=
    afterFinishInternal: function(effect) {=0A=
      effect.element.hide().undoClipping().undoPositioned();=0A=
      effect.element.down().undoPositioned().setStyle({bottom: =
oldInnerBottom});=0A=
    }=0A=
   }, arguments[1] || { })=0A=
  );=0A=
};=0A=
=0A=
// Bug in opera makes the TD containing this element expand for a =
instance after finish=0A=
Effect.Squish =3D function(element) {=0A=
  return new Effect.Scale(element, window.opera ? 1 : 0, {=0A=
    restoreAfterFinish: true,=0A=
    beforeSetup: function(effect) {=0A=
      effect.element.makeClipping();=0A=
    },=0A=
    afterFinishInternal: function(effect) {=0A=
      effect.element.hide().undoClipping();=0A=
    }=0A=
  });=0A=
};=0A=
=0A=
Effect.Grow =3D function(element) {=0A=
  element =3D $(element);=0A=
  var options =3D Object.extend({=0A=
    direction: 'center',=0A=
    moveTransition: Effect.Transitions.sinoidal,=0A=
    scaleTransition: Effect.Transitions.sinoidal,=0A=
    opacityTransition: Effect.Transitions.full=0A=
  }, arguments[1] || { });=0A=
  var oldStyle =3D {=0A=
    top: element.style.top,=0A=
    left: element.style.left,=0A=
    height: element.style.height,=0A=
    width: element.style.width,=0A=
    opacity: element.getInlineOpacity() };=0A=
=0A=
  var dims =3D element.getDimensions();=0A=
  var initialMoveX, initialMoveY;=0A=
  var moveX, moveY;=0A=
=0A=
  switch (options.direction) {=0A=
    case 'top-left':=0A=
      initialMoveX =3D initialMoveY =3D moveX =3D moveY =3D 0;=0A=
      break;=0A=
    case 'top-right':=0A=
      initialMoveX =3D dims.width;=0A=
      initialMoveY =3D moveY =3D 0;=0A=
      moveX =3D -dims.width;=0A=
      break;=0A=
    case 'bottom-left':=0A=
      initialMoveX =3D moveX =3D 0;=0A=
      initialMoveY =3D dims.height;=0A=
      moveY =3D -dims.height;=0A=
      break;=0A=
    case 'bottom-right':=0A=
      initialMoveX =3D dims.width;=0A=
      initialMoveY =3D dims.height;=0A=
      moveX =3D -dims.width;=0A=
      moveY =3D -dims.height;=0A=
      break;=0A=
    case 'center':=0A=
      initialMoveX =3D dims.width / 2;=0A=
      initialMoveY =3D dims.height / 2;=0A=
      moveX =3D -dims.width / 2;=0A=
      moveY =3D -dims.height / 2;=0A=
      break;=0A=
  }=0A=
=0A=
  return new Effect.Move(element, {=0A=
    x: initialMoveX,=0A=
    y: initialMoveY,=0A=
    duration: 0.01,=0A=
    beforeSetup: function(effect) {=0A=
      effect.element.hide().makeClipping().makePositioned();=0A=
    },=0A=
    afterFinishInternal: function(effect) {=0A=
      new Effect.Parallel(=0A=
        [ new Effect.Opacity(effect.element, { sync: true, to: 1.0, =
from: 0.0, transition: options.opacityTransition }),=0A=
          new Effect.Move(effect.element, { x: moveX, y: moveY, sync: =
true, transition: options.moveTransition }),=0A=
          new Effect.Scale(effect.element, 100, {=0A=
            scaleMode: { originalHeight: dims.height, originalWidth: =
dims.width },=0A=
            sync: true, scaleFrom: window.opera ? 1 : 0, transition: =
options.scaleTransition, restoreAfterFinish: true})=0A=
        ], Object.extend({=0A=
             beforeSetup: function(effect) {=0A=
               effect.effects[0].element.setStyle({height: =
'0px'}).show();=0A=
             },=0A=
             afterFinishInternal: function(effect) {=0A=
               =
effect.effects[0].element.undoClipping().undoPositioned().setStyle(oldSty=
le);=0A=
             }=0A=
           }, options)=0A=
      );=0A=
    }=0A=
  });=0A=
};=0A=
=0A=
Effect.Shrink =3D function(element) {=0A=
  element =3D $(element);=0A=
  var options =3D Object.extend({=0A=
    direction: 'center',=0A=
    moveTransition: Effect.Transitions.sinoidal,=0A=
    scaleTransition: Effect.Transitions.sinoidal,=0A=
    opacityTransition: Effect.Transitions.none=0A=
  }, arguments[1] || { });=0A=
  var oldStyle =3D {=0A=
    top: element.style.top,=0A=
    left: element.style.left,=0A=
    height: element.style.height,=0A=
    width: element.style.width,=0A=
    opacity: element.getInlineOpacity() };=0A=
=0A=
  var dims =3D element.getDimensions();=0A=
  var moveX, moveY;=0A=
=0A=
  switch (options.direction) {=0A=
    case 'top-left':=0A=
      moveX =3D moveY =3D 0;=0A=
      break;=0A=
    case 'top-right':=0A=
      moveX =3D dims.width;=0A=
      moveY =3D 0;=0A=
      break;=0A=
    case 'bottom-left':=0A=
      moveX =3D 0;=0A=
      moveY =3D dims.height;=0A=
      break;=0A=
    case 'bottom-right':=0A=
      moveX =3D dims.width;=0A=
      moveY =3D dims.height;=0A=
      break;=0A=
    case 'center':=0A=
      moveX =3D dims.width / 2;=0A=
      moveY =3D dims.height / 2;=0A=
      break;=0A=
  }=0A=
=0A=
  return new Effect.Parallel(=0A=
    [ new Effect.Opacity(element, { sync: true, to: 0.0, from: 1.0, =
transition: options.opacityTransition }),=0A=
      new Effect.Scale(element, window.opera ? 1 : 0, { sync: true, =
transition: options.scaleTransition, restoreAfterFinish: true}),=0A=
      new Effect.Move(element, { x: moveX, y: moveY, sync: true, =
transition: options.moveTransition })=0A=
    ], Object.extend({=0A=
         beforeStartInternal: function(effect) {=0A=
           effect.effects[0].element.makePositioned().makeClipping();=0A=
         },=0A=
         afterFinishInternal: function(effect) {=0A=
           =
effect.effects[0].element.hide().undoClipping().undoPositioned().setStyle=
(oldStyle); }=0A=
       }, options)=0A=
  );=0A=
};=0A=
=0A=
Effect.Pulsate =3D function(element) {=0A=
  element =3D $(element);=0A=
  var options    =3D arguments[1] || { },=0A=
    oldOpacity =3D element.getInlineOpacity(),=0A=
    transition =3D options.transition || Effect.Transitions.linear,=0A=
    reverser   =3D function(pos){=0A=
      return 1 - =
transition((-Math.cos((pos*(options.pulses||5)*2)*Math.PI)/2) + .5);=0A=
    };=0A=
=0A=
  return new Effect.Opacity(element,=0A=
    Object.extend(Object.extend({  duration: 2.0, from: 0,=0A=
      afterFinishInternal: function(effect) { =
effect.element.setStyle({opacity: oldOpacity}); }=0A=
    }, options), {transition: reverser}));=0A=
};=0A=
=0A=
Effect.Fold =3D function(element) {=0A=
  element =3D $(element);=0A=
  var oldStyle =3D {=0A=
    top: element.style.top,=0A=
    left: element.style.left,=0A=
    width: element.style.width,=0A=
    height: element.style.height };=0A=
  element.makeClipping();=0A=
  return new Effect.Scale(element, 5, Object.extend({=0A=
    scaleContent: false,=0A=
    scaleX: false,=0A=
    afterFinishInternal: function(effect) {=0A=
    new Effect.Scale(element, 1, {=0A=
      scaleContent: false,=0A=
      scaleY: false,=0A=
      afterFinishInternal: function(effect) {=0A=
        effect.element.hide().undoClipping().setStyle(oldStyle);=0A=
      } });=0A=
  }}, arguments[1] || { }));=0A=
};=0A=
=0A=
Effect.Morph =3D Class.create(Effect.Base, {=0A=
  initialize: function(element) {=0A=
    this.element =3D $(element);=0A=
    if (!this.element) throw(Effect._elementDoesNotExistError);=0A=
    var options =3D Object.extend({=0A=
      style: { }=0A=
    }, arguments[1] || { });=0A=
=0A=
    if (!Object.isString(options.style)) this.style =3D =
$H(options.style);=0A=
    else {=0A=
      if (options.style.include(':'))=0A=
        this.style =3D options.style.parseStyle();=0A=
      else {=0A=
        this.element.addClassName(options.style);=0A=
        this.style =3D $H(this.element.getStyles());=0A=
        this.element.removeClassName(options.style);=0A=
        var css =3D this.element.getStyles();=0A=
        this.style =3D this.style.reject(function(style) {=0A=
          return style.value =3D=3D css[style.key];=0A=
        });=0A=
        options.afterFinishInternal =3D function(effect) {=0A=
          effect.element.addClassName(effect.options.style);=0A=
          effect.transforms.each(function(transform) {=0A=
            effect.element.style[transform.style] =3D '';=0A=
          });=0A=
        };=0A=
      }=0A=
    }=0A=
    this.start(options);=0A=
  },=0A=
=0A=
  setup: function(){=0A=
    function parseColor(color){=0A=
      if (!color || ['rgba(0, 0, 0, 0)','transparent'].include(color)) =
color =3D '#ffffff';=0A=
      color =3D color.parseColor();=0A=
      return $R(0,2).map(function(i){=0A=
        return parseInt( color.slice(i*2+1,i*2+3), 16 );=0A=
      });=0A=
    }=0A=
    this.transforms =3D this.style.map(function(pair){=0A=
      var property =3D pair[0], value =3D pair[1], unit =3D null;=0A=
=0A=
      if (value.parseColor('#zzzzzz') !=3D '#zzzzzz') {=0A=
        value =3D value.parseColor();=0A=
        unit  =3D 'color';=0A=
      } else if (property =3D=3D 'opacity') {=0A=
        value =3D parseFloat(value);=0A=
        if (Prototype.Browser.IE && =
(!this.element.currentStyle.hasLayout))=0A=
          this.element.setStyle({zoom: 1});=0A=
      } else if (Element.CSS_LENGTH.test(value)) {=0A=
          var components =3D value.match(/^([\+\-]?[0-9\.]+)(.*)$/);=0A=
          value =3D parseFloat(components[1]);=0A=
          unit =3D (components.length =3D=3D 3) ? components[2] : null;=0A=
      }=0A=
=0A=
      var originalValue =3D this.element.getStyle(property);=0A=
      return {=0A=
        style: property.camelize(),=0A=
        originalValue: unit=3D=3D'color' ? parseColor(originalValue) : =
parseFloat(originalValue || 0),=0A=
        targetValue: unit=3D=3D'color' ? parseColor(value) : value,=0A=
        unit: unit=0A=
      };=0A=
    }.bind(this)).reject(function(transform){=0A=
      return (=0A=
        (transform.originalValue =3D=3D transform.targetValue) ||=0A=
        (=0A=
          transform.unit !=3D 'color' &&=0A=
          (isNaN(transform.originalValue) || =
isNaN(transform.targetValue))=0A=
        )=0A=
      );=0A=
    });=0A=
  },=0A=
  update: function(position) {=0A=
    var style =3D { }, transform, i =3D this.transforms.length;=0A=
    while(i--)=0A=
      style[(transform =3D this.transforms[i]).style] =3D=0A=
        transform.unit=3D=3D'color' ? '#'+=0A=
          (Math.round(transform.originalValue[0]+=0A=
            =
(transform.targetValue[0]-transform.originalValue[0])*position)).toColorP=
art() +=0A=
          (Math.round(transform.originalValue[1]+=0A=
            =
(transform.targetValue[1]-transform.originalValue[1])*position)).toColorP=
art() +=0A=
          (Math.round(transform.originalValue[2]+=0A=
            =
(transform.targetValue[2]-transform.originalValue[2])*position)).toColorP=
art() :=0A=
        (transform.originalValue +=0A=
          (transform.targetValue - transform.originalValue) * =
position).toFixed(3) +=0A=
            (transform.unit =3D=3D=3D null ? '' : transform.unit);=0A=
    this.element.setStyle(style, true);=0A=
  }=0A=
});=0A=
=0A=
Effect.Transform =3D Class.create({=0A=
  initialize: function(tracks){=0A=
    this.tracks  =3D [];=0A=
    this.options =3D arguments[1] || { };=0A=
    this.addTracks(tracks);=0A=
  },=0A=
  addTracks: function(tracks){=0A=
    tracks.each(function(track){=0A=
      track =3D $H(track);=0A=
      var data =3D track.values().first();=0A=
      this.tracks.push($H({=0A=
        ids:     track.keys().first(),=0A=
        effect:  Effect.Morph,=0A=
        options: { style: data }=0A=
      }));=0A=
    }.bind(this));=0A=
    return this;=0A=
  },=0A=
  play: function(){=0A=
    return new Effect.Parallel(=0A=
      this.tracks.map(function(track){=0A=
        var ids =3D track.get('ids'), effect =3D track.get('effect'), =
options =3D track.get('options');=0A=
        var elements =3D [$(ids) || $$(ids)].flatten();=0A=
        return elements.map(function(e){ return new effect(e, =
Object.extend({ sync:true }, options)) });=0A=
      }).flatten(),=0A=
      this.options=0A=
    );=0A=
  }=0A=
});=0A=
=0A=
Element.CSS_PROPERTIES =3D $w(=0A=
  'backgroundColor backgroundPosition borderBottomColor =
borderBottomStyle ' +=0A=
  'borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth ' +=0A=
  'borderRightColor borderRightStyle borderRightWidth borderSpacing ' +=0A=
  'borderTopColor borderTopStyle borderTopWidth bottom clip color ' +=0A=
  'fontSize fontWeight height left letterSpacing lineHeight ' +=0A=
  'marginBottom marginLeft marginRight marginTop markerOffset maxHeight =
'+=0A=
  'maxWidth minHeight minWidth opacity outlineColor outlineOffset ' +=0A=
  'outlineWidth paddingBottom paddingLeft paddingRight paddingTop ' +=0A=
  'right textIndent top width wordSpacing zIndex');=0A=
=0A=
Element.CSS_LENGTH =3D =
/^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;=0A=
=0A=
String.__parseStyleElement =3D document.createElement('div');=0A=
String.prototype.parseStyle =3D function(){=0A=
  var style, styleRules =3D $H();=0A=
  if (Prototype.Browser.WebKit)=0A=
    style =3D new Element('div',{style:this}).style;=0A=
  else {=0A=
    String.__parseStyleElement.innerHTML =3D '<div style=3D"' + this + =
'"></div>';=0A=
    style =3D String.__parseStyleElement.childNodes[0].style;=0A=
  }=0A=
=0A=
  Element.CSS_PROPERTIES.each(function(property){=0A=
    if (style[property]) styleRules.set(property, style[property]);=0A=
  });=0A=
=0A=
  if (Prototype.Browser.IE && this.include('opacity'))=0A=
    styleRules.set('opacity', =
this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);=0A=
=0A=
  return styleRules;=0A=
};=0A=
=0A=
if (document.defaultView && document.defaultView.getComputedStyle) {=0A=
  Element.getStyles =3D function(element) {=0A=
    var css =3D document.defaultView.getComputedStyle($(element), null);=0A=
    return Element.CSS_PROPERTIES.inject({ }, function(styles, property) =
{=0A=
      styles[property] =3D css[property];=0A=
      return styles;=0A=
    });=0A=
  };=0A=
} else {=0A=
  Element.getStyles =3D function(element) {=0A=
    element =3D $(element);=0A=
    var css =3D element.currentStyle, styles;=0A=
    styles =3D Element.CSS_PROPERTIES.inject({ }, function(results, =
property) {=0A=
      results[property] =3D css[property];=0A=
      return results;=0A=
    });=0A=
    if (!styles.opacity) styles.opacity =3D element.getOpacity();=0A=
    return styles;=0A=
  };=0A=
}=0A=
=0A=
Effect.Methods =3D {=0A=
  morph: function(element, style) {=0A=
    element =3D $(element);=0A=
    new Effect.Morph(element, Object.extend({ style: style }, =
arguments[2] || { }));=0A=
    return element;=0A=
  },=0A=
  visualEffect: function(element, effect, options) {=0A=
    element =3D $(element);=0A=
    var s =3D effect.dasherize().camelize(), klass =3D =
s.charAt(0).toUpperCase() + s.substring(1);=0A=
    new Effect[klass](element, options);=0A=
    return element;=0A=
  },=0A=
  highlight: function(element, options) {=0A=
    element =3D $(element);=0A=
    new Effect.Highlight(element, options);=0A=
    return element;=0A=
  }=0A=
};=0A=
=0A=
$w('fade appear grow shrink fold blindUp blindDown slideUp slideDown '+=0A=
  'pulsate shake puff squish switchOff dropOut').each(=0A=
  function(effect) {=0A=
    Effect.Methods[effect] =3D function(element, options){=0A=
      element =3D $(element);=0A=
      Effect[effect.charAt(0).toUpperCase() + =
effect.substring(1)](element, options);=0A=
      return element;=0A=
    };=0A=
  }=0A=
);=0A=
=0A=
$w('getInlineOpacity forceRerendering setContentZoom collectTextNodes =
collectTextNodesIgnoreClass getStyles').each(=0A=
  function(f) { Effect.Methods[f] =3D Element[f]; }=0A=
);=0A=
=0A=
Element.addMethods(Effect.Methods);// script.aculo.us builder.js v1.8.0, =
Tue Nov 06 15:01:40 +0300 2007=0A=
=0A=
// Copyright (c) 2005-2007 Thomas Fuchs (http://script.aculo.us, =
http://mir.aculo.us)=0A=
//=0A=
// script.aculo.us is freely distributable under the terms of an =
MIT-style license.=0A=
// For details, see the script.aculo.us web site: http://script.aculo.us/=0A=
=0A=
var Builder =3D {=0A=
  NODEMAP: {=0A=
    AREA: 'map',=0A=
    CAPTION: 'table',=0A=
    COL: 'table',=0A=
    COLGROUP: 'table',=0A=
    LEGEND: 'fieldset',=0A=
    OPTGROUP: 'select',=0A=
    OPTION: 'select',=0A=
    PARAM: 'object',=0A=
    TBODY: 'table',=0A=
    TD: 'table',=0A=
    TFOOT: 'table',=0A=
    TH: 'table',=0A=
    THEAD: 'table',=0A=
    TR: 'table'=0A=
  },=0A=
  // note: For Firefox < 1.5, OPTION and OPTGROUP tags are currently =
broken,=0A=
  //       due to a Firefox bug=0A=
  node: function(elementName) {=0A=
    elementName =3D elementName.toUpperCase();=0A=
    =0A=
    // try innerHTML approach=0A=
    var parentTag =3D this.NODEMAP[elementName] || 'div';=0A=
    var parentElement =3D document.createElement(parentTag);=0A=
    try { // prevent IE "feature": http://dev.rubyonrails.org/ticket/2707=0A=
      parentElement.innerHTML =3D "<" + elementName + "></" + =
elementName + ">";=0A=
    } catch(e) {}=0A=
    var element =3D parentElement.firstChild || null;=0A=
      =0A=
    // see if browser added wrapping tags=0A=
    if(element && (element.tagName.toUpperCase() !=3D elementName))=0A=
      element =3D element.getElementsByTagName(elementName)[0];=0A=
    =0A=
    // fallback to createElement approach=0A=
    if(!element) element =3D document.createElement(elementName);=0A=
    =0A=
    // abort if nothing could be created=0A=
    if(!element) return;=0A=
=0A=
    // attributes (or text)=0A=
    if(arguments[1])=0A=
      if(this._isStringOrNumber(arguments[1]) ||=0A=
        (arguments[1] instanceof Array) ||=0A=
        arguments[1].tagName) {=0A=
          this._children(element, arguments[1]);=0A=
        } else {=0A=
          var attrs =3D this._attributes(arguments[1]);=0A=
          if(attrs.length) {=0A=
            try { // prevent IE "feature": =
http://dev.rubyonrails.org/ticket/2707=0A=
              parentElement.innerHTML =3D "<" +elementName + " " +=0A=
                attrs + "></" + elementName + ">";=0A=
            } catch(e) {}=0A=
            element =3D parentElement.firstChild || null;=0A=
            // workaround firefox 1.0.X bug=0A=
            if(!element) {=0A=
              element =3D document.createElement(elementName);=0A=
              for(attr in arguments[1]) =0A=
                element[attr =3D=3D 'class' ? 'className' : attr] =3D =
arguments[1][attr];=0A=
            }=0A=
            if(element.tagName.toUpperCase() !=3D elementName)=0A=
              element =3D =
parentElement.getElementsByTagName(elementName)[0];=0A=
          }=0A=
        } =0A=
=0A=
    // text, or array of children=0A=
    if(arguments[2])=0A=
      this._children(element, arguments[2]);=0A=
=0A=
     return element;=0A=
  },=0A=
  _text: function(text) {=0A=
     return document.createTextNode(text);=0A=
  },=0A=
=0A=
  ATTR_MAP: {=0A=
    'className': 'class',=0A=
    'htmlFor': 'for'=0A=
  },=0A=
=0A=
  _attributes: function(attributes) {=0A=
    var attrs =3D [];=0A=
    for(attribute in attributes)=0A=
      attrs.push((attribute in this.ATTR_MAP ? this.ATTR_MAP[attribute] =
: attribute) +=0A=
          '=3D"' + =
attributes[attribute].toString().escapeHTML().gsub(/"/,'&quot;') + '"');=0A=
    return attrs.join(" ");=0A=
  },=0A=
  _children: function(element, children) {=0A=
    if(children.tagName) {=0A=
      element.appendChild(children);=0A=
      return;=0A=
    }=0A=
    if(typeof children=3D=3D'object') { // array can hold nodes and text=0A=
      children.flatten().each( function(e) {=0A=
        if(typeof e=3D=3D'object')=0A=
          element.appendChild(e);=0A=
        else=0A=
          if(Builder._isStringOrNumber(e))=0A=
            element.appendChild(Builder._text(e));=0A=
      });=0A=
    } else=0A=
      if(Builder._isStringOrNumber(children))=0A=
        element.appendChild(Builder._text(children));=0A=
  },=0A=
  _isStringOrNumber: function(param) {=0A=
    return(typeof param=3D=3D'string' || typeof param=3D=3D'number');=0A=
  },=0A=
  build: function(html) {=0A=
    var element =3D this.node('div');=0A=
    $(element).update(html.strip());=0A=
    return element.down();=0A=
  },=0A=
  dump: function(scope) { =0A=
    if(typeof scope !=3D 'object' && typeof scope !=3D 'function') scope =
=3D window; //global scope =0A=
  =0A=
    var tags =3D ("A ABBR ACRONYM ADDRESS APPLET AREA B BASE BASEFONT =
BDO BIG BLOCKQUOTE BODY " +=0A=
      "BR BUTTON CAPTION CENTER CITE CODE COL COLGROUP DD DEL DFN DIR =
DIV DL DT EM FIELDSET " +=0A=
      "FONT FORM FRAME FRAMESET H1 H2 H3 H4 H5 H6 HEAD HR HTML I IFRAME =
IMG INPUT INS ISINDEX "+=0A=
      "KBD LABEL LEGEND LI LINK MAP MENU META NOFRAMES NOSCRIPT OBJECT =
OL OPTGROUP OPTION P "+=0A=
      "PARAM PRE Q S SAMP SCRIPT SELECT SMALL SPAN STRIKE STRONG STYLE =
SUB SUP TABLE TBODY TD "+=0A=
      "TEXTAREA TFOOT TH THEAD TITLE TR TT U UL VAR").split(/\s+/);=0A=
  =0A=
    tags.each( function(tag){ =0A=
      scope[tag] =3D function() { =0A=
        return Builder.node.apply(Builder, [tag].concat($A(arguments))); =
 =0A=
      } =0A=
    });=0A=
  }=0A=
};// Tooltip Object=0A=
var Tooltip =3D Class.create();=0A=
Tooltip.prototype =3D {=0A=
  initialize: function(el, options) {=0A=
    this.el =3D $(el);=0A=
    this.initialized =3D false;=0A=
    this.setOptions(options);=0A=
    =0A=
    // Event handlers=0A=
    this.showEvent =3D this.show.bindAsEventListener(this);=0A=
    this.hideEvent =3D this.hide.bindAsEventListener(this);=0A=
    this.updateEvent =3D this.update.bindAsEventListener(this);=0A=
    Event.observe(this.el, "mouseover", this.showEvent );=0A=
    Event.observe(this.el, "mouseout", this.hideEvent );=0A=
    =0A=
    // Removing title from DOM element to avoid showing it=0A=
    this.content =3D this.el.title;=0A=
    this.el.title =3D "";=0A=
  },=0A=
  setOptions: function(options) {=0A=
    this.options =3D {=0A=
      backgroundColor: '#999', // Default background color=0A=
      borderColor: '#666', // Default border color=0A=
      textColor: '', // Default text color (use CSS value)=0A=
      textShadowColor: '', // Default text shadow color (use CSS value)=0A=
      maxWidth: 250,	// Default tooltip width=0A=
      align: "left", // Default align=0A=
      delay: 250, // Default delay before tooltip appears in ms=0A=
      mouseFollow: false, // Tooltips follows the mouse moving=0A=
      opacity: .75, // Default tooltips opacity=0A=
      appearDuration: .25, // Default appear duration in sec=0A=
      hideDuration: .25 // Default disappear duration in sec=0A=
    };=0A=
    Object.extend(this.options, options || {});=0A=
  },=0A=
  show: function(e) {=0A=
    this.xCord =3D Event.pointerX(e);=0A=
    this.yCord =3D Event.pointerY(e);=0A=
    if(!this.initialized)=0A=
      this.timeout =3D window.setTimeout(this.appear.bind(this), =
this.options.delay);=0A=
  },=0A=
  hide: function(e) {=0A=
    if(this.initialized) {=0A=
      this.appearingFX.cancel();=0A=
      if(this.options.mouseFollow)=0A=
        Event.stopObserving(this.el, "mousemove", this.updateEvent);=0A=
      new Effect.Fade(this.tooltip, {duration: =
this.options.hideDuration, afterFinish: function() { =
Element.remove(this.tooltip) }.bind(this) });=0A=
    }=0A=
    this._clearTimeout(this.timeout);=0A=
    =0A=
    this.initialized =3D false;=0A=
  },=0A=
  update: function(e){=0A=
    this.xCord =3D Event.pointerX(e);=0A=
    this.yCord =3D Event.pointerY(e);=0A=
    this.setup();=0A=
  },=0A=
  appear: function() {=0A=
    // Building tooltip container=0A=
    this.tooltip =3D Builder.node("div", {className: "tooltip", style: =
"display: none;" }, [=0A=
      Builder.node("div", {className:"xtop"}, [=0A=
        Builder.node("div", {className:"xb1", style:"background-color:" =
+ this.options.borderColor + ";"}),=0A=
        Builder.node("div", {className:"xb2", style: "background-color:" =
+ this.options.backgroundColor + "; border-color:" + =
this.options.borderColor + ";"}),=0A=
        Builder.node("div", {className:"xb3", style: "background-color:" =
+ this.options.backgroundColor + "; border-color:" + =
this.options.borderColor + ";"}),=0A=
        Builder.node("div", {className:"xb4", style: "background-color:" =
+ this.options.backgroundColor + "; border-color:" + =
this.options.borderColor + ";"})=0A=
      ]),=0A=
      Builder.node("div", {className: "xboxcontent", style: =
"background-color:" + this.options.backgroundColor + =0A=
        "; border-color:" + this.options.borderColor + =0A=
        ((this.options.textColor !=3D '') ? "; color:" + =
this.options.textColor : "") + =0A=
        ((this.options.textShadowColor !=3D '') ? "; text-shadow:2px 2px =
0" + this.options.textShadowColor + ";" : "")}, this.content), =0A=
      Builder.node("div", {className:"xbottom"}, [=0A=
        Builder.node("div", {className:"xb4", style: "background-color:" =
+ this.options.backgroundColor + "; border-color:" + =
this.options.borderColor + ";"}),=0A=
        Builder.node("div", {className:"xb3", style: "background-color:" =
+ this.options.backgroundColor + "; border-color:" + =
this.options.borderColor + ";"}),=0A=
        Builder.node("div", {className:"xb2", style: "background-color:" =
+ this.options.backgroundColor + "; border-color:" + =
this.options.borderColor + ";"}),=0A=
        Builder.node("div", {className:"xb1", style:"background-color:" =
+ this.options.borderColor + ";"})=0A=
      ]),=0A=
    ]);=0A=
    document.body.insertBefore(this.tooltip, =
document.body.childNodes[0]);=0A=
    =0A=
    Element.extend(this.tooltip); // IE needs element to be manually =
extended=0A=
    this.options.width =3D this.tooltip.getWidth();=0A=
    this.tooltip.style.width =3D this.options.width + 'px'; // IE7 needs =
width to be defined=0A=
    =0A=
    this.setup();=0A=
    =0A=
    if(this.options.mouseFollow)=0A=
      Event.observe(this.el, "mousemove", this.updateEvent);=0A=
    =0A=
    this.initialized =3D true;=0A=
    this.appearingFX =3D new Effect.Appear(this.tooltip, {duration: =
this.options.appearDuration, to: this.options.opacity });=0A=
  },=0A=
  setup: function(){=0A=
    // If content width is more then allowed max width, set width to max=0A=
    if(this.options.width > this.options.maxWidth) {=0A=
      this.options.width =3D this.options.maxWidth;=0A=
      this.tooltip.style.width =3D this.options.width + 'px';=0A=
    }=0A=
    =0A=
    // Tooltip doesn't fit the current document dimensions=0A=
    if(this.xCord + this.options.width >=3D =
Element.getWidth(document.body)) {=0A=
      this.options.align =3D "right";=0A=
      this.xCord =3D this.xCord - this.options.width + 20;=0A=
    }=0A=
    =0A=
    this.tooltip.style.left =3D this.xCord - 7 + "px";=0A=
    this.tooltip.style.top =3D this.yCord + 12 + "px";=0A=
  },=0A=
  stop: function() {=0A=
    this.hide();=0A=
    Event.stopObserving(this.el, "mouseover", this.showEvent );=0A=
    Event.stopObserving(this.el, "mouseout", this.hideEvent );          =0A=
    Event.stopObserving(this.el, "mousemove", this.updateEvent);=0A=
  },        =0A=
  _clearTimeout: function(timer) {=0A=
    clearTimeout(timer);=0A=
    clearInterval(timer);=0A=
    return null;=0A=
  }=0A=
};//modified by Quake (added tooltip integration and remove some unused =
code)=0A=
=0A=
/**=0A=
 * modified by badqiu (badqiu(a)gmail.com)=0A=
 * blog: http://badqiu.javaeye.com=0A=
 * Project Home: http://code.google.com/p/rapid-validation/=0A=
 */=0A=
=0A=
/*=0A=
 * Really easy field validation with Prototype=0A=
 * =
http://tetlaw.id.au/view/blog/really-easy-field-validation-with-prototype=0A=
 * Andrew Tetlaw=0A=
 * Version 1.5.3 (2006-07-15)=0A=
 * =0A=
 * Copyright (c) 2006 Andrew Tetlaw=0A=
 * http://www.opensource.org/licenses/mit-license.php=0A=
 */=0A=
=0A=
var ValidationDefaultOptions =3D function(){};=0A=
ValidationDefaultOptions.prototype =3D {=0A=
  onSubmit : true, =
//=E6=98=AF=E5=90=A6=E7=9B=91=E5=90=ACform=E7=9A=84submit=E4=BA=8B=E4=BB=B6=0A=
  stopOnFirst : false, =
//=E8=A1=A8=E5=8D=95=E9=AA=8C=E8=AF=81=E6=97=B6=E5=81=9C=E7=95=99=E5=9C=A8=
=E7=AC=AC=E4=B8=80=E4=B8=AA=E9=AA=8C=E8=AF=81=E7=9A=84=E5=9C=B0=E6=96=B9,=
=E4=B8=8D=E7=BB=A7=E7=BB=AD=E9=AA=8C=E8=AF=81=E4=B8=8B=E5=8E=BB=0A=
  immediate : true, =
//=E6=98=AF=E5=90=A6=E5=AE=9E=E6=97=B6=E6=A3=80=E6=9F=A5=E6=95=B0=E6=8D=AE=
=E7=9A=84=E5=90=88=E6=B3=95=E6=80=A7=0A=
  focusOnError : true, =
//=E6=98=AF=E5=90=A6=E5=87=BA=E9=94=99=E6=97=B6=E5=B0=86=E5=85=89=E6=A0=87=
=E6=8C=87=E9=92=88=E7=A7=BB=E5=88=B0=E5=87=BA=E9=94=99=E7=9A=84=E8=BE=93=E5=
=85=A5=E6=A1=86=E4=B8=8A=0A=
  useTitles : false, =
//=E6=98=AF=E5=90=A6=E4=BD=BF=E7=94=A8input=E7=9A=84title=E5=B1=9E=E6=80=A7=
=E4=BD=9C=E4=B8=BA=E5=87=BA=E9=94=99=E6=97=B6=E7=9A=84=E6=8F=90=E7=A4=BA=E4=
=BF=A1=E6=81=AF=0A=
  onFormValidate : function(result, form) =
{},//Form=E9=AA=8C=E8=AF=81=E6=97=B6=E7=9A=84=E5=9B=9E=E8=B0=83=E5=87=BD=E6=
=95=B0=0A=
  onElementValidate : function(result, elm) {} =
//=E6=9F=90=E4=B8=AAinput=E9=AA=8C=E8=AF=81=E6=97=B6=E7=9A=84=E5=9B=9E=E8=
=B0=83=E5=87=BD=E6=95=B0=0A=
};=0A=
=0A=
var ValidatorDefaultOptions =3D function(){};=0A=
ValidatorDefaultOptions.prototype =3D {=0A=
  ignoreEmptyValue : true, =
//=E6=98=AF=E5=90=A6=E5=BF=BD=E7=95=A5=E7=A9=BA=E5=80=BC=0A=
  depends : [] //=E7=9B=B8=E5=85=B3=E4=BE=9D=E8=B5=96=E9=A1=B9=0A=
};=0A=
 =0A=
Validator =3D Class.create();=0A=
=0A=
ValidationUtils =3D {=0A=
  getReferenceForm : function(elm) {=0A=
    while(elm && elm.tagName !=3D 'BODY') {=0A=
      if(elm.tagName =3D=3D 'FORM') return elm;=0A=
      elm =3D elm.parentNode;=0A=
    }=0A=
    return null;=0A=
  },=0A=
  getInputValue : function(elm) {=0A=
    var elm =3D $(elm);=0A=
    if(elm.type.toLowerCase() =3D=3D 'file') {=0A=
      return elm.value;=0A=
    }else {=0A=
      return $F(elm);=0A=
    }=0A=
  },=0A=
  getElmID : function(elm) {=0A=
    return elm.id ? elm.id : elm.name;=0A=
  },=0A=
  format : function(str,args) {=0A=
    args =3D args || [];=0A=
    ValidationUtils.assert(args.constructor =3D=3D =
Array,"ValidationUtils.format() arguement 'args' must is Array");=0A=
    var result =3D str;=0A=
    for (var i =3D 0; i < args.length; i++){=0A=
      result =3D result.replace(/%s/, args[i]);	=0A=
    }=0A=
    return result;=0A=
  },=0A=
  // =
=E9=80=9A=E8=BF=87classname=E4=BC=A0=E9=80=92=E7=9A=84=E5=8F=82=E6=95=B0=E5=
=BF=85=E9=A1=BB=E9=80=9A=E8=BF=87'-'=E5=88=86=E9=9A=94=E5=90=84=E4=B8=AA=E5=
=8F=82=E6=95=B0=0A=
  // =
=E8=BF=94=E5=9B=9E=E5=80=BC=E5=8C=85=E5=90=AB=E4=B8=80=E4=B8=AA=E5=8F=82=E6=
=95=B0singleArgument,=E4=BE=8B:validate-pattern-/[a-c]/gi,singleArgument=E5=
=80=BC=E4=B8=BA/[a-c]/gi=0A=
  getArgumentsByClassName : function(prefix,className) {=0A=
    if(!className || !prefix)=0A=
      return [];=0A=
    var pattern =3D new RegExp(prefix+'-(\\S+)');=0A=
    var matchs =3D className.match(pattern);=0A=
    if(!matchs)=0A=
      return [];=0A=
    var results =3D [];=0A=
    results.singleArgument =3D matchs[1];=0A=
    var args =3D  matchs[1].split('-');=0A=
    for(var i =3D 0; i < args.length; i++) {=0A=
      if(args[i] =3D=3D '') {=0A=
        if(i+1 < args.length) args[i+1] =3D '-'+args[i+1];=0A=
      }else{=0A=
        results.push(args[i]);=0A=
      }=0A=
    }=0A=
    return results;=0A=
  },=0A=
  assert : function(condition,message) {=0A=
    var errorMessage =3D message || ("assert failed =
error,condition=3D"+condition);=0A=
    if (!condition) {=0A=
      alert(errorMessage);=0A=
      throw new Error(errorMessage);=0A=
    }else {=0A=
      return condition;=0A=
    }=0A=
  },=0A=
  isDate : function(v,dateFormat) {=0A=
    var MONTH =3D "MM";=0A=
    var DAY =3D "dd";=0A=
    var YEAR =3D "yyyy";=0A=
    var regex =3D =
'^'+dateFormat.replace(YEAR,'\\d{4}').replace(MONTH,'\\d{2}').replace(DAY=
,'\\d{2}')+'$';=0A=
    if(!new RegExp(regex).test(v)) return false;=0A=
=0A=
    var year =3D v.substr(dateFormat.indexOf(YEAR),4);=0A=
    var month =3D v.substr(dateFormat.indexOf(MONTH),2);=0A=
    var day =3D v.substr(dateFormat.indexOf(DAY),2);=0A=
		=0A=
    var d =3D new =
Date(ValidationUtils.format('%s/%s/%s',[year,month,day]));=0A=
    return ( parseInt(month, 10) =3D=3D (1+d.getMonth()) ) && =0A=
      (parseInt(day, 10) =3D=3D d.getDate()) && =0A=
      (parseInt(year, 10) =3D=3D d.getFullYear() );		=0A=
  },=0A=
  getLanguage : function() {=0A=
    var lang =3D null;=0A=
    if (typeof navigator.userLanguage =3D=3D 'undefined')=0A=
      lang =3D navigator.language.toLowerCase();=0A=
    else=0A=
      lang =3D navigator.userLanguage.toLowerCase();=0A=
    return lang;=0A=
  },=0A=
  getMessageSource : function() {=0A=
    var lang =3D ValidationUtils.getLanguage();=0A=
    var messageSource =3D Validator.messageSource['zh-cn'];=0A=
    if(Validator.messageSource[lang]) {=0A=
      messageSource =3D Validator.messageSource[lang];=0A=
    }=0A=
    return messageSource;=0A=
  }=0A=
};=0A=
=0A=
Validator.messages =3D {=0A=
  'validation-failed' : '=E9=AA=8C=E8=AF=81=E5=A4=B1=E8=B4=A5.',=0A=
  'required' : '=E8=AF=B7=E5=A1=AB=E5=86=99=E5=80=BC.',=0A=
  'validate-number' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=9C=89=E6=95=88=E7=9A=84=E6=95=B0=E5=AD=97=
.',=0A=
  'validate-digits' : '=E8=AF=B7=E5=A1=AB=E5=86=99=E6=95=B0=E5=AD=97.',=0A=
  'validate-alpha' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E8=8B=B1=E6=96=87=E5=AD=97=E6=AF=8D.',=0A=
  'validate-alphanum' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E8=8B=B1=E6=96=87=E5=AD=97=E6=AF=8D=E6=88=96=
=E6=98=AF=E6=95=B0=E5=AD=97,=E5=85=B6=E5=AE=83=E5=AD=97=E7=AC=A6=E6=98=AF=
=E4=B8=8D=E5=85=81=E8=AE=B8=E7=9A=84.',=0A=
  'validate-email' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=9C=89=E6=95=88=E7=9A=84=E9=82=AE=E4=BB=B6=
=E5=9C=B0=E5=9D=80,=E5=8F=AA=E8=83=BD=E4=BD=BF=E7=94=A8a-z A-Z 0-9 _ . =
-\',=E5=A6=82 username@example.com=E3=80=82 ',=0A=
  'validate-url' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=9C=89=E6=95=88=E7=9A=84URL=E5=9C=B0=E5=9D=
=80.',=0A=
  'validate-currency-dollar' : 'Please enter a valid $ amount. For =
example $100.00 .',=0A=
  'validate-one-required' : =
'=E5=9C=A8=E4=B8=8A=E9=9D=A2=E9=80=89=E9=A1=B9=E8=87=B3=E5=B0=91=E9=80=89=
=E6=8B=A9=E4=B8=80=E4=B8=AA.',=0A=
  'validate-integer' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=AD=A3=E7=A1=AE=E7=9A=84=E6=95=B4=E6=95=B0=
',=0A=
  'validate-pattern' : =
'=E5=A1=AB=E5=86=99=E7=9A=84=E5=80=BC=E4=B8=8D=E5=8C=B9=E9=85=8D',=0A=
  'validate-ip' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=AD=A3=E7=A1=AE=E7=9A=84IP=E5=9C=B0=E5=9D=80=
',=0A=
  'min-value' : '=E6=9C=80=E5=B0=8F=E5=80=BC=E4=B8=BA%s',=0A=
  'max-value' : '=E6=9C=80=E5=A4=A7=E5=80=BC=E4=B8=BA%s',=0A=
  'min-length' : =
'=E6=9C=80=E5=B0=8F=E9=95=BF=E5=BA=A6=E4=B8=BA%s,=E5=BD=93=E5=89=8D=E9=95=
=BF=E5=BA=A6=E4=B8=BA%s.',=0A=
  'max-length' : =
'=E6=9C=80=E5=A4=A7=E9=95=BF=E5=BA=A6=E4=B8=BA%s,=E5=BD=93=E5=89=8D=E9=95=
=BF=E5=BA=A6=E4=B8=BA%s.',=0A=
  'int-range' : '=E5=A1=AB=E5=86=99=E5=80=BC=E5=BA=94=E8=AF=A5=E4=B8=BA =
%s =E8=87=B3 %s =E7=9A=84=E6=95=B4=E6=95=B0',=0A=
  'float-range' : =
'=E5=A1=AB=E5=86=99=E5=80=BC=E5=BA=94=E8=AF=A5=E4=B8=BA %s =E8=87=B3 %s =
=E7=9A=84=E6=95=B0=E5=AD=97',=0A=
  'length-range' : =
'=E5=A1=AB=E5=86=99=E5=80=BC=E7=9A=84=E9=95=BF=E5=BA=A6=E5=BA=94=E8=AF=A5=
=E5=9C=A8 %s =E8=87=B3 %s =
=E4=B9=8B=E9=97=B4,=E5=BD=93=E5=89=8D=E9=95=BF=E5=BA=A6=E4=B8=BA%s',=0A=
  'equals' : =
'=E4=B8=A4=E6=AC=A1=E5=A1=AB=E5=86=99=E4=B8=8D=E4=B8=80=E8=87=B4,=E8=AF=B7=
=E9=87=8D=E6=96=B0=E5=A1=AB=E5=86=99',=0A=
  'less-than' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E5=B0=8F=E4=BA=8E=E5=89=8D=E9=9D=A2=E7=9A=84=
=E5=80=BC',=0A=
  'great-than' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E5=A4=A7=E4=BA=8E=E5=89=8D=E9=9D=A2=E7=9A=84=
=E5=80=BC',=0A=
  'validate-date' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=9C=89=E6=95=88=E7=9A=84=E6=97=A5=E6=9C=9F=
,=E6=A0=BC=E5=BC=8F=E4=B8=BA %s. =E4=BE=8B=E5=A6=82:%s.',=0A=
  'validate-file' : function(v,elm,args,metadata) {=0A=
    return =
ValidationUtils.format("=E6=96=87=E4=BB=B6=E7=B1=BB=E5=9E=8B=E5=BA=94=E8=AF=
=A5=E4=B8=BA[%s]=E5=85=B6=E4=B8=AD=E4=B9=8B=E4=B8=80",[args.join(',')]);=0A=
  },=0A=
  'validate-id-number' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E5=90=88=E6=B3=95=E7=9A=84=E8=BA=AB=E4=BB=BD=
=E8=AF=81=E5=8F=B7=E7=A0=81',=0A=
  'validate-chinese' : '=E8=AF=B7=E5=A1=AB=E5=86=99=E4=B8=AD=E6=96=87',=0A=
  'validate-phone' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=AD=A3=E7=A1=AE=E7=9A=84=E7=94=B5=E8=AF=9D=
=E5=8F=B7=E7=A0=81,=E5=A6=82:021-87654321,=E5=BD=93=E5=89=8D=E9=95=BF=E5=BA=
=A6=E4=B8=BA%s.',=0A=
  'validate-mobile-phone' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=AD=A3=E7=A1=AE=E7=9A=84=E6=89=8B=E6=9C=BA=
=E5=8F=B7=E7=A0=81,=E5=BD=93=E5=89=8D=E9=95=BF=E5=BA=A6=E4=B8=BA%s.',=0A=
  'validate-zip' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=9C=89=E6=95=88=E7=9A=84=E9=82=AE=E6=94=BF=
=E7=BC=96=E7=A0=81',=0A=
  'validate-qq' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E6=9C=89=E6=95=88=E7=9A=84QQ=E5=8F=B7=E7=A0=81=
.',=0A=
  'validate-richeditor' : '=E8=AF=B7=E5=A1=AB=E5=86=99=E5=80=BC.',=0A=
  'validate-combobox' : =
'=E8=AF=B7=E5=A1=AB=E5=86=99=E5=80=BC=E6=88=96=E9=80=89=E5=8F=96=E5=89=8D=
=E9=9D=A2=E7=9A=84=E9=80=89=E9=A1=B9.',=0A=
  'max-tag' : '=E8=AF=B7=E5=A1=AB=E5=86=991-%s=E4=B8=AATag.'=0A=
};=0A=
=0A=
Validator.bad_words=3D[/fuck/i,/shit/i,/QQ=E7=BE=A4/i,/MSN=E7=BE=A4/i,/=E6=
=B1=82(=E5=8A=A9|=E6=95=91)/,/(=E8=B7=AA|=E8=A3=B8)=E6=B1=82/,/=E6=80=A5=E6=
=80=A5|=E6=88=91=E5=BE=88=E6=80=A5|=E7=B4=A7=E6=80=A5=E5=AF=BB=E6=B1=82/,=
/=E5=9C=A8=E7=BA=BF=E7=AD=89/,/=E6=95=91(=E5=91=BD|=E6=88=91|=E6=80=A5|=E6=
=95=91)/,/=E6=80=A5(!|=EF=BC=81)/,/(=E9=AB=98=E6=89=8B|=E9=AB=98=E4=BA=BA=
|=E5=A4=A7=E8=99=BE|=E5=A4=A7=E4=BE=A0|=E8=BE=BE=E4=BA=BA|=E5=89=8D=E8=BE=
=88|=E5=BF=AB=E6=9D=A5|=E6=B2=A1=E6=9C=89=E4=BA=BA)(=E6=8C=87=E7=82=B9|=E8=
=A7=A3=E7=AD=94|=E5=B8=AE=E5=BF=99|=E5=B8=AE=E5=B8=AE|=E6=8C=87=E6=95=99|=
=E8=B5=90=E6=95=99|=E6=8F=90=E7=82=B9|=E4=B8=8D=E5=90=9D=E8=B5=90=E6=95=99=
|=E5=88=B0=E5=93=AA)/,/(=E6=88=91=E6=98=AF|=E5=B8=AE=E5=B8=AE)(=E6=96=B0=E6=
=89=8B|=E5=B0=8F=E5=BC=9F|=E8=8F=9C=E9=B8=9F)/,/=E5=B8=AE=E5=B8=AE=E5=BF=99=
/, /=E4=B8=87=E5=88=86=E7=81=AB=E6=80=A5/, =
/=E6=88=91=E9=A1=B6|=E9=A1=B6=E4=B8=8A=E5=8E=BB|=E5=A5=BD=E8=B4=B4=E8=A6=81=
=E9=A1=B6|=E5=B8=AE=E9=A1=B6|=E7=9C=8B=E7=9C=8B=E5=85=88|=E9=A1=B6=E4=B8=80=
=E4=B8=8B/,/=E6=9C=89*=E6=B2=A1=E6=9C=89=E4=BA=BA(=E5=9B=9E=E7=AD=94|=E5=B8=
=AE=E5=BF=99|=E5=85=B3=E6=B3=A8|=E7=9F=A5=E9=81=93=E5=95=8A|=E5=9B=9E=E5=A4=
=8D)/,/=E6=95=99=E4=B8=BB|=E8=A3=85B|=E8=A3=8513/,/=E5=85=B3=E6=B3=A8(ing=
|=E4=B8=AD)/i,/=E6=94=B6=E8=97=8F=E5=85=88/,/=E5=85=88=E6=94=B6=E8=97=8F/=
,/=E6=94=B6=E8=97=8F=E4=BA=86/,/=E5=9B=BE=E4=B9=A6=E5=85=BC=E8=81=8C=E4=BD=
=9C=E8=80=85/,/=E8=B0=A2=E8=B0=A2=E6=A5=BC=E4=B8=BB/,/=E4=BC=A0=E6=99=BA=E6=
=92=AD=E5=AE=A2/,/FineReport/i];=0A=
=0A=
Validator.prototype =3D {=0A=
  initialize : function(className, test, options) {=0A=
    this.options =3D Object.extend(new ValidatorDefaultOptions(), =
options || {});=0A=
    this._test =3D test ? test : function(v,elm){ return true; };=0A=
    this._error =3D Validator.messages[className] ? =
Validator.messages[className] : Validator.messages['validation-failed'];=0A=
    this.className =3D className;=0A=
    this._dependsTest =3D this._dependsTest.bind(this);=0A=
    this._getDependError =3D this._getDependError.bind(this);=0A=
  },=0A=
  _dependsTest : function(v,elm) {=0A=
    if(this.options.depends && this.options.depends.length > 0) {=0A=
      var dependsResult =3D =
$A(this.options.depends).all(function(depend){=0A=
        return Validation.get(depend).test(v,elm);=0A=
      });=0A=
      return dependsResult;=0A=
    }=0A=
    return true;=0A=
  },=0A=
  test : function(v, elm) {=0A=
    if(!this._dependsTest(v,elm))=0A=
      return false;=0A=
    if(!elm) elm =3D {};=0A=
    return (this.options.ignoreEmptyValue && ((v =3D=3D null) || =
(v.length =3D=3D 0))) || =
this._test(v,elm,ValidationUtils.getArgumentsByClassName(this.className,e=
lm.className),this);=0A=
  },=0A=
  _getDependError : function(v,elm,useTitle) {=0A=
    var dependError =3D null;=0A=
    $A(this.options.depends).any(function(depend){=0A=
      var validation =3D Validation.get(depend);=0A=
      if(!validation.test(v,elm))  {=0A=
        dependError =3D validation.error(v,elm,useTitle);=0A=
        return true;=0A=
      }=0A=
      return false;=0A=
    });=0A=
    return dependError;=0A=
  }, =0A=
  error : function(v,elm,useTitle) {=0A=
    var dependError =3D this._getDependError(v,elm,useTitle);=0A=
    if(dependError !=3D null) return dependError;=0A=
=0A=
    var args  =3D =
ValidationUtils.getArgumentsByClassName(this.className,elm.className);=0A=
    var error =3D this._error;=0A=
    if(typeof error =3D=3D 'string') {=0A=
      if(v) args.push(v.length);=0A=
      error =3D ValidationUtils.format(this._error,args);=0A=
    }else if(typeof error =3D=3D 'function') {=0A=
      error =3D error(v,elm,args,this);=0A=
    }else {=0A=
      alert('property "_error" must type of string or function');=0A=
    }=0A=
    if(!useTitle) useTitle =3D elm.className.indexOf('useTitle') >=3D 0;=0A=
    return useTitle ? ((elm && elm.title) ? elm.title : error) : error;=0A=
  }=0A=
};=0A=
=0A=
var Validation =3D Class.create();=0A=
=0A=
Validation.prototype =3D {=0A=
  initialize : function(form, options){=0A=
    this.options =3D Object.extend(new ValidationDefaultOptions(), =
options || {});=0A=
    this.form =3D $(form);=0A=
    var formId =3D  ValidationUtils.getElmID($(form));=0A=
    Validation.validations[formId] =3D this;=0A=
    if(this.options.onSubmit) =
Event.observe(this.form,'submit',this.onSubmit.bind(this),false);=0A=
    if(this.options.immediate) {=0A=
      var useTitles =3D this.options.useTitles;=0A=
      var callback =3D this.options.onElementValidate;=0A=
      Form.getElements(this.form).each(function(input) { // Thanks Mike!=0A=
        Event.observe(input, 'blur', function(ev) { =
Validation.validateElement(Event.element(ev),{useTitle : useTitles, =
onElementValidate : callback}); });=0A=
      });=0A=
    }=0A=
  },=0A=
  onSubmit :  function(ev){=0A=
    if(this.form.spinner && this.form.spinner.visible()) {=0A=
      Event.stop(ev);=0A=
    }else if(!this.validate()) {=0A=
      Event.stop(ev);=0A=
    }else {=0A=
      =
Event.observe(this.form,'submit',function(e){Event.stop(e);}.bind(this.fo=
rm),false);=0A=
      if(this.form.spinner) {=0A=
        this.form.spinner.show();=0A=
      }else{=0A=
        this.form.spinner =3D $(document.createElement("img"));=0A=
        this.form.spinner.src =3D =
'http://www.iteye.com/images/spinner.gif';=0A=
        Element.insert(this.form.select('input.submit')[0], {"after" : =
this.form.spinner});=0A=
      }=0A=
    }=0A=
  },=0A=
  validate : function() {=0A=
    var result =3D false;=0A=
    var useTitles =3D this.options.useTitles;=0A=
    var callback =3D this.options.onElementValidate;=0A=
    if(this.options.stopOnFirst) {=0A=
      result =3D Form.getElements(this.form).all(function(elm) { return =
Validation.validateElement(elm,{useTitle : useTitles, onElementValidate =
: callback}); });=0A=
    } else {=0A=
      result =3D Form.getElements(this.form).collect(function(elm) { =
return Validation.validateElement(elm,{useTitle : useTitles, =
onElementValidate : callback}); }).all();=0A=
    }=0A=
    if(!result && this.options.focusOnError) {=0A=
      var first =3D =
Form.getElements(this.form).findAll(function(elm){return =
$(elm).hasClassName('validation-failed');}).first();=0A=
      try{=0A=
        if(first.select) first.select();=0A=
        first.focus();=0A=
      }catch(e){}=0A=
    }=0A=
    this.options.onFormValidate(result, this.form);=0A=
    return result;=0A=
  }=0A=
};=0A=
=0A=
Object.extend(Validation, {=0A=
  validateElement : function(elm, options){=0A=
    options =3D Object.extend({=0A=
      useTitle : false,=0A=
      onElementValidate : function(result, elm) {}=0A=
    }, options || {});=0A=
    elm =3D $(elm);=0A=
    var cn =3D elm.classNames();=0A=
    return cn.all(function(value) {=0A=
      var test =3D Validation.test(value,elm,options.useTitle);=0A=
      options.onElementValidate(test, elm);=0A=
      return test;=0A=
    });=0A=
  },=0A=
  showErrorMsg : function(name,elm,errorMsg) {           =0A=
    if(!elm.tooltip) elm.tooltip =3D new Tooltip(elm, {backgroundColor: =
"#FC9", borderColor: "#C96", textColor: "#000", textShadowColor: =
"#FFF"});=0A=
    elm.tooltip.content =3D errorMsg;=0A=
    elm.removeClassName('validation-passed');=0A=
    elm.addClassName('validation-failed');=0A=
  },=0A=
  showErrorMsgByValidator : function(name,elm,useTitle) {=0A=
    =
Validation.showErrorMsg(name,elm,Validation.get(name).error(ValidationUti=
ls.getInputValue(elm),elm,useTitle));=0A=
  },=0A=
  hideErrorMsg : function(name,elm) {		=0A=
    if(elm.tooltip) {=0A=
      elm.tooltip.stop();=0A=
      elm.tooltip =3D false;            =0A=
    }=0A=
    elm.removeClassName('validation-failed');=0A=
    elm.addClassName('validation-passed');=0A=
  },=0A=
  test : function(name, elm, useTitle) {=0A=
    var v =3D Validation.get(name);=0A=
    if(!v.test(ValidationUtils.getInputValue(elm),elm)) {=0A=
      Validation.showErrorMsgByValidator(name,elm,useTitle);=0A=
      return false;=0A=
    } else {=0A=
      Validation.hideErrorMsg(name,elm);=0A=
      return true;=0A=
    }=0A=
  },=0A=
  getAdvice : function(name, elm) {=0A=
    return Try.these(=0A=
    function(){ return $('advice-' + name + '-' + =
ValidationUtils.getElmID(elm)); },=0A=
    function(){ return $('advice-' + ValidationUtils.getElmID(elm)); }=0A=
  );=0A=
  },=0A=
  add : function(className, test, options) {=0A=
    var nv =3D {};=0A=
    var testFun =3D test;=0A=
    if(test instanceof RegExp)=0A=
      testFun =3D function(v,elm,args,metadata){ return test.test(v); };=0A=
    nv[className] =3D new Validator(className, testFun, options);=0A=
    Object.extend(Validation.methods, nv);=0A=
  },=0A=
  addAllThese : function(validators) {=0A=
    $A(validators).each(function(value) {=0A=
      Validation.add(value[0], value[1], (value.length > 2 ? value[2] : =
{}));=0A=
    });=0A=
  },=0A=
  get : function(name) {=0A=
    var resultMethodName;=0A=
    for(var methodName in Validation.methods) {=0A=
      if(name =3D=3D methodName) {=0A=
        resultMethodName =3D methodName;=0A=
        break;=0A=
      }=0A=
      if(name.indexOf(methodName) >=3D 0) {=0A=
        resultMethodName =3D methodName;=0A=
      }=0A=
    }=0A=
    return Validation.methods[resultMethodName] ? =
Validation.methods[resultMethodName] : new Validator();=0A=
  },=0A=
  $ : function(formId) {=0A=
    return Validation.validations[formId];=0A=
  },=0A=
  methods : {},=0A=
  validations : {}=0A=
});=0A=
=0A=
Validation.addAllThese([=0A=
  ['required', function(v) {=0A=
      return !((v =3D=3D null) || (v.length =3D=3D 0) || =
/^[\s|\u3000]+$/.test(v));=0A=
    },{ignoreEmptyValue:false}],=0A=
  ['validate-number', function(v) {=0A=
      return (!isNaN(v) && !/^\s+$/.test(v));=0A=
    }],=0A=
  ['validate-digits', function(v) {=0A=
      return !/[^\d]/.test(v);=0A=
    }],=0A=
  ['validate-alphanum', function(v) {=0A=
      return !/\W/.test(v);=0A=
    }],=0A=
  ['validate-one-required', function (v,elm) {=0A=
      var p =3D elm.parentNode;=0A=
      var options =3D p.getElementsByTagName('INPUT');=0A=
      return $A(options).any(function(elm) {=0A=
        return $F(elm);=0A=
      });=0A=
    },{ignoreEmptyValue : false}],=0A=
			=0A=
  ['validate-digits',/^[\d]+$/],		=0A=
  ['validate-alphanum',/^[a-zA-Z0-9]+$/],		=0A=
  ['validate-alpha',/^[a-zA-Z]+$/],=0A=
=0A=
  ['validate-email',/^[\w.+-]+@(?:[-a-z0-9]+\.)+[a-z]{2,4}$/i],=0A=
  =
['validate-url',/^(http|https|ftp):\/\/(([A-Z0-9][A-Z0-9_-]*)(\.[A-Z0-9][=
A-Z0-9_-]*)+)(:(\d+))?\/?/i],=0A=
  // [$]1[##][,###]+[.##]=0A=
  // [$]1###+[.##]=0A=
  // [$]0.##=0A=
  // [$].##=0A=
  =
['validate-currency-dollar',/^\$?\-?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0=
-9]{0,2})?|[1-9]{1}\d*(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$/=
]=0A=
]);=0A=
=0A=
//custom validate start=0A=
=0A=
Validation.addAllThese([=0A=
  /**=0A=
   * Usage : equals-$otherInputId=0A=
   * Example : equals-username or equals-email etc..=0A=
   */=0A=
  ['equals', function(v,elm,args,metadata) {=0A=
      return $F(args[0]) =3D=3D v;=0A=
    },{ignoreEmptyValue:false}],=0A=
  /**=0A=
   * Usage : less-than-$otherInputId=0A=
   */=0A=
  ['less-than', function(v,elm,args,metadata) {=0A=
      if(Validation.get('validate-number').test(v) && =
Validation.get('validate-number').test($F(args[0])))=0A=
        return parseFloat(v) < parseFloat($F(args[0]));=0A=
      return v < $F(args[0]);=0A=
    }],=0A=
  /**=0A=
   * Usage : great-than-$otherInputId=0A=
   */=0A=
  ['great-than', function(v,elm,args,metadata) {=0A=
      if(Validation.get('validate-number').test(v) && =
Validation.get('validate-number').test($F(args[0])))=0A=
        return parseFloat(v) > parseFloat($F(args[0]));=0A=
      return v > $F(args[0]);=0A=
    }],=0A=
  /*=0A=
   * Usage: min-length-$number=0A=
   * Example: min-length-10=0A=
   */=0A=
  ['min-length',function(v,elm,args,metadata) {=0A=
      return v.length >=3D parseInt(args[0]);=0A=
    }],=0A=
  /*=0A=
   * Usage: max-length-$number=0A=
   * Example: max-length-10=0A=
   */=0A=
  ['max-length',function(v,elm,args,metadata) {=0A=
      return v.length <=3D parseInt(args[0]);=0A=
    }],=0A=
  /*=0A=
   * Usage: validate-file-$type1-$type2-$typeX=0A=
   * Example: validate-file-png-jpg-jpeg=0A=
   */=0A=
  ['validate-file',function(v,elm,args,metadata) {=0A=
      return $A(args).any(function(extentionName) {=0A=
        return new RegExp('\\.'+extentionName+'$','i').test(v);=0A=
      });=0A=
    }],=0A=
  /*=0A=
   * Usage: float-range-$minValue-$maxValue=0A=
   * Example: -2.1 to 3 =3D float-range--2.1-3=0A=
   */=0A=
  ['float-range',function(v,elm,args,metadata) {=0A=
      return (parseFloat(v) >=3D parseFloat(args[0]) && parseFloat(v) =
<=3D parseFloat(args[1]));=0A=
    },{depends : ['validate-number']}],=0A=
  /*=0A=
   * Usage: int-range-$minValue-$maxValue=0A=
   * Example: -10 to 20 =3D int-range--10-20=0A=
   */=0A=
  ['int-range',function(v,elm,args,metadata) {=0A=
      return (parseInt(v) >=3D parseInt(args[0]) && parseInt(v) <=3D =
parseInt(args[1]));=0A=
    },{depends : ['validate-integer']}],=0A=
  /*=0A=
   * Usage: length-range-$minLength-$maxLength=0A=
   * Example: 10 to 20 =3D length-range-10-20=0A=
   */=0A=
  ['length-range',function(v,elm,args,metadata) {=0A=
      return (v.length >=3D parseInt(args[0]) && v.length <=3D =
parseInt(args[1]));=0A=
    }],=0A=
  /*=0A=
   * Usage: max-value-$number=0A=
   * Example: max-value-10=0A=
   */=0A=
  ['max-value',function(v,elm,args,metadata) {=0A=
      return parseFloat(v) <=3D parseFloat(args[0]);=0A=
    },{depends : ['validate-number']}],=0A=
  /*=0A=
   * Usage: min-value-$number=0A=
   * Example: min-value-10=0A=
   */=0A=
  ['min-value',function(v,elm,args,metadata) {=0A=
      return parseFloat(v) >=3D parseFloat(args[0]);=0A=
    },{depends : ['validate-number']}],=0A=
  /*=0A=
   * Usage: validate-pattern-$RegExp=0A=
   * Example: <input id=3D'sex' class=3D'validate-pattern-/^[fm]$/i'>=0A=
   */=0A=
  ['validate-pattern',function(v,elm,args,metadata) {=0A=
      return eval('('+args.singleArgument+'.test(v))');=0A=
    }],=0A=
  /*=0A=
   * Usage: validate-ajax-$url=0A=
   * Example: <input id=3D'email' =
class=3D'validate-ajax-http://localhost:8080/validate-email.jsp'>=0A=
   */=0A=
  ['validate-ajax',function(v,elm,args,metadata) {=0A=
      var form =3D ValidationUtils.getReferenceForm(elm);=0A=
      var params =3D (form ? Form.serialize(form) : =
Form.Element.serialize(elm));=0A=
      params +=3D =
ValidationUtils.format("&what=3D%s&value=3D%s",[elm.name,encodeURICompone=
nt(v)]);=0A=
      var request =3D new Ajax.Request(args.singleArgument,{=0A=
        parameters : params,=0A=
        asynchronous : false,=0A=
        method : "post"=0A=
      });=0A=
		=0A=
      var responseText =3D request.transport.responseText;=0A=
      if("" =3D=3D responseText.strip()) return true;=0A=
      metadata._error =3D responseText;=0A=
      return false;=0A=
    }],=0A=
  /*=0A=
   * Usage: validate-date-$dateFormat or validate-date($dateFormat =
default is yyyy-MM-dd)=0A=
   * Example: validate-date-yyyy/MM/dd=0A=
   */=0A=
  ['validate-date', function(v,elm,args,metadata) {=0A=
      var dateFormat =3D args.singleArgument || 'yyyy-MM-dd';=0A=
      metadata._error =3D =
ValidationUtils.format(Validator.messages[metadata.className],[dateFormat=
,dateFormat.replace('yyyy','2006').replace('MM','03').replace('dd','12')]=
);=0A=
      return ValidationUtils.isDate(v,dateFormat);=0A=
    }],	=0A=
  ['validate-integer',/^[-+]?[1-9]\d*$|^0$/],=0A=
  =
['validate-ip',/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0=
-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/],=0A=
  =
//=E4=B8=AD=E5=9B=BD=E7=9B=B8=E5=85=B3=E9=AA=8C=E8=AF=81=E5=BC=80=E5=A7=8B=0A=
  ['validate-id-number',function(v,elm,args,metadata) {=0A=
      if(!(/^\d{17}(\d|x)$/i.test(v) || /^\d{15}$/i.test(v))) return =
false;=0A=
      var provinceCode =3D parseInt(v.substr(0,2));=0A=
      if((provinceCode < 11) || (provinceCode > 91)) return false;=0A=
      var forTestDate =3D v.length =3D=3D 18 ? v : =
v.substr(0,6)+"19"+v.substr(6,15);=0A=
      var birthday =3D forTestDate.substr(6,8);=0A=
      if(!ValidationUtils.isDate(birthday,'yyyyMMdd')) return false;=0A=
      if(v.length =3D=3D 18) {=0A=
        v =3D v.replace(/x$/i,"a");=0A=
        var verifyCode =3D 0;=0A=
        for(var i =3D 17;i >=3D 0;i--)   =0A=
          verifyCode +=3D (Math.pow(2,i) % 11) * parseInt(v.charAt(17 - =
i),11);=0A=
        if(verifyCode % 11 !=3D 1) return false;=0A=
      }=0A=
      return true;=0A=
    }],=0A=
  ['validate-chinese',/^[\u4e00-\u9fa5]+$/],=0A=
  ['validate-phone',/^((0[1-9]{3})?(0[12][0-9])?[-])?\d{6,8}$/],=0A=
  ['validate-mobile-phone',/(^0?[1][35][0-9]{9}$)/],=0A=
  ['validate-zip',/^[1-9]\d{5}$/],=0A=
  ['validate-qq',/^[1-9]\d{4,8}$/],=0A=
	=0A=
  //javaeye added=0A=
  ['validate-richeditor', function(v, elm) {=0A=
      if(editor.mode =3D=3D "rich") {=0A=
        v =3D =
tinyMCE.activeEditor.getContent().stripTags().replace(/&nbsp;/g,' ');	=0A=
      }=0A=
      return !((v =3D=3D null) || (v.length =3D=3D 0) || =
/^[\s|\u3000]+$/.test(v));			=0A=
    },{ignoreEmptyValue:false}],=0A=
	=0A=
  ['bad-words', function(v) {=0A=
      for (var i=3D0; i < Validator.bad_words.length; i++) {=0A=
        var m =3D v.match(Validator.bad_words[i]);=0A=
        if (m) {=0A=
          =
alert("ITeye=E5=8F=91=E8=B4=B4=E6=8F=90=E7=A4=BA\n\nITeye=E7=BD=91=E7=AB=99=
=E4=B8=8D=E5=85=81=E8=AE=B8=E6=82=A8=E4=BD=BF=E7=94=A8 \"" + m[0] + "\" =
=E8=BF=99=E6=A0=B7=E7=9A=84=E8=AF=8D=E6=B1=87=E5=8F=91=E8=B4=B4=EF=BC=81\=
n\n=E6=82=A8=E5=BE=88=E5=8F=AF=E8=83=BD=E8=BF=9D=E5=8F=8D=E4=BA=86=E7=BD=91=
=E7=AB=99=E8=A7=84=E5=88=99=EF=BC=8C=E8=AF=B7=E4=BB=94=E7=BB=86=E9=98=85=E8=
=AF=BB=E5=B9=B6=E9=81=B5=E5=AE=88=E7=BD=91=E7=AB=99=E8=A7=84=E5=88=99=EF=BC=
=8C=E5=90=A6=E5=88=99=E5=B0=86=E8=A2=AB=E6=89=A3=E5=88=86=E5=88=A0=E8=B4=B4=
=E3=80=82\n\n");=0A=
          return false;=0A=
        }}=0A=
      return true;		=0A=
    }],=0A=
  ['validate-combobox', function(v, elm, args) {=0A=
      var v =3D $F(args[0]);=0A=
      return Validation.get('required').test(elm.value) || =
Validation.get('required').test(v);=0A=
    },{ignoreEmptyValue:false}],=0A=
=0A=
  /*=0A=
   * Usage: max-tag-$number=0A=
   * Example: max-tag-3=0A=
   */=0A=
  ['max-tag', function(v, elm, args){=0A=
    return v.replace(/^\s+|\s+$/g, '').split(/,\s*|=EF=BC=8C\s*/).length =
<=3D parseInt(args[0]);=0A=
  }]=0A=
]);=0A=
String.prototype.trim =3D function() { return this.replace(/^\s+|\s+$/g, =
''); };=0A=
=0A=
function multiple_upload_attachment(ele, max_size) {=0A=
  Event.observe(ele, 'change', function() {=0A=
    addAttachmentDiv(ele, max_size);=0A=
  });=0A=
  if (multiple_upload_attachment_counter >=3D max_size) ele.disabled =3D =
true;=0A=
}=0A=
=0A=
var attachment_template =3D new =
Template('<table><tr><th>=E6=96=87=E4=BB=B6:</th><td><span>#{filename}</s=
pan><span class=3D"more"><a href=3D"#" =
class=3D"delete">=E5=88=A0=E9=99=A4</a></span><div =
class=3D"clear"></div></td></tr><tr><th>=E6=8F=8F=E8=BF=B0:</th><td><text=
area name=3D"attachments[][remark]" cols=3D"" =
rows=3D""></textarea></td></tr></table>');=0A=
=0A=
function addAttachmentDiv(ele, max_size) {=0A=
  if (!$A(['jpg','jpeg','bmp','png','gif','rar','zip', 'tar', 'gz', =
'jar', 'war', 'bz2', '7z']).any(function(extName){return new =
RegExp('\\.'+extName+'$','i').test(ele.value);})){=0A=
    =
alert("=E5=A6=82=E6=9E=9C=E6=82=A8=E4=B8=8A=E4=BC=A0=E5=9B=BE=E7=89=87=EF=
=BC=8C=E8=AF=B7=E4=B8=8A=E4=BC=A0JPG=E3=80=81BMP=E3=80=81PNG=E6=88=96=E8=80=
=85GIF=E6=A0=BC=E5=BC=8F=E7=9A=84=E5=9B=BE=E7=89=87\n=E5=A6=82=E6=9E=9C=E6=
=82=A8=E4=B8=8A=E4=BC=A0=E9=99=84=E4=BB=B6=EF=BC=8C=E8=AF=B7=E5=85=88=E5=8E=
=8B=E7=BC=A9=E5=86=8D=E4=B8=8A=E4=BC=A0");=0A=
      return false;=0A=
  }=0A=
=0A=
  multiple_upload_attachment_counter++;=0A=
  var div =3D attachment_template.evaluate({filename: ele.value}); =0A=
  var new_input =3D new Element("input", { type: "file", name: ele.name, =
id: ele.id, disabled: multiple_upload_attachment_counter >=3D max_size});=0A=
=0A=
  Event.observe(new_input, 'change', function() {=0A=
    addAttachmentDiv(new_input, max_size);=0A=
  });=0A=
  $('groups_upload_button').insert({before : div});=0A=
  ele.insert({after: new_input});=0A=
  ele.id =3D ele.id + multiple_upload_attachment_counter;=0A=
  ele.name =3D "attachments[][uploaded_data]";=0A=
  div =3D $('groups_upload_button').previous();=0A=
  div.down('.delete').observe('click', function(event) {=0A=
    removeAttachmentDiv(this);=0A=
  });=0A=
  div.appendChild(ele.hide());=0A=
}=0A=
=0A=
function removeAttachmentDiv(link) {=0A=
  multiple_upload_attachment_counter--;=0A=
  link.up('table').remove();=0A=
  $('attachment_upload').disabled =3D false;=0A=
}=0A=
=0A=
function multiple_upload_picture(ele, max_size, tags) {=0A=
  Event.observe(ele, 'change', function() {=0A=
    addPictureDiv(ele, max_size, tags);=0A=
  });=0A=
  if (multiple_upload_picture_counter >=3D max_size) ele.disabled =3D =
true;=0A=
}=0A=
=0A=
function addPictureDiv(ele, max_size, tags) {=0A=
  if (!$A(['jpg','jpeg','bmp','png','gif']).any(function(extName){return =
new RegExp('\\.'+extName+'$','i').test(ele.value);})){=0A=
    =
alert("=E6=82=A8=E4=B8=8A=E4=BC=A0=E7=9A=84=E5=9B=BE=E7=89=87=E6=A0=BC=E5=
=BC=8F=E4=B8=8D=E6=94=AF=E6=8C=81=EF=BC=8C=E8=AF=B7=E6=82=A8=E4=B8=8A=E4=BC=
=A0JPG=E3=80=81BMP=E3=80=81PNG=E6=88=96=E8=80=85GIF=E6=A0=BC=E5=BC=8F=E7=9A=
=84=E5=9B=BE=E7=89=87");=0A=
    return false;=0A=
  }=0A=
  =0A=
  multiple_upload_picture_counter++;=0A=
  //fix for opera=0A=
  var file_name =3D ele.value;=0A=
  try {file_name =3D ele.value.match(/(.*)[\/\\]([^\/\\]+)\.\w+$/)[2];} =
catch(e) {} =0A=
  var tag_select =3D "";=0A=
  if(tags.length > 0) {=0A=
    var tag_select =3D "<select =
onchange=3D'Element.previous($(this)).value =3D this.value;'><option =
value=3D''>=E9=80=89=E6=8B=A9=E5=B7=B2=E6=9C=89=E6=A0=87=E7=AD=BE</option=
>";=0A=
    for (var i =3D 0; i < tags.length; i++)=0A=
      tag_select +=3D "<option value=3D'" + tags[i] + "'>" + tags[i] + =
"</option>";=0A=
    tag_select +=3D "</select>";=0A=
  }=0A=
  var div =3D new Element("div").update("<ul><li>=E6=96=87=E4=BB=B6: " + =
ele.value + " <a href=3D'#' onclick=3D'removePictureDiv(this, \"" + =
ele.id + "\");return =
false;'>=E5=88=A0=E9=99=A4</a></li><li>=E5=90=8D=E7=A7=B0: <input =
type=3D'text' name=3D'pictures[][name]' value=3D'" + file_name + "' =
size=3D'50' class=3D'text'/></li><li>=E6=8F=8F=E8=BF=B0: <textarea =
name=3D'pictures[][description]' =
style=3D'width:400px;height:80px;'></textarea></li></ul>");=0A=
  var new_input =3D new Element("input", { type: "file", name: ele.name, =
id: ele.id, disabled: multiple_upload_picture_counter >=3D max_size});=0A=
  =0A=
  Event.observe(new_input, 'change', function() {=0A=
    addPictureDiv(new_input, max_size, tags);=0A=
  });=0A=
  ele.insert({after : div});=0A=
  div.insert({after : new_input});=0A=
  ele.id =3D ele.id + multiple_upload_picture_counter;=0A=
  ele.name =3D "pictures[][uploaded_data]";=0A=
  div.appendChild(ele.hide().remove());=0A=
}=0A=
=0A=
function removePictureDiv(link, eleId) {=0A=
  multiple_upload_picture_counter--;=0A=
  link.parentNode.parentNode.parentNode.remove();=0A=
  $(eleId).disabled =3D false;=0A=
}=0A=
=0A=
function move_messages(dest) {=0A=
  $('dest').value =3D dest;=0A=
  $('messages_form').submit();=0A=
}=0A=
=0A=
function digg(type, id, bury) {=0A=
    var url =3D '/' + type + (bury ? '/bury' : '/digg');=0A=
    var small_button =3D !!$('d' + id);=0A=
    if(small_button) $('d'+id).innerHTML =3D "<h3><img =
src=3D'/images/spinner.gif'/><br/><span>...</span></h3>";=0A=
=0A=
    if($('digg_bottom')){=0A=
      $$('#digg_bottom div').each(function(div){div.innerHTML=3D"<img =
src=3D'/images/spinner.gif'/>";});=0A=
      new =
Ajax.Request(url,{asynchronous:true,evalScripts:true,parameters:{"id":id,=
 "bottom":true, small_button:small_button}});=0A=
    }else{=0A=
      new =
Ajax.Request(url,{asynchronous:true,evalScripts:true,parameters:{"id":id,=
 small_button:small_button}});=0A=
    }=0A=
}=0A=
=0A=
function bury_blog(blog_id) {=0A=
    $('b' + blog_id).innerHTML =3D "<h3><img =
src=3D'/images/spinner.gif'/><br/><span>...</span></h3>";=0A=
    if($('digg_bottom') !=3D undefined) {=0A=
        $$('#digg_bottom div').each(function(div){div.innerHTML=3D"<img =
src=3D'/images/spinner.gif'/>";});=0A=
        new =
Ajax.Request('/blogs/bury',{asynchronous:true,evalScripts:true,parameters=
:{"id":blog_id, "bottom":true}});=0A=
    }else{=0A=
        new =
Ajax.Request('/blogs/bury',{asynchronous:true,evalScripts:true,parameters=
:{"id":blog_id}});=0A=
    }=0A=
}=0A=
=0A=
function fix_image_size(images, maxW) {=0A=
  if(images.length > 0) {=0A=
    Event.observe(window,'load',function() {=0A=
      images.each(function(img) {=0A=
        var w =3D img.width;=0A=
        var h =3D img.height;=0A=
        if (w > maxW) {=0A=
          var f =3D 1-((w - maxW) / w);=0A=
          img.title =3D =
"=E7=82=B9=E5=87=BB=E6=9F=A5=E7=9C=8B=E5=8E=9F=E5=A7=8B=E5=A4=A7=E5=B0=8F=
=E5=9B=BE=E7=89=87";=0A=
          img.addClassName("magplus");=0A=
          img.onclick =3D function() {window.open(this.src);};=0A=
          img.width =3D w * f;=0A=
          img.height =3D h * f;=0A=
        }=0A=
      });=0A=
    });=0A=
  }=0A=
}=0A=
=0A=
function highlight_suggested_tags(tags) {=0A=
    if ($('suggested_tags_panel') !=3D=3D null) {=0A=
        $('suggested_tags_panel').select('a').each( function(el) {=0A=
            var exist_tag =3D tags.find(function(tag){=0A=
                return tag.match(new RegExp('^' + el.text + '$', 'i'));=0A=
            });=0A=
            if (exist_tag) {=0A=
                el.addClassName('added');=0A=
            } else {=0A=
                el.removeClassName('added');=0A=
            }=0A=
        });=0A=
    }=0A=
}=0A=
=0A=
function extract_tag_list(value) {=0A=
    var tags =3D value.trim().split(/,\s*|=EF=BC=8C\s*/).without('');=0A=
    highlight_suggested_tags(tags);=0A=
    tag_list =3D tags.map(function(tag) { =0A=
        return "<span>" + tag + "</span>";=0A=
    }).join('');=0A=
    if (!tag_list.empty()) {=0A=
        tag_list =3D '=E5=BD=93=E5=89=8D=E6=A0=87=E7=AD=BE=EF=BC=9A' + =
tag_list;=0A=
    }=0A=
    if ($("current_tags_panel") !=3D=3D null) {=0A=
        $("current_tags_panel").update(tag_list);=0A=
    }=0A=
}=0A=
=0A=
function observe_tag_list(id) {=0A=
    extract_tag_list($(id).value);=0A=
    new Form.Element.Observer(=0A=
        id,=0A=
        0.2,=0A=
        function(el, value) {=0A=
            extract_tag_list(value);=0A=
        }=0A=
    )=0A=
}=0A=
=0A=
function trigger_suggested_tag() {=0A=
  var tag_list_input =3D this.parentNode.previous("input");=0A=
  var current_value =3D tag_list_input.value.trim();=0A=
  if (this.hasClassName('added')) {=0A=
    var tag_regex =3D new RegExp('^' + this.text + '$', 'i')=0A=
    tag_list_input.value =3D =
current_value.split(/,\s*|=EF=BC=8C\s*/).findAll(function(tag){=0A=
      tag =3D tag.trim();=0A=
      if (tag !=3D=3D '' && !tag_regex.match(tag)) {=0A=
        return true;=0A=
      }=0A=
    }).join(', ');=0A=
    this.removeClassName('added');=0A=
  } else {=0A=
    if(current_value !=3D=3D "" && current_value[current_value.length-1] =
!=3D=3D ","){=0A=
      tag_list_input.value +=3D ", ";=0A=
    }=0A=
    tag_list_input.value +=3D this.innerHTML;=0A=
    this.addClassName('added');=0A=
  }=0A=
  Validation.validateElement($(tag_list_input));=0A=
}=0A=
=0A=
function check_category_list(checkboxes, category_list){=0A=
  checkboxes.each(function(element){=0A=
    element.checked =3D category_list.split(',').any(function(name){=0A=
      return name.trim().toLowerCase() =3D=3D this;=0A=
    }, element.value.toLowerCase());=0A=
  });=0A=
}=0A=
=0A=
document.observe("dom:loaded",function(){=0A=
    $$("div.quick_menu").each(function(ele) {=0A=
        Event.observe(ele.previous(), 'mouseover', function(e) {=0A=
            $$("div.quick_menu").invoke('hide');=0A=
            ele.style.left =3D ele.previous().positionedOffset()[0] + =
"px";=0A=
            ele.show();=0A=
        });=0A=
        Event.observe(ele.previous(), 'mouseout', function(e) {=0A=
            if(!Position.within(ele,Event.pointerX(e),Event.pointerY(e) =
+ 5))=0A=
                ele.hide();=0A=
        });=0A=
        Event.observe(ele, 'mouseout', function(e) {=0A=
            if(!Position.within(ele,Event.pointerX(e),Event.pointerY(e)))=0A=
                ele.hide();=0A=
        });=0A=
    });=0A=
    $$("div.nav_side > ul > li:not(.select)").each(function(ele) {=0A=
      Event.observe(ele, 'mouseover', function(e) {=0A=
        Event.findElement(e, 'LI').addClassName('select');=0A=
      });=0A=
      Event.observe(ele, 'mouseout', function(e) {=0A=
        Event.findElement(e, 'LI').removeClassName('select');=0A=
      });=0A=
    });=0A=
=0A=
    $$('#blog_category_checkbox =
input[type=3Dcheckbox]').each(function(element){=0A=
      element.observe('change', function(ev){=0A=
        var current_value =3D $('blog_category_list').value.trim();=0A=
        if(this.checked) {=0A=
          if(current_value =3D=3D '' || =
current_value[current_value.length -1] =3D=3D ',')=0A=
            $('blog_category_list').value +=3D this.value;=0A=
          else=0A=
            $('blog_category_list').value +=3D (','+this.value);=0A=
        } else {=0A=
          $('blog_category_list').value =3D =
current_value.split(',').reject(function(name){=0A=
            return name.trim() =3D=3D this;=0A=
          }, this.value).join(',');=0A=
        }=0A=
      });=0A=
    });=0A=
=0A=
});=0A=
=0A=
//IE6 background image cache fix=0A=
try {document.execCommand('BackgroundImageCache', false, true);} =
catch(e) {}=0A=
=0A=
=0A=
=0A=
//resume=0A=
=0A=
function add_work_experience(button, content){=0A=
  var new_id =3D new Date().getTime();=0A=
  $(button).up().insert({before: =
content.replace(/new_work_experiences/g, new_id)});=0A=
}=0A=
=0A=
function add_project_experience(link, content){=0A=
  var new_id =3D new Date().getTime();=0A=
  $(link).up().insert({before: =
content.replace(/new_project_experiences/g, new_id)});=0A=
}=0A=
=0A=
function add_education(button, content){=0A=
  var new_id =3D new Date().getTime();=0A=
  $$('.editing .educations')[0].insert({bottom: =
content.replace(/new_educations/g, new_id)});=0A=
}=0A=
=0A=
function add_training(button, content){=0A=
  var new_id =3D new Date().getTime();=0A=
  $$('.editing .trainings')[0].insert({bottom: =
content.replace(/new_trainings/g, new_id)});=0A=
}=0A=
=0A=
function add_certificate(button, content){=0A=
  var new_id =3D new Date().getTime();=0A=
  $$('.editing .certificates')[0].insert({bottom: =
content.replace(/new_certificates/g, new_id)});=0A=
}=0A=
=0A=
function add_skill(button, content){=0A=
  $$('.editing .skills')[0].insert({bottom: content});=0A=
}=0A=
=0A=
function add_language(button, content){=0A=
  $$('.editing .languages')[0].insert({bottom: content});=0A=
}=0A=
=0A=
document.observe("dom:loaded",function(){=0A=
  $$('#my_resume .control .expand').each(function(el){=0A=
    el.hide();=0A=
  });=0A=
  document.observe('click', function(event){=0A=
=0A=
    if(el =3D event.findElement('#my_resume .control .expand')){=0A=
      el.up('h1').next('.view_con').show();=0A=
      el.previous('.contract').show();=0A=
      el.hide();=0A=
      event.stop();=0A=
    } else if(el =3D event.findElement('#my_resume .control .contract')){=0A=
      el.up('h1').next('.view_con').hide();=0A=
      el.next('.expand').show();=0A=
      el.hide();=0A=
      event.stop();=0A=
    } else if (el =3D event.findElement('#my_resume .control .edit')){=0A=
      if($('profile_invalid_flag') && =
!(/myresume\/edit$/.test(el['href']))){=0A=
        =
alert("=E4=B8=AA=E4=BA=BA=E8=B5=84=E6=96=99=E4=B8=8D=E5=AE=8C=E6=95=B4,=E8=
=AF=B7=E5=85=88=E5=AE=8C=E5=96=84=E4=B8=AA=E4=BA=BA=E8=B5=84=E6=96=99");=0A=
      }else{=0A=
        new Ajax.Request(el['href'], {=0A=
          method: 'get',=0A=
          onSuccess: function(res){=0A=
            el.up('.view').replace(res.responseText);=0A=
          }=0A=
        });=0A=
      }=0A=
      event.stop();=0A=
    } else if (el =3D event.findElement('.work_exp > .del_work a.del')){=0A=
      =
if(confirm("=E7=A1=AE=E5=AE=9A=E8=A6=81=E5=88=A0=E9=99=A4=E8=AF=A5=E5=B7=A5=
=E4=BD=9C=E7=BB=8F=E9=AA=8C=E5=90=97=EF=BC=9F")){=0A=
        if(/\#$/.test(el['href'])){=0A=
          el.up('.work_exp').remove();=0A=
        } else {=0A=
          new Ajax.Request(el['href'], {=0A=
            method: 'delete',=0A=
            onSuccess: function(res){=0A=
              el.up('.work_exp').remove();=0A=
            }=0A=
          });=0A=
        }=0A=
      }=0A=
      event.stop();=0A=
    } else if(el =3D event.findElement('.project_exp > .del_project =
a.del')) {=0A=
      =
if(confirm("=E7=A1=AE=E5=AE=9A=E8=A6=81=E5=88=A0=E9=99=A4=E8=AF=A5=E9=A1=B9=
=E7=9B=AE=E7=BB=8F=E9=AA=8C=E5=90=97=EF=BC=9F")){=0A=
        if(/\#$/.test(el['href'])){=0A=
          el.up('.project_exp').remove();=0A=
        } else {=0A=
          new Ajax.Request(el['href'], {=0A=
            method: 'delete',=0A=
            onSuccess: function(res){=0A=
              el.up('.project_exp').remove();=0A=
            }=0A=
          });=0A=
        }=0A=
      }=0A=
      event.stop();=0A=
    } else if(el =3D event.findElement('.edu_exp a.del')){=0A=
      =
if(confirm("=E7=A1=AE=E5=AE=9A=E8=A6=81=E5=88=A0=E9=99=A4=E5=90=97=EF=BC=9F=
")){=0A=
        if(/\#$/.test(el['href'])){=0A=
          el.up('.edu_exp').remove();=0A=
        } else {=0A=
          new Ajax.Request(el['href'], {=0A=
            method: 'delete',=0A=
            onSuccess: function(res){=0A=
              el.up('.edu_exp').remove();=0A=
            }=0A=
          });=0A=
        }=0A=
      }=0A=
      event.stop();=0A=
    } else if (el =3D event.findElement('.skills a.del')){=0A=
      =
if(confirm("=E7=A1=AE=E5=AE=9A=E8=A6=81=E5=88=A0=E9=99=A4=E8=AF=A5=E6=8A=80=
=E8=83=BD=E5=90=97=EF=BC=9F")){=0A=
        if(/\#$/.test(el['href'])){=0A=
          el.up('li').remove();=0A=
        } else {=0A=
          var form =3D el.up('form');=0A=
=0A=
          el.up('li').getElementsBySelector('.level =
input[type=3Dradio]').each(function(radio){=0A=
            radio['name'] =3D 'destroied';=0A=
          });=0A=
=0A=
          new Ajax.Request(el['href'], {=0A=
            method: 'delete',=0A=
            parameters: form.serialize(),=0A=
            onSuccess: function(){=0A=
              el.up('li').remove();=0A=
            }=0A=
          });=0A=
        }=0A=
      }=0A=
      event.stop();=0A=
    } else if (el =3D event.findElement('.languages a.del')) {=0A=
      if =
(confirm("=E7=A1=AE=E5=AE=9A=E8=A6=81=E5=88=A0=E9=99=A4=E8=AF=A5=E8=AF=AD=
=E7=A7=8D=E5=90=97?")) { =0A=
        if(/\#$/.test(el['href'])){=0A=
          el.up('li').remove();=0A=
        }else{=0A=
          var form =3D el.up('form');=0A=
=0A=
          el.up('li').getElementsBySelector('.level =
select').each(function(select_elem){=0A=
            select_elem['name'] =3D 'destroied';=0A=
          });=0A=
=0A=
          new Ajax.Request(el['href'], {=0A=
            method: 'delete',=0A=
            parameters: form.serialize(),=0A=
            onSuccess: function(){=0A=
              el.up('li').remove();=0A=
            }=0A=
          });=0A=
        }=0A=
      }=0A=
      event.stop();=0A=
    }=0A=
=0A=
  });=0A=
=0A=
  var resume_submit_precess =3D function(event){=0A=
    if(form =3D event.findElement('#my_resume .editing form.remote')){=0A=
      form.request({=0A=
        onSuccess: function(res){=0A=
          var prev =3D form.up('.editing').previous();=0A=
          prev.insert({after: res.responseText});=0A=
          prev.next().down('.expand').hide();=0A=
          form.up('.editing').remove();=0A=
        }=0A=
      });=0A=
      event.stop();=0A=
    }=0A=
  };=0A=
  if(Prototype.Browser.IE){=0A=
    document.observe('focusin', function(event){=0A=
      var form =3D event.findElement("#my_resume form");=0A=
      if(form && !form.submit_bubbles_on_ie){=0A=
        form.submit_bubbles_on_ie =3D true;=0A=
        form.observe('submit', resume_submit_precess);=0A=
      }=0A=
    });=0A=
  }else{=0A=
    document.observe('submit', resume_submit_precess);=0A=
  }=0A=
=0A=
=0A=
=0A=
  var resume_change_process =3D function(event){=0A=
    if(select =3D event.findElement('#my_resume .skills .title =
.skill_option_one')){=0A=
      var two_elem =3D select.next();=0A=
      var skill_title =3D '';=0A=
      if('=E6=89=8B=E5=8A=A8=E6=B7=BB=E5=8A=A0' =3D=3D select['value']){=0A=
        two_elem.replace('<input class=3D"skill_option_two" =
name=3D"skill_option_two" style=3D"width:80px;" type=3D"text">');=0A=
      }else{=0A=
        if(two_elem.nodeName.toUpperCase() =3D=3D "SELECT"){=0A=
          two_elem.length =3D 0;=0A=
        }else{=0A=
          two_elem.replace(new Element('select', =
{'class':'skill_option_two', 'name': 'skill_option_two'}));=0A=
        }=0A=
        window.skill_options_two.get(select['value']).each(function(v){ =
select.next().appendChild(new Element('option', { 'value': v =
}).update(v)); });=0A=
        skill_title =3D window.skill_options_two.get(select['value'])[0];=0A=
      }=0A=
      =
select.up('.title').next('.level').getElementsBySelector('input').each(fu=
nction(radio){=0A=
        radio.checked =3D false;=0A=
        radio['name'] =3D 'resume[skills][' + skill_title + ']';=0A=
      });=0A=
    }else if(select =3D event.findElement('#my_resume .skills .title =
.skill_option_two')){=0A=
      =
select.up('.title').next('.level').getElementsBySelector('input').each(fu=
nction(radio){=0A=
        radio.checked =3D false;=0A=
        radio['name'] =3D 'resume[skills][' + select['value'] + ']';=0A=
      });=0A=
    }else if(select =3D event.findElement('#my_resume .languages .title =
select')){=0A=
      =
select.up('.title').next('.level').getElementsBySelector('select').each(f=
unction(select_elem){=0A=
        select_elem['name'] =3D 'resume[languages]['+ select['value'] =
+'][]';=0A=
      });=0A=
    }else if(select =3D (event.findElement('#my_resume .work_exp =
select.company_industry') || =
event.findElement('#company_industry_search'))){=0A=
      if(select['value'] =3D=3D '=E5=85=B6=E5=AE=83'){=0A=
         var elem_str =3D "<input type=3D'text' class=3D'input_1 =
required' style=3D'margin-left: 10px;' name=3D'" + select['name'] + "' =
/>"=0A=
         if(select['id'] =3D=3D 'company_industry_search'){elem_str =3D =
"<input type=3D'text' class=3D'text' style=3D'margin-left: 10px;' =
name=3D'" + select['name'] + "' />"}=0A=
         select.insert({'after': elem_str});=0A=
         select['name'] =3D '';=0A=
      }else{=0A=
        var ci_text_elem =3D select.next('input');=0A=
        if(ci_text_elem){=0A=
          select['name'] =3D ci_text_elem['name'];=0A=
          select.next('input').remove();=0A=
        }=0A=
      }=0A=
    }else if(select =3D event.findElement('#skills_search')){=0A=
      if(select['value'] =3D=3D '=E5=85=B6=E5=AE=83'){=0A=
        select.insert({'after': "<input type=3D'text' class=3D'text' =
style=3D'margin-left:10px;' name=3D'"+ select['name'] +"' />"})=0A=
        select['name'] =3D '';=0A=
      }else{=0A=
        var ci_text_elem =3D select.next('input');=0A=
        if(ci_text_elem){=0A=
          select['name'] =3D ci_text_elem['name'];=0A=
          select.next('input').remove();=0A=
        }=0A=
      }=0A=
    }=0A=
  };=0A=
  if(Prototype.Browser.IE){=0A=
    document.observe('focusin', function(event){=0A=
      var select =3D event.findElement("#my_resume select");=0A=
      if(select && !select.change_bubbles_on_ie){=0A=
        select.change_bubbles_on_ie =3D true;=0A=
        select.observe('change', resume_change_process);=0A=
      }=0A=
    });=0A=
  }else{=0A=
    document.observe('change', resume_change_process);=0A=
  }=0A=
});=0A=
=0A=
function add_vote_option(btn, html_str){=0A=
  var new_id =3D new Date().getTime();=0A=
  $(btn).up().previous().insert({bottom: =
html_str.replace(/new_vote_option_id/g, new_id)});=0A=
}=0A=
function del_vote_option(vote_option){=0A=
  vote_option =3D $(vote_option);=0A=
  var tr1 =3D vote_option.up(1);=0A=
  var tr2 =3D tr1.next();=0A=
  var vote_option_url =3D vote_option.getAttribute('url');=0A=
  if(vote_option_url){=0A=
    =
if(confirm('=E6=85=8E=E7=94=A8,=E5=A6=82=E6=8A=95=E7=A5=A8=E9=80=89=E9=A1=
=B9=E4=B8=8B=E6=9C=89=E5=BE=88=E5=A4=9A=E6=8A=95=E7=A5=A8,=E4=BC=9A=E5=88=
=A0=E9=99=A4=E5=85=B6=E6=89=80=E6=9C=89=E6=8A=95=E7=A5=A8,=E8=80=8C=E5=A2=
=9E=E5=8A=A0=E6=9C=8D=E5=8A=A1=E5=99=A8=E5=8E=8B=E5=8A=9B')){=0A=
    new Ajax.Request(vote_option_url, {=0A=
        method: 'delete',=0A=
        onSuccess: function(transport){ tr1.remove(); tr2.remove();}=0A=
        });=0A=
    }=0A=
  }else{=0A=
    tr1.remove();=0A=
    tr2.remove();=0A=
  }=0A=
}=0A=
/* JSON-P implementation for Prototype.js somewhat by Dan Dean =
(http://www.dandean.com)=0A=
 * =0A=
 * *HEAVILY* based on Tobie Langel's version: =
http://gist.github.com/145466.=0A=
 * Might as well just call this an iteration.=0A=
 * =0A=
 * This version introduces:=0A=
 * - Support for predefined callbacks (Necessary for OAuth signed =
requests, by @rboyce)=0A=
 * - Partial integration with Ajax.Responders (Thanks to @sr3d for the =
kick in this direction)=0A=
 * - Compatibility with Prototype 1.7 (Thanks to @soung3 for the bug =
report)=0A=
 * - Will not break if page lacks a <head> element=0A=
 *=0A=
 * See examples in README for usage=0A=
 *=0A=
 * VERSION 1.1.2=0A=
 *=0A=
 * new Ajax.JSONRequest(url, options);=0A=
 * - url (String): JSON-P endpoint url.=0A=
 * - options (Object): Configuration options for the request.=0A=
 */=0A=
Ajax.JSONRequest =3D Class.create(Ajax.Base, (function() {=0A=
  var id =3D 0, head =3D document.getElementsByTagName('head')[0] || =
document.body;=0A=
  return {=0A=
    initialize: function($super, url, options) {=0A=
      $super(options);=0A=
      this.options.url =3D url;=0A=
      this.options.callbackParamName =3D this.options.callbackParamName =
|| 'callback';=0A=
      this.options.timeout =3D this.options.timeout || 10; // Default =
timeout: 10 seconds=0A=
      this.options.invokeImmediately =3D =
(!Object.isUndefined(this.options.invokeImmediately)) ? =
this.options.invokeImmediately : true ;=0A=
      =0A=
      if (!Object.isUndefined(this.options.parameters) && =
Object.isString(this.options.parameters)) {=0A=
        this.options.parameters =3D =
this.options.parameters.toQueryParams();=0A=
      }=0A=
      =0A=
      if (this.options.invokeImmediately) {=0A=
        this.request();=0A=
      }=0A=
    },=0A=
    =0A=
    /**=0A=
     *  Ajax.JSONRequest#_cleanup() -> undefined=0A=
     *  Cleans up after the request=0A=
     **/=0A=
    _cleanup: function() {=0A=
      if (this.timeout) {=0A=
        clearTimeout(this.timeout);=0A=
        this.timeout =3D null;=0A=
      }=0A=
      if (this.transport && Object.isElement(this.transport)) {=0A=
        this.transport.remove();=0A=
        this.transport =3D null;=0A=
      }=0A=
    },=0A=
  =0A=
    /**=0A=
     *  Ajax.JSONRequest#request() -> undefined=0A=
     *  Invokes the JSON-P request lifecycle=0A=
     **/=0A=
    request: function() {=0A=
      =0A=
      // Define local vars=0A=
      var response =3D new Ajax.JSONResponse(this);=0A=
      var key =3D this.options.callbackParamName,=0A=
        name =3D '_prototypeJSONPCallback_' + (id++),=0A=
        complete =3D function() {=0A=
          if (Object.isFunction(this.options.onComplete)) {=0A=
            this.options.onComplete.call(this, response);=0A=
          }=0A=
          Ajax.Responders.dispatch('onComplete', this, response);=0A=
        }.bind(this);=0A=
      =0A=
      // If the callback parameter is already defined, use that=0A=
      if (this.options.parameters[key] !=3D=3D undefined) {=0A=
        name =3D this.options.parameters[key];=0A=
      }=0A=
      // Otherwise, add callback as a parameter=0A=
      else {=0A=
        this.options.parameters[key] =3D name;=0A=
      }=0A=
      =0A=
      // Build request URL=0A=
      this.options.parameters[key] =3D name;=0A=
      var url =3D this.options.url + ((this.options.url.include('?') ? =
'&' : '?') + Object.toQueryString(this.options.parameters));=0A=
      =0A=
      // Define callback function=0A=
      window[name] =3D function(json) {=0A=
        this._cleanup(); // Garbage collection=0A=
        window[name] =3D undefined;=0A=
=0A=
        response.status =3D 200;=0A=
        response.statusText =3D "OK";=0A=
        response.setResponseContent(json);=0A=
=0A=
        if (Object.isFunction(this.options.onSuccess)) {=0A=
          this.options.onSuccess.call(this, response);=0A=
        }=0A=
        Ajax.Responders.dispatch('onSuccess', this, response);=0A=
=0A=
        complete();=0A=
=0A=
      }.bind(this);=0A=
      =0A=
      this.transport =3D new Element('script', { type: =
'text/javascript', src: url });=0A=
      =0A=
      if (Object.isFunction(this.options.onCreate)) {=0A=
        this.options.onCreate.call(this, response);=0A=
      }=0A=
      Ajax.Responders.dispatch('onCreate', this);=0A=
      =0A=
      head.appendChild(this.transport);=0A=
=0A=
      this.timeout =3D setTimeout(function() {=0A=
        this._cleanup();=0A=
        window[name] =3D Prototype.emptyFunction;=0A=
        if (Object.isFunction(this.options.onFailure)) {=0A=
          response.status =3D 504;=0A=
          response.statusText =3D "Gateway Timeout";=0A=
          this.options.onFailure.call(this, response);=0A=
        }=0A=
        complete();=0A=
      }.bind(this), this.options.timeout * 1000);=0A=
    },=0A=
    toString: function() { return "[object Ajax.JSONRequest]"; }=0A=
  };=0A=
})());=0A=
=0A=
Ajax.JSONResponse =3D Class.create({=0A=
  initialize: function(request) {=0A=
    this.request =3D request;=0A=
  },=0A=
  request: undefined,=0A=
  status: 0,=0A=
  statusText: '',=0A=
  responseJSON: undefined,=0A=
  responseText: undefined,=0A=
  setResponseContent: function(json) {=0A=
    this.responseJSON =3D json;=0A=
    this.responseText =3D Object.toJSON(json);=0A=
  },=0A=
  getTransport: function() {=0A=
    if (this.request) return this.request.transport;=0A=
  },=0A=
  toString: function() { return "[object Ajax.JSONResponse]"; }=0A=
});document.observe("dom:loaded", function() {=0A=
  (function(){=0A=
    function is_ie6(){=0A=
      return ((window.XMLHttpRequest =3D=3D undefined) && (ActiveXObject =
!=3D undefined));=0A=
    }=0A=
=0A=
    var notifications;=0A=
    var unread_count =3D 0;=0A=
    var notifications_count =3D $('notifications_count');=0A=
    var notifications_menu =3D $('notifications_menu');=0A=
    var notifications_summary, notifications_detail;=0A=
=0A=
    var Render =3D {=0A=
      summary_names : function(names) {=0A=
        if (names.length > 3) {=0A=
          return new =
Template('#{names}=E5=92=8C=E5=8F=A6=E5=A4=96#{other}=E4=BA=BA').evaluate=
({=0A=
            'names' : names.clone().splice(0,3).join('=EF=BC=8C'), =
'other' : names.length - 3=0A=
          });=0A=
        } else {=0A=
          return names.join('=EF=BC=8C');=0A=
        }=0A=
      },=0A=
=0A=
      template_blog_comment : function(notification) {=0A=
        this.render_comments_common_template(notification, 'blog', =
'=E5=9B=9E=E5=A4=8D=E4=BA=86=E6=82=A8=E7=9A=84=E5=8D=9A=E5=AE=A2=E6=96=87=
=E7=AB=A0');=0A=
      },=0A=
=0A=
      template_blog_comment_other : function(notification) {=0A=
        this.render_comments_common_template(notification, 'blog', =
'=E5=9B=9E=E5=A4=8D=E4=BA=86=E6=82=A8=E5=9B=9E=E5=A4=8D=E8=BF=87=E7=9A=84=
=E5=8D=9A=E5=AE=A2=E6=96=87=E7=AB=A0');=0A=
      },=0A=
=0A=
      template_topic_post : function(notification) {=0A=
        this.render_comments_common_template(notification, 'topic', =
'=E5=9B=9E=E5=A4=8D=E4=BA=86=E6=82=A8=E7=9A=84=E8=AE=BA=E5=9D=9B=E4=B8=BB=
=E9=A2=98', 'posts');=0A=
      },=0A=
=0A=
      template_topic_post_other : function(notification) {=0A=
        this.render_comments_common_template(notification, 'topic', =
'=E5=9B=9E=E5=A4=8D=E4=BA=86=E6=82=A8=E5=9B=9E=E5=A4=8D=E8=BF=87=E7=9A=84=
=E8=AE=BA=E5=9D=9B=E4=B8=BB=E9=A2=98', 'posts');=0A=
      },=0A=
=0A=
      template_group_topic_post : function(notification) {=0A=
        this.render_comments_common_template(notification, 'topic', =
'=E5=9B=9E=E5=A4=8D=E4=BA=86=E6=82=A8=E7=9A=84=E7=BE=A4=E7=BB=84=E4=B8=BB=
=E9=A2=98', 'posts');=0A=
      },=0A=
=0A=
      template_group_topic_post_other : function(notification) {=0A=
        this.render_comments_common_template(notification, 'topic', =
'=E5=9B=9E=E5=A4=8D=E4=BA=86=E6=82=A8=E5=9B=9E=E5=A4=8D=E8=BF=87=E7=9A=84=
=E7=BE=A4=E7=BB=84=E4=B8=BB=E9=A2=98', 'posts');=0A=
      },=0A=
=0A=
      template_news_comment: function(notification) {=0A=
        this.render_comments_common_template(notification, 'news', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E7=9A=84=E8=B5=84=E8=AE=AF=E6=96=87=
=E7=AB=A0');=0A=
      },=0A=
=0A=
      template_news_comment_other: function(notification) {=0A=
        this.render_comments_common_template(notification, 'news', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E8=AF=84=E8=AE=BA=E8=BF=87=E7=9A=84=
=E8=B5=84=E8=AE=AF=E6=96=87=E7=AB=A0');=0A=
      },=0A=
=0A=
      template_essence_comment: function(notification) {=0A=
        this.render_comments_common_template(notification, 'essence', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E7=9A=84=E7=B2=BE=E5=8D=8E=E6=96=87=
=E7=AB=A0');=0A=
      },=0A=
=0A=
      template_essence_comment_other: function(notification) {=0A=
        this.render_comments_common_template(notification, 'essence', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E8=AF=84=E8=AE=BA=E8=BF=87=E7=9A=84=
=E7=B2=BE=E5=8D=8E=E6=96=87=E7=AB=A0');=0A=
      },=0A=
=0A=
      template_problem_solution: function(notification) {=0A=
        this.render_comments_common_template(notification, 'problem', =
'=E5=9B=9E=E7=AD=94=E4=BA=86=E6=82=A8=E7=9A=84=E9=97=AE=E9=A2=98', =
'solutions');=0A=
      },=0A=
=0A=
      template_problem_solution_other: function(notification) {=0A=
        this.render_comments_common_template(notification, 'problem', =
'=E5=9B=9E=E7=AD=94=E4=BA=86=E6=82=A8=E5=9B=9E=E7=AD=94=E8=BF=87=E7=9A=84=
=E9=97=AE=E9=A2=98', 'solutions');=0A=
      },=0A=
=0A=
      template_event_comment: function(notification) {=0A=
        this.render_comments_common_template(notification, 'event', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E7=9A=84=E6=B4=BB=E5=8A=A8', =
'comments');=0A=
      },=0A=
=0A=
      template_event_comment_other: function(notification) {=0A=
        this.render_comments_common_template(notification, 'event', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E8=AF=84=E8=AE=BA=E8=BF=87=E7=9A=84=
=E6=B4=BB=E5=8A=A8', 'comments');=0A=
      },=0A=
=0A=
      template_event_comment_member: function(notification) {=0A=
        this.render_comments_common_template(notification, 'event', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E5=8F=82=E4=B8=8E=E7=9A=84=E6=B4=BB=
=E5=8A=A8', 'comments');=0A=
      },=0A=
=0A=
      template_page_comment: function(notification) {=0A=
        this.render_comments_common_template(notification, 'page', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E7=9A=84=E7=9F=A5=E8=AF=86=E5=BA=93=
', 'comments');=0A=
      },=0A=
=0A=
      template_page_comment_other: function(notification) {=0A=
        this.render_comments_common_template(notification, 'page', =
'=E8=AF=84=E8=AE=BA=E4=BA=86=E6=82=A8=E8=AF=84=E8=AE=BA=E8=BF=87=E7=9A=84=
=E7=9F=A5=E8=AF=86=E5=BA=93', 'comments');=0A=
      },=0A=
=0A=
      render_comments_common_template : function(notification, subject, =
title, comments) {=0A=
        comments =3D comments || 'comments';=0A=
        var names =3D notification[comments].map(function(comment) { =
return comment.user.name; }).uniq();=0A=
        var summary =3D this.summary_names(names) + title;=0A=
=0A=
        var link =3D new Template(' <span class=3D"subject_link"><a =
href=3D"#{url}" target=3D"_blank">#{title}</a></span>').evaluate({=0A=
          'summary' : summary, 'url' : notification[subject].url, =
'title' : notification[subject].title=0A=
        });=0A=
        var detail_items =3D new Element('div', {'class' : =
'detail_items'});=0A=
        notification[comments].each(function(comment, index) {=0A=
          if (index > 2) {=0A=
            var template =3D new Template('<div =
class=3D"notification_detail_item clearfix" =
style=3D"display:none;"><span class=3D"left"><a href=3D"#{user_url}" =
target=3D"_blank">#{user_name}</a>=EF=BC=9A#{body} </span><span =
class=3D"time">#{time}</span></div>')=0A=
          } else {=0A=
            var template =3D new Template('<div =
class=3D"notification_detail_item clearfix"><span class=3D"left"><a =
href=3D"#{user_url}" =
target=3D"_blank">#{user_name}</a>=EF=BC=9A#{body}</span> <span =
class=3D"time">#{time}</span></div>')=0A=
          }=0A=
          detail_items.insert(template.evaluate({=0A=
            user_url : comment.user.url, user_name : comment.user.name, =
body : comment.body, time : comment.created_at=0A=
          }));=0A=
          if (comment.url) {=0A=
            var comment_link =3D ' <a target=3D"_blank" href=3D"' + =
comment.url + '">=E6=9F=A5=E7=9C=8B</a>';=0A=
            detail_items.select(":last-child =
.left")[0].insert(comment_link);=0A=
          }=0A=
          if (index =3D=3D=3D 2 && notification[comments].length > 3) {=0A=
            var actions =3D new Element('div', {'class' : =
'notification_detail_item clearfix'});=0A=
            var show_all =3D new Element('a', {'class': =
'show_all'}).update('=E6=9F=A5=E7=9C=8B=E5=8F=A6=E5=A4=96'+ =
(notification[comments].length - 3) + '=E6=9D=A1' );=0A=
            show_all.observe('click', function(ev) {=0A=
              this.up().siblings().each(Element.show);=0A=
              this.up().hide();=0A=
            });=0A=
            actions.insert(show_all);=0A=
            detail_items.insert(actions);=0A=
          }=0A=
        });=0A=
=0A=
        this.render_common_template(notification, {summary : summary, =
detail_title : summary + link, detail_items : detail_items});=0A=
      },=0A=
=0A=
      template_subscription: function(notification) {=0A=
        var names =3D notification.subscribers.map(function(subscriber) =
{ return subscriber.name; }).uniq();=0A=
        var summary =3D new =
Template('#{names}=E5=85=B3=E6=B3=A8=E4=BA=86=E6=82=A8').evaluate({=0A=
          names : this.summary_names(names)=0A=
        });=0A=
=0A=
        var detail_items =3D new Element('div', {'class' : =
'detail_items'});=0A=
        notification.subscribers.each(function(subscriber){=0A=
          detail_items.insert(new Template('<div =
class=3D"notification_detail_item clearfix"><div class=3D"logo"><a =
href=3D"#{user_url}" target=3D"_blank"><img src=3D"#{logo_path}" =
/></a></div><a href=3D"#{user_url}" =
target=3D"_blank">#{user_name}</a></div>').evaluate({=0A=
            user_url : subscriber.url, user_name : subscriber.name, =
logo_path : subscriber.logo_path=0A=
          }));=0A=
        });=0A=
        this.render_common_template(notification, {summary : summary, =
detail_title : summary, detail_items : detail_items});=0A=
      },=0A=
=0A=
      template_common: function(notification) {=0A=
        this.render_common_template(notification, {summary : =
notification.title,=0A=
          detail_title : notification.title, detail_content : =
notification.detail,=0A=
          detail_notice : notification.notice});=0A=
      },=0A=
=0A=
      render_common_template: function(notification, params){=0A=
        var summary =3D new Element('div', {id: 'notification_summary_' =
+ notification.id, 'class' : "notification_summary clearfix"});=0A=
        var summary_title =3D new Element('div', {'class' : =
'left'}).update(params.summary);=0A=
        var time =3D '<span class=3D"time">' + notification.updated_at + =
'</span>';=0A=
        if (!notification.read) {=0A=
          summary.addClassName("unread");=0A=
        }=0A=
        summary.update(summary_title).insert(time);=0A=
        notifications_summary.insert(summary);=0A=
=0A=
        var detail =3D new Element('div', {id : 'notification_' + =
notification.id, 'class' : 'notification_detail clearfix'});=0A=
        detail.update('<div class=3D"notification_detail_title =
clearfix"></div><div class=3D"notification_detail_content =
clearfix"></div>').hide();=0A=
        var detail_title =3D new Element('div', {'class' : =
'left'}).update(params.detail_title);=0A=
        =
detail.down('.notification_detail_title').insert(detail_title).insert(tim=
e);=0A=
        var content =3D detail.down('.notification_detail_content');=0A=
        if (params.detail_content) {=0A=
          content.insert(new Element('div', {'class' : =
'system_message'}).insert(params.detail_content));=0A=
        }=0A=
        if (params.detail_items) { content.insert(params.detail_items); }=0A=
        if (params.detail_notice) {=0A=
          var notice =3D new Element('div', {'class' : =
'notification_detail_notice clearfix'}).update(params.detail_notice);=0A=
          detail.insert({bottom : notice});=0A=
        }=0A=
        notifications_detail.insert(detail);=0A=
=0A=
        summary.observe('click', function(ev) {=0A=
          if (notifications_summary.down('.current')) {=0A=
            =
notifications_summary.down('.current').removeClassName('current');=0A=
          }=0A=
          this.addClassName('current');=0A=
          summary_to_detail();=0A=
        });=0A=
      }=0A=
    }=0A=
=0A=
    function refresh_paginate_button() {=0A=
      var current =3D notifications_detail.down('.current')=0A=
      if (current.next('.notification_detail')) {=0A=
        $('next_button').removeClassName('disable');=0A=
      } else {=0A=
        $('next_button').addClassName('disable');=0A=
      }=0A=
      if (current.previous('.notification_detail')) {=0A=
        $('prev_button').removeClassName('disable');=0A=
      } else {=0A=
        $('prev_button').addClassName('disable');=0A=
      }=0A=
    }=0A=
=0A=
    var change_page_effect_running =3D false;=0A=
    function change_page_effect(from, to, reverse) {=0A=
      var topOffset =3D from.positionedOffset()[1] + 'px';=0A=
      var from_status, to_status;=0A=
      change_page_effect_running =3D true;=0A=
      function clean_style(effect){=0A=
        if (effect.element.id =3D=3D=3D from.id) {=0A=
          from_status =3D true;=0A=
        } else {=0A=
          to_status =3D true;=0A=
        }=0A=
        if (from_status && to_status) {=0A=
          from.writeAttribute('style', 'display:none');=0A=
          to.writeAttribute('style', '');=0A=
          change_page_effect_running =3D false;=0A=
          if (!is_ie6() && notifications_detail.visible()) {=0A=
            var link =3D =
notifications_detail.down('.current').select('a').first();=0A=
            if (link) { link.focus(); }=0A=
          }=0A=
        }=0A=
      }=0A=
      var width =3D notifications_menu.getWidth();=0A=
      var widthPx =3D width + 'px';=0A=
      if (reverse) {=0A=
        to.setStyle({position: 'absolute', left: '-' + widthPx, width: =
widthPx, top: topOffset}).show();=0A=
        Effect.multiple([from, to], Effect.Move, {speed: 0, x: width, =
duration: 0.15, afterFinish: clean_style});=0A=
      } else {=0A=
        to.setStyle({position: 'absolute', left: widthPx, width: =
widthPx, top: topOffset}).show();=0A=
        Effect.multiple([from, to], Effect.Move, {speed: 0, x: -width, =
duration: 0.15, afterFinish: clean_style});=0A=
      }=0A=
    }=0A=
=0A=
    function read_detail(detail) {=0A=
      $('notification_summary_' + =
detail.id.split('_').last()).removeClassName('unread');=0A=
    }=0A=
=0A=
    function change_detail_page(current, to, reverse) {=0A=
      current.removeClassName('current');=0A=
      to.addClassName('current');=0A=
      var id =3D to.id.split('_').last();=0A=
      notifications_summary.down('.current').removeClassName('current');=0A=
      notifications_summary.down('#notification_summary_' + =
id).addClassName('current');=0A=
      change_page_effect(current, to, reverse);=0A=
      read_detail(to);=0A=
      refresh_paginate_button();=0A=
    }=0A=
=0A=
    function next_detail() {=0A=
      var current =3D notifications_detail.down('.current');=0A=
      var next_page =3D current.next('.notification_detail');=0A=
      if (next_page) {=0A=
        change_detail_page(current, next_page);=0A=
      }=0A=
    }=0A=
=0A=
    function prev_detail() {=0A=
      var current =3D notifications_detail.down('.current');=0A=
      var prev_page =3D current.previous('.notification_detail');=0A=
      if (prev_page) {=0A=
        change_detail_page(current, prev_page, true);=0A=
      }=0A=
    }=0A=
=0A=
    function init_detail_paginate() {=0A=
      var paginate =3D new Element('span', {'class' : 'paginate'});=0A=
      var prev =3D new Element('a', {id : =
'prev_button'}).update('=E2=80=B9 =E4=B8=8A=E4=B8=80=E6=9D=A1');=0A=
      var next =3D new Element('a', {id : =
'next_button'}).update('=E4=B8=8B=E4=B8=80=E6=9D=A1 =E2=80=BA');=0A=
      next.observe('click', function(ev) {=0A=
        if (!this.hasClassName('disable')){=0A=
          next_detail();=0A=
        }=0A=
      });=0A=
      prev.observe('click', function(ev) {=0A=
        if (!this.hasClassName('disable')){=0A=
          prev_detail();=0A=
        }=0A=
      });=0A=
      paginate.insert(prev).insert('<span =
class=3D"separated">|</span>').insert(next);=0A=
      return paginate;=0A=
    }=0A=
=0A=
    function summary_to_detail() {=0A=
      var summary =3D notifications_summary.down('.current');=0A=
      var detail =3D notifications_detail.down('#notification_' + =
summary.id.split('_').last());=0A=
      var prev =3D notifications_detail.down('.current');=0A=
      if (prev) {=0A=
        prev.removeClassName('current').hide();=0A=
      }=0A=
      detail.addClassName('current').show();=0A=
      read_detail(detail);=0A=
      refresh_paginate_button();=0A=
      change_page_effect(notifications_summary, notifications_detail);=0A=
    }=0A=
=0A=
    function hotkey_left() {=0A=
      if (notifications_detail.visible()) {=0A=
        if =
(notifications_detail.down('.current').previous('.notification_detail')) =
{=0A=
          prev_detail();=0A=
        } else {=0A=
          change_page_effect(notifications_detail, =
notifications_summary, true);=0A=
        }=0A=
      }=0A=
    }=0A=
=0A=
    function hotkey_right() {=0A=
      if (notifications_detail.visible()) {=0A=
        next_detail();=0A=
      } else {=0A=
        if (!notifications_summary.down('.current')) {=0A=
          =
notifications_summary.down('.notification_summary').addClassName('current=
');=0A=
        }=0A=
        summary_to_detail();=0A=
      }=0A=
    }=0A=
=0A=
    function hotkey_up() {=0A=
      if (notifications_summary.visible()) {=0A=
        var current_summary =3D notifications_summary.down('.current');=0A=
        if (current_summary) {=0A=
          if (current_summary.previous('.notification_summary')) {=0A=
            current_summary.removeClassName('current');=0A=
            =
current_summary.previous('.notification_summary').addClassName('current')=
;=0A=
          }=0A=
        }=0A=
      }=0A=
    }=0A=
=0A=
    function hotkey_down() {=0A=
      if (notifications_summary.visible()) {=0A=
        var current_summary =3D notifications_summary.down('.current');=0A=
        if (current_summary) {=0A=
          if (current_summary.next('.notification_summary')) {=0A=
            current_summary.removeClassName('current');=0A=
            =
current_summary.next('.notification_summary').addClassName('current');=0A=
          }=0A=
        } else {=0A=
          =
notifications_summary.down('.notification_summary').addClassName('current=
');=0A=
        }=0A=
      }=0A=
    }=0A=
=0A=
    function hotkey_enter(event) {=0A=
      if (notifications_summary.visible() && =
notifications_summary.down('.current')) {=0A=
        summary_to_detail();=0A=
        event.stop();=0A=
      }=0A=
    }=0A=
=0A=
    function hotkey_backspace() {=0A=
      if (notifications_detail.visible()) {=0A=
        change_page_effect(notifications_detail, notifications_summary, =
true);=0A=
      }=0A=
    }=0A=
=0A=
    function init_notification_menu() {=0A=
      notifications_menu =3D new Element('div', {'id': =
'notifications_menu'});=0A=
      notifications_summary =3D new Element('div', {'id': =
'notifications_summary'});=0A=
      notifications_summary.update('<div class=3D"menu_title =
clearfix"><span class=3D"title">=E6=8F=90=E9=86=92</span><span =
class=3D"all"><a =
href=3D"http://my.iteye.com/notifications">=E6=9F=A5=E7=9C=8B=E6=89=80=E6=
=9C=89 =C2=BB</a></span></div>');=0A=
      notifications_menu.insert(notifications_summary);=0A=
=0A=
      notifications_detail =3D new Element('div', {'id': =
'notifications_detail'});=0A=
      var detail_menu_title =3D new Element('div', {'class' : =
'menu_title clearfix'});=0A=
      var return_button =3D new Element('span', {'class' : 'return =
left'}).update('=C2=AB =
=E8=BF=94=E5=9B=9E=E9=80=9A=E7=9F=A5=E5=88=97=E8=A1=A8');=0A=
      =
detail_menu_title.insert(return_button).insert(init_detail_paginate());=0A=
=0A=
      return_button.observe('click', function(ev) {=0A=
        change_page_effect(notifications_detail, notifications_summary, =
true);=0A=
      });=0A=
      notifications_detail.insert(detail_menu_title).hide();=0A=
      notifications_menu.insert(notifications_detail);=0A=
      $('user_nav').insert({after: notifications_menu});=0A=
=0A=
      $(document).observe('keydown', function(event) {=0A=
        if (notifications_menu.visible() && notifications.length > 0 && =
!change_page_effect_running){=0A=
          var keyCode =3D event.keyCode;=0A=
          if (keyCode =3D=3D Event.KEY_LEFT || keyCode =3D=3D 72 ) {=0A=
            hotkey_left();=0A=
            event.stop();=0A=
          } else if (keyCode =3D=3D Event.KEY_RIGHT || keyCode =3D=3D =
76) {=0A=
            hotkey_right();=0A=
            event.stop();=0A=
          } else if (keyCode =3D=3D Event.KEY_UP || keyCode =3D=3D 75) {=0A=
            hotkey_up();=0A=
            event.stop();=0A=
          } else if (keyCode =3D=3D Event.KEY_DOWN || keyCode =3D=3D 74) =
{=0A=
            hotkey_down();=0A=
            event.stop();=0A=
          } else if (keyCode =3D=3D Event.KEY_RETURN) {=0A=
            hotkey_enter(event);=0A=
          } else if (keyCode =3D=3D Event.KEY_BACKSPACE) {=0A=
            hotkey_backspace();=0A=
            event.stop();=0A=
          } else if (keyCode =3D=3D Event.KEY_ESC) {=0A=
            hide_notification_menu();=0A=
          }=0A=
        }=0A=
      });=0A=
=0A=
      $(document.body).observe('click', function(event) {=0A=
        if (notifications_menu.visible()) {=0A=
          var clicked =3D event.element();=0A=
          if (!(clicked =3D=3D=3D notifications_menu || =
clicked.up("#notifications_menu"))) {=0A=
            hide_notification_menu();=0A=
          }=0A=
        }=0A=
      });=0A=
=0A=
    }=0A=
=0A=
    function update_notifications_menu() {=0A=
      $$('#notifications_menu =
.notification_summary').each(Element.remove);=0A=
      $$('#notifications_menu =
.notification_detail').each(Element.remove);=0A=
=0A=
      if (notifications.length > 0) {=0A=
        notifications.each(function(notification) {=0A=
          if (notification) {=0A=
            if (Render['template_' + notification.type]) {=0A=
              Render['template_' + notification.type](notification);=0A=
            } else {=0A=
              Render['template_common'](notification);=0A=
            }=0A=
          };=0A=
        });=0A=
      } else {=0A=
        notifications_summary.insert('<div =
class=3D"notification_summary">=E5=BD=93=E5=89=8D=E6=B2=A1=E6=9C=89=E6=8F=
=90=E9=86=92=E4=BF=A1=E6=81=AF</div>');=0A=
      }=0A=
    }=0A=
=0A=
    function refresh_unread_count(count) {=0A=
      unread_count =3D count;=0A=
      notifications_count.update(unread_count);=0A=
      if (count > 0) {=0A=
        =
notifications_count.addClassName('new_notice').writeAttribute('title', =
'=E6=9C=89' + count + '=E6=9D=A1=E6=9C=AA=E8=AF=BB=E6=B6=88=E6=81=AF');=0A=
      } else {=0A=
        =
notifications_count.removeClassName('new_notice').writeAttribute('title',=
 '=E6=B2=A1=E6=9C=89=E6=9C=AA=E8=AF=BB=E6=B6=88=E6=81=AF');=0A=
      }=0A=
    }=0A=
=0A=
    function update_unread_count(pe) {=0A=
      new =
Ajax.JSONRequest('http://n.iteye.com/notifications/unread_count.json', {=0A=
        method: "get",=0A=
        onComplete: function(response) {=0A=
          var json_respone =3D response.responseJSON;=0A=
          refresh_unread_count(json_respone.unread_count);=0A=
        }=0A=
      });=0A=
    }=0A=
=0A=
    function update_notifications() {=0A=
      var loading =3D new Element('div', {id : =
'notifications_loading'}).update('=E8=BD=BD=E5=85=A5=E4=B8=AD...');=0A=
      notifications_menu.insert({top: loading});=0A=
      new Ajax.Request('/notifications.json', {=0A=
        method: "get",=0A=
        onComplete: function(response) {=0A=
          var json_respone =3D response.responseJSON;=0A=
          notifications =3D json_respone;=0A=
          update_notifications_menu();=0A=
          loading.remove();=0A=
          mark_as_read();=0A=
        }=0A=
      });=0A=
    }=0A=
=0A=
    function mark_as_read() {=0A=
      var unread_ids =3D notifications.map(function(notification){=0A=
        if (!notification.read) {=0A=
          return notification.id;=0A=
        }=0A=
      }).without(undefined);=0A=
      if (unread_ids.length > 0) {=0A=
        new Ajax.Request('/notifications/read.json?ids=3D' + =
unread_ids.join(','), {=0A=
          method: "put",=0A=
          onComplete: function(response) {=0A=
            notifications.each(function(notification){notification.read =
=3D true});=0A=
            refresh_unread_count(response.responseJSON.unread_count);=0A=
          }=0A=
        });=0A=
      }=0A=
    }=0A=
=0A=
    function show_notification_menu() {=0A=
      if (notifications_menu =3D=3D=3D null) {=0A=
        init_notification_menu();=0A=
      } else {=0A=
        notifications_summary.show();=0A=
      }=0A=
      if (unread_count > 0 || notifications =3D=3D=3D undefined) {=0A=
        update_notifications();=0A=
      }=0A=
      notifications_menu.show();=0A=
      notifications_count.addClassName('clicked');=0A=
    }=0A=
=0A=
    function hide_notification_menu() {=0A=
      notifications_summary.hide();=0A=
      notifications_detail.hide();=0A=
      notifications_menu.hide();=0A=
      notifications_count.removeClassName('clicked');=0A=
    }=0A=
=0A=
    function trigger_menu() {=0A=
      if (notifications_count.hasClassName('clicked')) {=0A=
        hide_notification_menu();=0A=
      } else {=0A=
        show_notification_menu();=0A=
      }=0A=
    }=0A=
=0A=
    if (notifications_count) {=0A=
      notifications_count.observe('click', function(event) {=0A=
        trigger_menu();=0A=
        event.stop();=0A=
      });=0A=
      $(document).observe('keydown', function(event){=0A=
        // alt + n=0A=
        if (event.keyCode =3D=3D 78 && event.altKey) {=0A=
          trigger_menu();=0A=
        }=0A=
      });=0A=
      update_unread_count();=0A=
      new PeriodicalExecuter(update_unread_count, 60);=0A=
    }=0A=
  })();=0A=
})=0A=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/javascripts/syntaxhighlighter/shCoreCommon.js?1325907333

/**
 * Modified by quake, add new clipboard swf to support none IE browser =
and generic language highlight
 * Code Syntax Highlighter.
 * Version 1.5.1
 * Copyright (C) 2004-2007 Alex Gorbatchev.
 * http://www.dreamprojections.com/syntaxhighlighter/
 *=20
 * This library is free software; you can redistribute it and/or modify =
it under the terms of the GNU Lesser General=20
 * Public License as published by the Free Software Foundation; either =
version 2.1 of the License, or (at your option)=20
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but =
WITHOUT ANY WARRANTY; without even the implied=20
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See =
the GNU Lesser General Public License for more=20
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public =
License along with this library; if not, write to=20
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330, =
Boston, MA 02111-1307 USA=20
 */

//
// create namespaces
//
var dp =3D {
    sh :
    {
        Toolbar : {},
        Utils	: {},
        RegexLib: {},
        Brushes	: {},
        Version : '1.5.1'
    }
};

// make an alias
dp.SyntaxHighlighter =3D dp.sh;

//
// Toolbar functions
//

dp.sh.Toolbar.CopyToClipboard =3D function(sender)
{
    var n =3D sender;

    while(n !=3D null && n.className.indexOf('dp-highlighter') =3D=3D =
-1)
        n =3D n.parentNode;

    var highlighter =3D n.highlighter;

    var code =3D =
highlighter.originalCode.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replac=
e(/&amp;/g,'&');
    window.clipboardData.setData('text', code);
    =
alert('=E4=BB=A3=E7=A0=81=E5=B7=B2=E8=A2=AB=E5=A4=8D=E5=88=B6=E5=88=B0=E5=
=89=AA=E8=B4=B4=E6=9D=BF');
}

// creates a <div /> with all toolbar links
dp.sh.Toolbar.Create =3D function(highlighter)
{
    var div =3D document.createElement('DIV');
    div.className =3D 'tools';
    div.innerHTML =3D =
highlighter.language.capitalize()+'=E4=BB=A3=E7=A0=81';
    if(window.clipboardData) {
        div.innerHTML +=3D ' <a href=3D"#" =
onclick=3D"dp.sh.Toolbar.CopyToClipboard(this);return false;" =
title=3D"=E5=A4=8D=E5=88=B6=E4=BB=A3=E7=A0=81"><img =
src=3D"/images/icon_copy.gif" =
alt=3D"=E5=A4=8D=E5=88=B6=E4=BB=A3=E7=A0=81"/></a>';
    }else{
        var code =3D =
highlighter.originalCode.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replac=
e(/&amp;/g,'&');
        div.innerHTML +=3D ' <embed wmode=3D"transparent" =
src=3D"/javascripts/syntaxhighlighter/clipboard_new.swf" width=3D"14" =
height=3D"15" flashvars=3D"clipboard=3D'+encodeURIComponent(code)+'" =
quality=3D"high" allowScriptAccess=3D"always" =
type=3D"application/x-shockwave-flash" =
pluginspage=3D"http://www.macromedia.com/go/getflashplayer"/>';
    }
    return div;
}

//
// Common reusable regular expressions
//
dp.sh.RegexLib =3D {
    MultiLineCComments : new RegExp('/\\*[\\s\\S]*?\\*/', 'gm'),
    SingleLineCComments : new RegExp('//.*$', 'gm'),
    SingleLinePerlComments : new RegExp('#.*$', 'gm'),
    DoubleQuotedString : new =
RegExp('"(?:\\.|(\\\\\\")|[^\\""\\n])*"','g'),
    SingleQuotedString : new RegExp("'(?:\\.|(\\\\\\')|[^\\''\\n])*'", =
'g')
};

//
// Match object
//
dp.sh.Match =3D function(value, index, css)
{
    this.value =3D value;
    this.index =3D index;
    this.length =3D value.length;
    this.css =3D css;
}

//
// Highlighter object
//
dp.sh.Highlighter =3D function()
{
    this.noGutter =3D false;
    this.addControls =3D true;
    this.collapse =3D false;
    this.tabsToSpaces =3D true;
    this.wrapColumn =3D 80;
    this.showColumns =3D true;
}

// static callback for the match sorting
dp.sh.Highlighter.SortCallback =3D function(m1, m2)
{
    // sort matches by index first
    if(m1.index < m2.index)
        return -1;
    else if(m1.index > m2.index)
        return 1;
    else
    {
        // if index is the same, sort by length
        if(m1.length < m2.length)
            return -1;
        else if(m1.length > m2.length)
            return 1;
    }
    return 0;
}

dp.sh.Highlighter.prototype.CreateElement =3D function(name)
{
    var result =3D document.createElement(name);
    result.highlighter =3D this;
    return result;
}

// gets a list of all matches for a given regular expression
dp.sh.Highlighter.prototype.GetMatches =3D function(regex, css)
{
    var index =3D 0;
    var match =3D null;

    while((match =3D regex.exec(this.code)) !=3D null)
        this.matches[this.matches.length] =3D new dp.sh.Match(match[0], =
match.index, css);
}

dp.sh.Highlighter.prototype.AddBit =3D function(str, css)
{
    if(str =3D=3D null || str.length =3D=3D 0)
        return;

    var span =3D this.CreateElement('SPAN');
=09
    //	str =3D str.replace(/&/g, '&amp;');
    str =3D str.replace(/ /g, '&nbsp;');
    str =3D str.replace(/</g, '&lt;');
    //	str =3D str.replace(/&lt;/g, '<');
    //	str =3D str.replace(/>/g, '&gt;');
    str =3D str.replace(/\n/gm, '&nbsp;<br>');

    // when adding a piece of code, check to see if it has line breaks =
in it
    // and if it does, wrap individual line breaks with span tags
    if(css !=3D null)
    {
        if((/br/gi).test(str))
        {
            var lines =3D str.split('&nbsp;<br>');
		=09
            for(var i =3D 0; i < lines.length; i++)
            {
                span =3D this.CreateElement('SPAN');
                span.className =3D css;
                span.innerHTML =3D lines[i];
			=09
                this.div.appendChild(span);
			=09
                // don't add a <BR> for the last line
                if(i + 1 < lines.length)
                    this.div.appendChild(this.CreateElement('BR'));
            }
        }
        else
        {
            span.className =3D css;
            span.innerHTML =3D str;
            this.div.appendChild(span);
        }
    }
    else
    {
        span.innerHTML =3D str;
        this.div.appendChild(span);
    }
}

// checks if one match is inside any other match
dp.sh.Highlighter.prototype.IsInside =3D function(match)
{
    if(match =3D=3D null || match.length =3D=3D 0)
        return false;
=09
    for(var i =3D 0; i < this.matches.length; i++)
    {
        var c =3D this.matches[i];
	=09
        if(c =3D=3D null)
            continue;

        if((match.index > c.index) && (match.index < c.index + =
c.length))
            return true;
    }
=09
    return false;
}

dp.sh.Highlighter.prototype.ProcessRegexList =3D function()
{
    for(var i =3D 0; i < this.regexList.length; i++)
        this.GetMatches(this.regexList[i].regex, this.regexList[i].css);
}

dp.sh.Highlighter.prototype.ProcessSmartTabs =3D function(code)
{
    var lines	=3D code.split('\n');
    var result	=3D '';
    var tabSize	=3D 4;
    var tab		=3D '\t';

    // This function inserts specified amount of spaces in the string
    // where a tab is while removing that given tab.
    function InsertSpaces(line, pos, count)
    {
        var left	=3D line.substr(0, pos);
        var right	=3D line.substr(pos + 1, line.length);	// pos + 1 will =
get rid of the tab
        var spaces	=3D '';
	=09
        for(var i =3D 0; i < count; i++)
            spaces +=3D ' ';
	=09
        return left + spaces + right;
    }

    // This function process one line for 'smart tabs'
    function ProcessLine(line, tabSize)
    {
        if(line.indexOf(tab) =3D=3D -1)
            return line;

        var pos =3D 0;

        while((pos =3D line.indexOf(tab)) !=3D -1)
        {
            // This is pretty much all there is to the 'smart tabs' =
logic.
            // Based on the position within the line and size of a tab,
            // calculate the amount of spaces we need to insert.
            var spaces =3D tabSize - pos % tabSize;
		=09
            line =3D InsertSpaces(line, pos, spaces);
        }
	=09
        return line;
    }

    // Go through all the lines and do the 'smart tabs' magic.
    for(var i =3D 0; i < lines.length; i++)
        result +=3D ProcessLine(lines[i], tabSize) + '\n';
=09
    return result;
}

dp.sh.Highlighter.prototype.SwitchToList =3D function()
{
    // thanks to Lachlan Donald from SitePoint.com for this <br/> tag =
fix.
    var html =3D this.div.innerHTML.replace(/<(br)\/?>/gi, '\n');
    var lines =3D html.split('\n');
=09
    if(this.addControls =3D=3D true)
        this.bar.appendChild(dp.sh.Toolbar.Create(this));

    // add columns ruler
    if(this.showColumns)
    {
        var div =3D this.CreateElement('div');
        var columns =3D this.CreateElement('div');
        var showEvery =3D 10;
        var i =3D 1;
	=09
        while(i <=3D 150)
        {
            if(i % showEvery =3D=3D 0)
            {
                div.innerHTML +=3D i;
                i +=3D (i + '').length;
            }
            else
            {
                div.innerHTML +=3D '&middot;';
                i++;
            }
        }
	=09
        columns.className =3D 'columns';
        columns.appendChild(div);
        this.bar.appendChild(columns);
    }

    for(var i =3D 0, lineIndex =3D this.firstLine; i < lines.length - 1; =
i++, lineIndex++)
    {
        var li =3D this.CreateElement('LI');
        var span =3D this.CreateElement('SPAN');
        span.innerHTML =3D lines[i] + '&nbsp;';
        li.appendChild(span);
        this.ol.appendChild(li);
    }
=09
    this.div.innerHTML	=3D '';
}

dp.sh.Highlighter.prototype.Highlight =3D function(code)
{
    function Trim(str)
    {
        return str.replace(/^\s*(.*?)[\s\n]*$/g, '$1');
    }
=09
    function Chop(str)
    {
        return str.replace(/\n*$/, '').replace(/^\n*/, '');
    }

    function Unindent(str)
    {
        var lines =3D str.split('\n');
        var indents =3D new Array();
        var regex =3D new RegExp('^\\s*', 'g');
        var min =3D 1000;

        // go through every line and check for common number of indents
        for(var i =3D 0; i < lines.length && min > 0; i++)
        {
            if(Trim(lines[i]).length =3D=3D 0)
                continue;
			=09
            var matches =3D regex.exec(lines[i]);

            if(matches !=3D null && matches.length > 0)
                min =3D Math.min(matches[0].length, min);
        }

        // trim minimum common number of white space from the begining =
of every line
        if(min > 0)
            for(var i =3D 0; i < lines.length; i++)
                lines[i] =3D lines[i].substr(min);

        return lines.join('\n');
    }
=09
    // This function returns a portions of the string from pos1 to pos2 =
inclusive
    function Copy(string, pos1, pos2)
    {
        return string.substr(pos1, pos2 - pos1);
    }

    var pos	=3D 0;
=09
    if(code =3D=3D null)
        code =3D '';
=09
    this.originalCode =3D code;
    this.code =3D Chop(Unindent(code));
    this.div =3D this.CreateElement('DIV');
    this.bar =3D this.CreateElement('DIV');
    this.ol =3D this.CreateElement('OL');
    this.matches =3D new Array();

    this.div.className =3D 'dp-highlighter';
    this.div.highlighter =3D this;
=09
    this.bar.className =3D 'bar';
=09
    // set the first line
    this.ol.start =3D this.firstLine;

    if(this.CssClass !=3D null)
        this.ol.className =3D this.CssClass;

    if(this.collapse)
        this.div.className +=3D ' collapsed';
=09
    if(this.noGutter)
        this.div.className +=3D ' nogutter';

    // replace tabs with spaces
    if(this.tabsToSpaces =3D=3D true)
        this.code =3D this.ProcessSmartTabs(this.code);

    this.ProcessRegexList();

    // if no matches found, add entire code as plain text
    if(this.matches.length =3D=3D 0)
    {
        this.AddBit(this.code, null);
        this.SwitchToList();
        this.div.appendChild(this.bar);
        this.div.appendChild(this.ol);
        return;
    }

    // sort the matches
    this.matches =3D this.matches.sort(dp.sh.Highlighter.SortCallback);

    // The following loop checks to see if any of the matches are inside
    // of other matches. This process would get rid of highligted =
strings
    // inside comments, keywords inside strings and so on.
    for(var i =3D 0; i < this.matches.length; i++)
        if(this.IsInside(this.matches[i]))
            this.matches[i] =3D null;

    // Finally, go through the final list of matches and pull the all
    // together adding everything in between that isn't a match.
    for(var i =3D 0; i < this.matches.length; i++)
    {
        var match =3D this.matches[i];

        if(match =3D=3D null || match.length =3D=3D 0)
            continue;

        this.AddBit(Copy(this.code, pos, match.index), null);
        this.AddBit(match.value, match.css);

        pos =3D match.index + match.length;
    }
=09
    this.AddBit(this.code.substr(pos), null);

    this.SwitchToList();
    this.div.appendChild(this.bar);
    this.div.appendChild(this.ol);
}

dp.sh.Highlighter.prototype.GetKeywords =3D function(str)=20
{
    return '\\b' + str.replace(/ /g, '\\b|\\b') + '\\b';
}

// highlightes all elements identified by name and gets source code from =
specified property
dp.sh.HighlightAll =3D function(name, showGutter /* optional */, =
showControls /* optional */, collapseAll /* optional */, firstLine /* =
optional */, showColumns /* optional */)
{
    function FindValue()
    {
        var a =3D arguments;
	=09
        for(var i =3D 0; i < a.length; i++)
        {
            if(a[i] =3D=3D null)
                continue;
			=09
            if(typeof(a[i]) =3D=3D 'string' && a[i] !=3D '')
                return a[i] + '';
	=09
            if(typeof(a[i]) =3D=3D 'object' && a[i].value !=3D '')
                return a[i].value + '';
        }
	=09
        return null;
    }
=09
    function IsOptionSet(value, list)
    {
        for(var i =3D 0; i < list.length; i++)
            if(list[i] =3D=3D value)
                return true;
	=09
        return false;
    }
=09
    function GetOptionValue(name, list, defaultValue)
    {
        var regex =3D new RegExp('^' + name + '\\[(\\w+)\\]$', 'gi');
        var matches =3D null;

        for(var i =3D 0; i < list.length; i++)
            if((matches =3D regex.exec(list[i])) !=3D null)
                return matches[1];
	=09
        return defaultValue;
    }
=09
    function FindTagsByName(list, name, tagName)
    {
        var tags =3D document.getElementsByTagName(tagName);

        for(var i =3D 0; i < tags.length; i++)
            if(tags[i].getAttribute('name') =3D=3D name)
                list.push(tags[i]);
    }

    var elements =3D [];
    var highlighter =3D null;
    var registered =3D {};
    var propertyName =3D 'innerHTML';

    // for some reason IE doesn't find <pre/> by name, however it does =
see them just fine by tag name...
    FindTagsByName(elements, name, 'pre');
    FindTagsByName(elements, name, 'textarea');

    if(elements.length =3D=3D 0)
        return;

    // register all brushes
    for(var brush in dp.sh.Brushes)
    {
        var aliases =3D dp.sh.Brushes[brush].Aliases;

        if(aliases =3D=3D null)
            continue;
	=09
        for(var i =3D 0; i < aliases.length; i++)
            registered[aliases[i]] =3D brush;
    }

    for(var i =3D 0; i < elements.length; i++)
    {
        var element =3D elements[i];
        var options =3D FindValue(
            element.attributes['class'], element.className,
            element.attributes['language'], element.language
            );
        var language =3D '';
	=09
        if(options =3D=3D null)
            continue;
	=09
        options =3D options.split(':');
	=09
        language =3D options[0].toLowerCase();

        if(registered[language] =3D=3D null)
            registered[language] =3D registered['default'];
	=09
        // instantiate a brush
        highlighter =3D new dp.sh.Brushes[registered[language]]();
        highlighter.language =3D language;
	=09
        // hide the original element
        element.style.display =3D 'none';

        highlighter.noGutter =3D (showGutter =3D=3D null) ? =
IsOptionSet('nogutter', options) : !showGutter;
        highlighter.addControls =3D (showControls =3D=3D null) ? =
!IsOptionSet('nocontrols', options) : showControls;
        highlighter.collapse =3D (collapseAll =3D=3D null) ? =
IsOptionSet('collapse', options) : collapseAll;
        highlighter.showColumns =3D (showColumns =3D=3D null) ? =
IsOptionSet('showcolumns', options) : showColumns;

        // write out custom brush style
        var headNode =3D document.getElementsByTagName('head')[0];
        if(highlighter.Style && headNode)
        {
            var styleNode =3D document.createElement('style');
            styleNode.setAttribute('type', 'text/css');

            if(styleNode.styleSheet) // for IE
            {
                styleNode.styleSheet.cssText =3D highlighter.Style;
            }
            else // for everyone else
            {
                var textNode =3D =
document.createTextNode(highlighter.Style);
                styleNode.appendChild(textNode);
            }

            headNode.appendChild(styleNode);
        }
	=09
        // first line idea comes from Andrew Collington, thanks!
        highlighter.firstLine =3D (firstLine =3D=3D null) ? =
parseInt(GetOptionValue('firstline', options, 1)) : firstLine;

        highlighter.Highlight(element[propertyName]);
	=09
        highlighter.source =3D element;

        element.parentNode.insertBefore(highlighter.div, element);
    }
}
dp.sh.Brushes.JScript =3D function()
{
	var keywords =3D	'abstract boolean break byte case catch char class =
const continue debugger ' +
					'default delete do double else enum export extends false final =
finally float ' +
					'for function goto if implements import in instanceof int interface =
long native ' +
					'new null package private protected public return short static =
super switch ' +
					'synchronized this throw throws transient true try typeof var void =
volatile while with';

	this.regexList =3D [
		{ regex: dp.sh.RegexLib.SingleLineCComments,				css: 'comment' },			// =
one line comments
		{ regex: dp.sh.RegexLib.MultiLineCComments,					css: 'comment' },			// =
multiline comments
		{ regex: dp.sh.RegexLib.DoubleQuotedString,					css: 'string' },			// =
double quoted strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,					css: 'string' },			// =
single quoted strings
		{ regex: new RegExp('^\\s*#.*', 'gm'),						css: 'preprocessor' },		// =
preprocessor tags like #region and #endregion
		{ regex: new RegExp(this.GetKeywords(keywords), 'gm'),		css: 'keyword' =
}			// keywords
		];

	this.CssClass =3D 'dp-c';
}

dp.sh.Brushes.JScript.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.JScript.Aliases	=3D ['js', 'jscript', 'javascript'];
dp.sh.Brushes.Java =3D function()
{
	var keywords =3D	'abstract assert boolean break byte case catch char =
class const ' +
			'continue default do double else enum extends ' +
			'false final finally float for goto if implements import ' +
			'instanceof int interface long native new null ' +
			'package private protected public return ' +
			'short static strictfp super switch synchronized this throw throws =
true ' +
			'transient try void volatile while';

	this.regexList =3D [
		{ regex: dp.sh.RegexLib.SingleLineCComments,							css: 'comment' },		=
// one line comments
		{ regex: dp.sh.RegexLib.MultiLineCComments,								css: 'comment' },		=
// multiline comments
		{ regex: dp.sh.RegexLib.DoubleQuotedString,								css: 'string' },		=
// strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,								css: 'string' },		=
// strings
		{ regex: new RegExp('\\b([\\d]+(\\.[\\d]+)?|0x[a-f0-9]+)\\b', 'gi'),	=
css: 'number' },		// numbers
		{ regex: new RegExp('(?!\\@interface\\b)\\@[\\$\\w]+\\b', 'g'),			css: =
'annotation' },	// annotation @anno
		{ regex: new RegExp('\\@interface\\b', 'g'),							css: 'keyword' },		=
// @interface keyword
		{ regex: new RegExp(this.GetKeywords(keywords), 'gm'),					css: =
'keyword' }		// java keyword
		];

	this.CssClass =3D 'dp-j';
	this.Style =3D	'.dp-j .annotation { color: #646464; }' +
					'.dp-j .number { color: #C00000; }';
}

dp.sh.Brushes.Java.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.Java.Aliases	=3D ['java'];
/* Ruby 1.8.4 syntax contributed by Erik Peterson */
dp.sh.Brushes.Ruby =3D function()
{
  var keywords =3D	'alias and BEGIN begin break case class def =
define_method defined do each else elsif ' +
					'END end ensure false for if in module new next nil not or raise =
redo rescue retry return ' +
					'self super then throw true undef unless until when while yield';

  var builtins =3D	'Array Bignum Binding Class Continuation Dir =
Exception FalseClass File::Stat File Fixnum Fload ' +
					'Hash Integer IO MatchData Method Module NilClass Numeric Object =
Proc Range Regexp String Struct::TMS Symbol ' +
					'ThreadGroup Thread Time TrueClass'

	this.regexList =3D [
		{ regex: dp.sh.RegexLib.SingleLinePerlComments,			css: 'comment' },	// =
one line comments
		{ regex: dp.sh.RegexLib.DoubleQuotedString,				css: 'string' },	// =
double quoted strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,				css: 'string' },	// =
single quoted strings
		{ regex: new RegExp(':[a-z][A-Za-z0-9_]*', 'g'),		css: 'symbol' },	// =
symbols
		{ regex: new RegExp('(\\$|@@|@)\\w+', 'g'),				css: 'variable' },	// =
$global, @instance, and @@class variables
		{ regex: new RegExp(this.GetKeywords(keywords), 'gm'),	css: 'keyword' =
},	// keywords
		{ regex: new RegExp(this.GetKeywords(builtins), 'gm'),	css: 'builtin' =
}	// builtins
		];

	this.CssClass =3D 'dp-rb';
	this.Style =3D	'.dp-rb .symbol { color: #a70; }' +
					'.dp-rb .variable { color: #a70; font-weight: bold; }';
}

dp.sh.Brushes.Ruby.prototype =3D new dp.sh.Highlighter();
dp.sh.Brushes.Ruby.Aliases =3D ['ruby', 'rails', 'ror'];
dp.sh.Brushes.Xml =3D function()
{
	this.CssClass =3D 'dp-xml';
	this.Style =3D	'.dp-xml .cdata { color: #ff1493; }' +
					'.dp-xml .tag, .dp-xml .tag-name { color: #069; font-weight: bold; =
}' +
					'.dp-xml .attribute { color: red; }' +
					'.dp-xml .attribute-value { color: blue; }';
}

dp.sh.Brushes.Xml.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.Xml.Aliases	=3D ['xml', 'xhtml', 'xslt', 'html', 'xhtml'];

dp.sh.Brushes.Xml.prototype.ProcessRegexList =3D function()
{
	function push(array, value)
	{
		array[array.length] =3D value;
	}
=09
	/* If only there was a way to get index of a group within a match, the =
whole XML
	   could be matched with the expression looking something like that:
=09
	   (<!\[CDATA\[\s*.*\s*\]\]>)
	   | (<!--\s*.*\s*?-->)
	   | (<)*(\w+)*\s*(\w+)\s*=3D\s*(".*?"|'.*?'|\w+)(/*>)*
	   | (</?)(.*?)(/?>)
	*/
	var index	=3D 0;
	var match	=3D null;
	var regex	=3D null;

	// Match CDATA in the following format <![ ... [ ... ]]>
	// (\&lt;|<)\!\[[\w\s]*?\[(.|\s)*?\]\](\&gt;|>)
	this.GetMatches(new =
RegExp('(\&lt;|<)\\!\\[[\\w\\s]*?\\[(.|\\s)*?\\]\\](\&gt;|>)', 'gm'), =
'cdata');
=09
	// Match comments
	// (\&lt;|<)!--\s*.*?\s*--(\&gt;|>)
	this.GetMatches(new RegExp('(\&lt;|<)!--\\s*.*?\\s*--(\&gt;|>)', 'gm'), =
'comments');

	// Match attributes and their values
	// (:|\w+)\s*=3D\s*(".*?"|\'.*?\'|\w+)*
	regex =3D new =
RegExp('([:\\w-\.]+)\\s*=3D\\s*(".*?"|\'.*?\'|\\w+)*|(\\w+)', 'gm'); // =
Thanks to Tomi Blinnikka of Yahoo! for fixing namespaces in attributes
	while((match =3D regex.exec(this.code)) !=3D null)
	{
		if(match[1] =3D=3D null)
		{
			continue;
		}
		=09
		push(this.matches, new dp.sh.Match(match[1], match.index, =
'attribute'));
=09
		// if xml is invalid and attribute has no property value, ignore it=09
		if(match[2] !=3D undefined)
		{
			push(this.matches, new dp.sh.Match(match[2], match.index + =
match[0].indexOf(match[2]), 'attribute-value'));
		}
	}

	// Match opening and closing tag brackets
	// (\&lt;|<)/*\?*(?!\!)|/*\?*(\&gt;|>)
	this.GetMatches(new RegExp('(\&lt;|<)/*\\?*(?!\\!)|/*\\?*(\&gt;|>)', =
'gm'), 'tag');

	// Match tag names
	// (\&lt;|<)/*\?*\s*(\w+)
	regex =3D new RegExp('(?:\&lt;|<)/*\\?*\\s*([:\\w-\.]+)', 'gm');
	while((match =3D regex.exec(this.code)) !=3D null)
	{
		push(this.matches, new dp.sh.Match(match[1], match.index + =
match[0].indexOf(match[1]), 'tag-name'));
	}
}
dp.sh.Brushes.CSharp =3D function()
{
	var keywords =3D	'abstract as base bool break byte case catch char =
checked class const ' +
					'continue decimal default delegate do double else enum event =
explicit ' +
					'extern false finally fixed float for foreach get goto if implicit =
in int ' +
					'interface internal is lock long namespace new null object operator =
out ' +
					'override params private protected public readonly ref return sbyte =
sealed set ' +
					'short sizeof stackalloc static string struct switch this throw =
true try ' +
					'typeof uint ulong unchecked unsafe ushort using virtual void =
while';

	this.regexList =3D [
		// There's a slight problem with matching single line comments and =
figuring out
		// a difference between // and ///. Using lookahead and lookbehind =
solves the
		// problem, unfortunately JavaScript doesn't support lookbehind. So =
I'm at a=20
		// loss how to translate that regular expression to JavaScript =
compatible one.
//		{ regex: new =
RegExp('(?<!/)//(?!/).*$|(?<!/)////(?!/).*$|/\\*[^\\*]*(.)*?\\*/', =
'gm'),	css: 'comment' },			// one line comments starting with anything =
BUT '///' and multiline comments
//		{ regex: new RegExp('(?<!/)///(?!/).*$', 'gm'),											css: =
'comments' },		// XML comments starting with ///

		{ regex: dp.sh.RegexLib.SingleLineCComments,				css: 'comment' },			// =
one line comments
		{ regex: dp.sh.RegexLib.MultiLineCComments,					css: 'comment' },			// =
multiline comments
		{ regex: dp.sh.RegexLib.DoubleQuotedString,					css: 'string' },			// =
strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,					css: 'string' },			// =
strings
		{ regex: new RegExp('^\\s*#.*', 'gm'),						css: 'preprocessor' },		// =
preprocessor tags like #region and #endregion
		{ regex: new RegExp(this.GetKeywords(keywords), 'gm'),		css: 'keyword' =
}			// c# keyword
		];

	this.CssClass =3D 'dp-c';
	this.Style =3D '.dp-c .vars { color: #d00; }';
}

dp.sh.Brushes.CSharp.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.CSharp.Aliases	=3D ['c#', 'c-sharp', 'csharp'];
/**
 * Code Syntax Highlighter for C++(Windows Platform).
 * Version 0.0.2
 * Copyright (C) 2006 Shin, YoungJin.
 * http://www.jiniya.net/lecture/techbox/test.html
 *=20
 * This library is free software; you can redistribute it and/or modify =
it under the terms of the GNU Lesser General=20
 * Public License as published by the Free Software Foundation; either =
version 2.1 of the License, or (at your option)=20
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but =
WITHOUT ANY WARRANTY; without even the implied=20
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See =
the GNU Lesser General Public License for more=20
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public =
License along with this library; if not, write to=20
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330, =
Boston, MA 02111-1307 USA=20
 */

dp.sh.Brushes.Cpp =3D function()
{
	var datatypes =3D=20
	'ATOM BOOL BOOLEAN BYTE CHAR COLORREF DWORD DWORDLONG DWORD_PTR ' +
	'DWORD32 DWORD64 FLOAT HACCEL HALF_PTR HANDLE HBITMAP HBRUSH ' +=20
	'HCOLORSPACE HCONV HCONVLIST HCURSOR HDC HDDEDATA HDESK HDROP HDWP ' +
	'HENHMETAFILE HFILE HFONT HGDIOBJ HGLOBAL HHOOK HICON HINSTANCE HKEY ' =
+
	'HKL HLOCAL HMENU HMETAFILE HMODULE HMONITOR HPALETTE HPEN HRESULT ' +
	'HRGN HRSRC HSZ HWINSTA HWND INT INT_PTR INT32 INT64 LANGID LCID LCTYPE =
' +
	'LGRPID LONG LONGLONG LONG_PTR LONG32 LONG64 LPARAM LPBOOL LPBYTE =
LPCOLORREF ' +
	'LPCSTR LPCTSTR LPCVOID LPCWSTR LPDWORD LPHANDLE LPINT LPLONG LPSTR =
LPTSTR ' +
	'LPVOID LPWORD LPWSTR LRESULT PBOOL PBOOLEAN PBYTE PCHAR PCSTR PCTSTR =
PCWSTR ' +
	'PDWORDLONG PDWORD_PTR PDWORD32 PDWORD64 PFLOAT PHALF_PTR PHANDLE PHKEY =
PINT ' +
	'PINT_PTR PINT32 PINT64 PLCID PLONG PLONGLONG PLONG_PTR PLONG32 PLONG64 =
POINTER_32 ' +
	'POINTER_64 PSHORT PSIZE_T PSSIZE_T PSTR PTBYTE PTCHAR PTSTR PUCHAR =
PUHALF_PTR ' +
	'PUINT PUINT_PTR PUINT32 PUINT64 PULONG PULONGLONG PULONG_PTR PULONG32 =
PULONG64 ' +
	'PUSHORT PVOID PWCHAR PWORD PWSTR SC_HANDLE SC_LOCK =
SERVICE_STATUS_HANDLE SHORT ' +=20
	'SIZE_T SSIZE_T TBYTE TCHAR UCHAR UHALF_PTR UINT UINT_PTR UINT32 UINT64 =
ULONG ' +
	'ULONGLONG ULONG_PTR ULONG32 ULONG64 USHORT USN VOID WCHAR WORD WPARAM =
WPARAM WPARAM ' +
	'char bool short int __int32 __int64 __int8 __int16 long float double =
__wchar_t ' +
	'clock_t _complex _dev_t _diskfree_t div_t ldiv_t _exception =
_EXCEPTION_POINTERS ' +
	'FILE _finddata_t _finddatai64_t _wfinddata_t _wfinddatai64_t =
__finddata64_t ' +
	'__wfinddata64_t _FPIEEE_RECORD fpos_t _HEAPINFO _HFILE lconv intptr_t =
' +
	'jmp_buf mbstate_t _off_t _onexit_t _PNH ptrdiff_t _purecall_handler ' =
+
	'sig_atomic_t size_t _stat __stat64 _stati64 terminate_function ' +
	'time_t __time64_t _timeb __timeb64 tm uintptr_t _utimbuf ' +
	'va_list wchar_t wctrans_t wctype_t wint_t signed';

	var keywords =3D=20
	'break case catch class const __finally __exception __try ' +
	'const_cast continue private public protected __declspec ' +=20
	'default delete deprecated dllexport dllimport do dynamic_cast ' +=20
	'else enum explicit extern if for friend goto inline ' +=20
	'mutable naked namespace new noinline noreturn nothrow ' +=20
	'register reinterpret_cast return selectany ' +=20
	'sizeof static static_cast struct switch template this ' +=20
	'thread throw true false try typedef typeid typename union ' +=20
	'using uuid virtual void volatile whcar_t while';

	this.regexList =3D [
		{ regex: dp.sh.RegexLib.SingleLineCComments,				css: 'comment' },			// =
one line comments
		{ regex: dp.sh.RegexLib.MultiLineCComments,					css: 'comment' },			// =
multiline comments
		{ regex: dp.sh.RegexLib.DoubleQuotedString,					css: 'string' },			// =
strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,					css: 'string' },			// =
strings
		{ regex: new RegExp('^ *#.*', 'gm'),						css: 'preprocessor' },
		{ regex: new RegExp(this.GetKeywords(datatypes), 'gm'),		css: =
'datatypes' },
		{ regex: new RegExp(this.GetKeywords(keywords), 'gm'),		css: 'keyword' =
}
		];

	this.CssClass =3D 'dp-cpp';
	this.Style =3D	'.dp-cpp .datatypes { color: #2E8B57; font-weight: bold; =
}';
}

dp.sh.Brushes.Cpp.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.Cpp.Aliases	=3D ['cpp', 'c', 'c++'];
/* Python 2.3 syntax contributed by Gheorghe Milas */
dp.sh.Brushes.Python =3D function()
{
    var keywords =3D  'and assert break class continue def del elif else =
' +
                    'except exec finally for from global if import in is =
' +
                    'lambda not or pass print raise return try yield =
while';

    var special =3D  'None True False self cls class_'

    this.regexList =3D [
        { regex: dp.sh.RegexLib.SingleLinePerlComments, css: 'comment' =
},
        { regex: new RegExp("^\\s*@\\w+", 'gm'), css: 'decorator' },
        { regex: new RegExp("(['\"]{3})([^\\1])*?\\1", 'gm'), css: =
'comment' },
        { regex: new RegExp('"(?!")(?:\\.|\\\\\\"|[^\\""\\n\\r])*"', =
'gm'), css: 'string' },
        { regex: new RegExp("'(?!')*(?:\\.|(\\\\\\')|[^\\''\\n\\r])*'", =
'gm'), css: 'string' },
        { regex: new RegExp("\\b\\d+\\.?\\w*", 'g'), css: 'number' },
        { regex: new RegExp(this.GetKeywords(keywords), 'gm'), css: =
'keyword' },
        { regex: new RegExp(this.GetKeywords(special), 'gm'), css: =
'special' }
        ];

    this.CssClass =3D 'dp-py';
	this.Style =3D	'.dp-py .builtins { color: #ff1493; }' +
					'.dp-py .magicmethods { color: #808080; }' +
					'.dp-py .exceptions { color: brown; }' +
					'.dp-py .types { color: brown; font-style: italic; }' +
					'.dp-py .commonlibs { color: #8A2BE2; font-style: italic; }';
}

dp.sh.Brushes.Python.prototype  =3D new dp.sh.Highlighter();
dp.sh.Brushes.Python.Aliases    =3D ['py', 'python'];
dp.sh.Brushes.Sql =3D function()
{
	var funcs	=3D	'abs avg case cast coalesce convert count =
current_timestamp ' +
					'current_user day isnull left lower month nullif replace right ' +
					'session_user space substring sum system_user upper user year';

	var keywords =3D	'absolute action add after alter as asc at =
authorization begin bigint ' +
					'binary bit by cascade char character check checkpoint close =
collate ' +
					'column commit committed connect connection constraint contains =
continue ' +
					'create cube current current_date current_time cursor database date =
' +
					'deallocate dec decimal declare default delete desc distinct double =
drop ' +
					'dynamic else end end-exec escape except exec execute false fetch =
first ' +
					'float for force foreign forward free from full function global =
goto grant ' +
					'group grouping having hour ignore index inner insensitive insert =
instead ' +
					'int integer intersect into is isolation key last level load local =
max min ' +
					'minute modify move name national nchar next no numeric of off on =
only ' +
					'open option order out output partial password precision prepare =
primary ' +
					'prior privileges procedure public read real references relative =
repeatable ' +
					'restrict return returns revoke rollback rollup rows rule schema =
scroll ' +
					'second section select sequence serializable set size smallint =
static ' +
					'statistics table temp temporary then time timestamp to top =
transaction ' +
					'translation trigger true truncate uncommitted union unique update =
values ' +
					'varchar varying view when where with work';

	var operators =3D	'all and any between cross in join like not null or =
outer some';

	this.regexList =3D [
		{ regex: new RegExp('--(.*)$', 'gm'),						css: 'comment' },			// one =
line and multiline comments
		{ regex: dp.sh.RegexLib.DoubleQuotedString,					css: 'string' },			// =
double quoted strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,					css: 'string' },			// =
single quoted strings
		{ regex: new RegExp(this.GetKeywords(funcs), 'gmi'),		css: 'func' },			=
	// functions
		{ regex: new RegExp(this.GetKeywords(operators), 'gmi'),	css: 'op' },		=
		// operators and such
		{ regex: new RegExp(this.GetKeywords(keywords), 'gmi'),		css: =
'keyword' }			// keyword
		];

	this.CssClass =3D 'dp-sql';
	this.Style =3D	'.dp-sql .func { color: #ff1493; }' +
					'.dp-sql .op { color: #808080; }';
}

dp.sh.Brushes.Sql.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.Sql.Aliases	=3D ['sql'];
dp.sh.Brushes.Php =3D function()
{
	var funcs	=3D	'abs acos acosh addcslashes addslashes ' +
					'array_change_key_case array_chunk array_combine array_count_values =
array_diff '+
					'array_diff_assoc array_diff_key array_diff_uassoc array_diff_ukey =
array_fill '+
					'array_filter array_flip array_intersect array_intersect_assoc =
array_intersect_key '+
					'array_intersect_uassoc array_intersect_ukey array_key_exists =
array_keys array_map '+
					'array_merge array_merge_recursive array_multisort array_pad =
array_pop array_product '+
					'array_push array_rand array_reduce array_reverse array_search =
array_shift '+
					'array_slice array_splice array_sum array_udiff array_udiff_assoc =
'+
					'array_udiff_uassoc array_uintersect array_uintersect_assoc '+
					'array_uintersect_uassoc array_unique array_unshift array_values =
array_walk '+
					'array_walk_recursive atan atan2 atanh base64_decode base64_encode =
base_convert '+
					'basename bcadd bccomp bcdiv bcmod bcmul bindec bindtextdomain =
bzclose bzcompress '+
					'bzdecompress bzerrno bzerror bzerrstr bzflush bzopen bzread =
bzwrite ceil chdir '+
					'checkdate checkdnsrr chgrp chmod chop chown chr chroot chunk_split =
class_exists '+
					'closedir closelog copy cos cosh count count_chars date decbin =
dechex decoct '+
					'deg2rad delete ebcdic2ascii echo empty end ereg ereg_replace eregi =
eregi_replace error_log '+
					'error_reporting escapeshellarg escapeshellcmd eval exec exit exp =
explode extension_loaded '+
					'feof fflush fgetc fgetcsv fgets fgetss file_exists =
file_get_contents file_put_contents '+
					'fileatime filectime filegroup fileinode filemtime fileowner =
fileperms filesize filetype '+
					'floatval flock floor flush fmod fnmatch fopen fpassthru fprintf =
fputcsv fputs fread fscanf '+
					'fseek fsockopen fstat ftell ftok getallheaders getcwd getdate =
getenv gethostbyaddr gethostbyname '+
					'gethostbynamel getimagesize getlastmod getmxrr getmygid getmyinode =
getmypid getmyuid getopt '+
					'getprotobyname getprotobynumber getrandmax getrusage getservbyname =
getservbyport gettext '+
					'gettimeofday gettype glob gmdate gmmktime ini_alter ini_get =
ini_get_all ini_restore ini_set '+
					'interface_exists intval ip2long is_a is_array is_bool is_callable =
is_dir is_double '+
					'is_executable is_file is_finite is_float is_infinite is_int =
is_integer is_link is_long '+
					'is_nan is_null is_numeric is_object is_readable is_real =
is_resource is_scalar is_soap_fault '+
					'is_string is_subclass_of is_uploaded_file is_writable is_writeable =
mkdir mktime nl2br '+
					'parse_ini_file parse_str parse_url passthru pathinfo readlink =
realpath rewind rewinddir rmdir '+
					'round str_ireplace str_pad str_repeat str_replace str_rot13 =
str_shuffle str_split '+
					'str_word_count strcasecmp strchr strcmp strcoll strcspn strftime =
strip_tags stripcslashes '+
					'stripos stripslashes stristr strlen strnatcasecmp strnatcmp =
strncasecmp strncmp strpbrk '+
					'strpos strptime strrchr strrev strripos strrpos strspn strstr =
strtok strtolower strtotime '+
					'strtoupper strtr strval substr substr_compare';

	var keywords =3D	'and or xor __FILE__ __LINE__ array as break case ' +
					'cfunction class const continue declare default die do else ' +
					'elseif empty enddeclare endfor endforeach endif endswitch endwhile =
' +
					'extends for foreach function include include_once global if ' +
					'new old_function return static switch use require require_once ' +
					'var while __FUNCTION__ __CLASS__ ' +
					'__METHOD__ abstract interface public implements extends private =
protected throw';

	this.regexList =3D [
		{ regex: dp.sh.RegexLib.SingleLineCComments,				css: 'comment' },			// =
one line comments
		{ regex: dp.sh.RegexLib.MultiLineCComments,					css: 'comment' },			// =
multiline comments
		{ regex: dp.sh.RegexLib.DoubleQuotedString,					css: 'string' },			// =
double quoted strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,					css: 'string' },			// =
single quoted strings
		{ regex: new RegExp('\\$\\w+', 'g'),						css: 'vars' },				// =
variables
		{ regex: new RegExp(this.GetKeywords(funcs), 'gmi'),		css: 'func' },			=
	// functions
		{ regex: new RegExp(this.GetKeywords(keywords), 'gm'),		css: 'keyword' =
}			// keyword
		];

	this.CssClass =3D 'dp-c';
}

dp.sh.Brushes.Php.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.Php.Aliases	=3D ['php'];
dp.sh.Brushes.Default =3D function()
{
	this.regexList =3D [
		{ regex: dp.sh.RegexLib.DoubleQuotedString,								css: 'string' },		=
// strings
		{ regex: dp.sh.RegexLib.SingleQuotedString,								css: 'string' },		=
// strings
		{ regex: new RegExp('\\b([\\d]+(\\.[\\d]+)?|0x[a-f0-9]+)\\b', 'gi'),	=
css: 'number' }
		];

	this.CssClass =3D 'dp-default';
	this.Style =3D '.dp-default .number { color: #C00000; }';
}

dp.sh.Brushes.Default.prototype	=3D new dp.sh.Highlighter();
dp.sh.Brushes.Default.Aliases	=3D ['default'];

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/javascripts/hotkey.js?1324994303

Object.Event=3D{=0A=
extend:function(object){=0A=
object._objectEventSetup=3Dfunction(event_name){=0A=
this._observers=3Dthis._observers||{};=0A=
this._observers[event_name]=3Dthis._observers[event_name]||[];=0A=
};=0A=
object.observe=3Dfunction(event_name,observer){=0A=
if(typeof(event_name)=3D=3D'string'&&typeof(observer)!=3D'undefined'){=0A=
this._objectEventSetup(event_name);=0A=
if(!this._observers[event_name].include(observer))=0A=
this._observers[event_name].push(observer);=0A=
}else=0A=
for(var e in event_name)=0A=
this.observe(e,event_name[e]);=0A=
};=0A=
object.stopObserving=3Dfunction(event_name,observer){=0A=
this._objectEventSetup(event_name);=0A=
if(event_name&&observer)=0A=
this._observers[event_name]=3Dthis._observers[event_name].without(observe=
r);=0A=
else if(event_name)=0A=
this._observers[event_name]=3D[];=0A=
else=0A=
this._observers=3D{};=0A=
};=0A=
object.observeOnce=3Dfunction(event_name,outer_observer){=0A=
var inner_observer=3Dfunction(){=0A=
outer_observer.apply(this,arguments);=0A=
this.stopObserving(event_name,inner_observer);=0A=
}.bind(this);=0A=
this._objectEventSetup(event_name);=0A=
this._observers[event_name].push(inner_observer);=0A=
};=0A=
object.notify=3Dfunction(event_name){=0A=
this._objectEventSetup(event_name);=0A=
var collected_return_values=3D[];=0A=
var args=3D$A(arguments).slice(1);=0A=
try{=0A=
for(var i=3D0;i<this._observers[event_name].length;++i)=0A=
collected_return_values.push(this._observers[event_name][i].apply(this._o=
bservers[event_name][i],args)||null);=0A=
}catch(e){=0A=
if(e=3D=3D$break)=0A=
return false;=0A=
else=0A=
throw e;=0A=
}=0A=
return collected_return_values;=0A=
};=0A=
if(object.prototype){=0A=
object.prototype._objectEventSetup=3Dobject._objectEventSetup;=0A=
object.prototype.observe=3Dobject.observe;=0A=
object.prototype.stopObserving=3Dobject.stopObserving;=0A=
object.prototype.observeOnce=3Dobject.observeOnce;=0A=
object.prototype.notify=3Dfunction(event_name){=0A=
if(object.notify){=0A=
var args=3D$A(arguments).slice(1);=0A=
args.unshift(this);=0A=
args.unshift(event_name);=0A=
object.notify.apply(object,args);=0A=
}=0A=
this._objectEventSetup(event_name);=0A=
var args=3D$A(arguments).slice(1);=0A=
var collected_return_values=3D[];=0A=
try{=0A=
if(this.options&&this.options[event_name]&&typeof(this.options[event_name=
])=3D=3D'function')=0A=
collected_return_values.push(this.options[event_name].apply(this,args)||n=
ull);=0A=
for(var i=3D0;i<this._observers[event_name].length;++i)=0A=
collected_return_values.push(this._observers[event_name][i].apply(this._o=
bservers[event_name][i],args)||null);=0A=
}catch(e){=0A=
if(e=3D=3D$break)=0A=
return false;=0A=
else=0A=
throw e;=0A=
}=0A=
return collected_return_values;=0A=
};=0A=
}=0A=
}=0A=
};=0A=
var HotKey=3DClass.create({=0A=
initialize:function(letter,callback,options){=0A=
if(!(letter instanceof =
Number))letter=3Dletter.toUpperCase().charCodeAt(0);=0A=
HotKey.hotkeys.push(this);=0A=
this.options=3DObject.extend({=0A=
element:false,=0A=
shiftKey:false,=0A=
altKey:false,=0A=
ctrlKey:true=0A=
},options||{});=0A=
this.letter=3Dletter;=0A=
this.callback=3Dcallback;=0A=
this.element=3D$(this.options.element||document);=0A=
this.handler=3Dfunction(event){=0A=
if(!event||(this.letter=3D=3Devent.keyCode&&((!this.options.shiftKey||(th=
is.options.shiftKey&&event.shiftKey))&&(!this.options.altKey||(this.optio=
ns.altKey&&event.altKey))&&(!this.options.ctrlKey||(this.options.ctrlKey&=
&event.ctrlKey))))){=0A=
this.callback(event);=0A=
event.cancelBubble=3Dtrue;=0A=
event.returnValue=3Dfalse;=0A=
if(event.stopPropagation){=0A=
event.stopPropagation();=0A=
event.preventDefault();=0A=
}=0A=
return false;=0A=
}=0A=
}.bind(this);=0A=
this.enable();=0A=
},=0A=
trigger:function(){=0A=
this.handler();=0A=
},=0A=
enable:function(){=0A=
this.element.observe('keydown',this.handler);=0A=
},=0A=
disable:function(){=0A=
this.element.stopObserving('keydown',this.handler);=0A=
},=0A=
destroy:function(){=0A=
this.disable();=0A=
HotKey.hotkeys=3DControl.HotKey.hotkeys.without(this);=0A=
}=0A=
});=0A=
Object.extend(HotKey,{=0A=
hotkeys:[]=0A=
});=0A=
Object.Event.extend(HotKey);
------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/javascripts/code_favorites.js?1325907333

=0A=
=0A=
function code_favorites_init(){=0A=
    $$("pre[name=3Dcode]").each(function(pre){=0A=
        var sh_bar_tools =3D pre.previous().down(".tools");=0A=
        var favorite_link =3D '&nbsp;<a href=3D"javascript:void()" =
title=3D"=E6=94=B6=E8=97=8F=E8=BF=99=E6=AE=B5=E4=BB=A3=E7=A0=81" =
onclick=3D"code_favorites_do_favorite(this);return false;">'=0A=
        favorite_link +=3D '<img class=3D"star" =
src=3D"/images/icon_star.png" =
alt=3D"=E6=94=B6=E8=97=8F=E4=BB=A3=E7=A0=81" />';=0A=
        favorite_link +=3D '<img class=3D"spinner" =
src=3D"/images/spinner.gif" style=3D"display:none" />';=0A=
        favorite_link +=3D '</a>';=0A=
        sh_bar_tools.innerHTML +=3D favorite_link;=0A=
    });=0A=
}=0A=
=0A=
function code_favorites_do_favorite(link_element){=0A=
    $(link_element);// for ie6=0A=
    var pre_element =3D link_element.up(".dp-highlighter").next();=0A=
    var parameters =3D undefined;=0A=
    if(pre_element.hasAttribute("code_favorite_id")){=0A=
      parameters =3D {=0A=
        "code_favorite[id]": =
pre_element.readAttribute("code_favorite_id")=0A=
      }=0A=
    }else{=0A=
      var language =3D pre_element.readAttribute("class");=0A=
      language =3D (!language || language =3D=3D =
"data_info")?pre_element.readAttribute("language"):language;=0A=
      var pre_index =3D  pre_element.readAttribute("pre_index") || =
link_element.up(".dp-highlighter").readAttribute("pre_index");=0A=
      parameters =3D {=0A=
        'code_favorite[source_url]': =
pre_element.readAttribute("source_url"),=0A=
        'code_favorite[page_title]': pre_element.readAttribute("title"),=0A=
        'code_favorite[language]': language,=0A=
        'code_favorite[codeable_id]': =
pre_element.readAttribute("codeable_id"),=0A=
        'code_favorite[codeable_type]': =
pre_element.readAttribute("codeable_type"),=0A=
        'code_favorite[code_index]': pre_index=0A=
      };}=0A=
    link_element.down('.star').hide();=0A=
    link_element.down('.spinner').show();=0A=
    new Ajax.Request('/admin/code/new_xhr', {=0A=
        method: 'post',=0A=
        parameters: parameters,=0A=
        onSuccess: function(response){=0A=
            $(document.getElementsByTagName('body')[0]).insert({=0A=
                bottom:response.responseText=0A=
            });=0A=
            link_element.down('.spinner').hide();=0A=
            link_element.down('.star').show();=0A=
        }=0A=
    });=0A=
}=0A=
=0A=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.iteye.com/javascripts/weiboshare.js?1324994303

function open_window(url) {=0A=
  function o(){=0A=
    =
if(!window.open(url,'iteye',['toolbar=3D0,status=3D0,resizable=3D1,width=3D=
440,height=3D430,left=3D',(screen.width-440)/2,',top=3D',(screen.height-4=
30)/2].join('')))=0A=
      window.location.href =3D url;=0A=
  }=0A=
=0A=
  if(/Firefox/.test(navigator.userAgent)) {=0A=
    setTimeout(o,0);=0A=
  } else {=0A=
    o();=0A=
  }=0A=
}=0A=
=0A=
var WeiboShare =3D Class.create({=0A=
  initialize: function(opts) {=0A=
    var imgs =3D =
opts['img_scope'].select('img:not(.star):not(.spinner)');=0A=
    var img_url =3D '';=0A=
    if(imgs.size() > 0) img_url =3D imgs[0]['src'];=0A=
=0A=
    this.params =3D {=0A=
      title: opts['title'] || document.title,=0A=
      url: encodeURIComponent(opts['url'] || document.location.href),=0A=
      pic: encodeURIComponent(img_url)=0A=
    }=0A=
    this.share_buttons =3D opts['share_buttons'];=0A=
=0A=
    this.share_buttons.select('a').each(function(link){=0A=
      link.observe('click', (function(event){=0A=
        var url =3D =
WeiboShare.make_share_url(link.readAttribute('data-type'), this.params);=0A=
        open_window(url);=0A=
        event.stop();=0A=
      }).bindAsEventListener(this));=0A=
    }, this);=0A=
  }=0A=
});=0A=
=0A=
WeiboShare.register =3D function(sites) {=0A=
  this.sites =3D (this.sites || new Hash()).merge(sites);=0A=
};=0A=
=0A=
WeiboShare.make_share_url =3D function(key, params) {=0A=
  var site_info =3D this.sites.get(key);=0A=
  params['appkey'] =3D site_info['appkey'];=0A=
=0A=
  var param_array =3D [];=0A=
  for(var p in params) {=0A=
    param_array.push(p + '=3D' + params[p]);=0A=
  }=0A=
=0A=
  return (site_info['url'] + '?' + param_array.join('&'));=0A=
}=0A=
=0A=
WeiboShare.register({=0A=
  sina: {=0A=
    url: 'http://service.weibo.com/share/share.php',=0A=
    appkey: '3842512498'=0A=
  },=0A=
  qq: {=0A=
    url: 'http://v.t.qq.com/share/share.php',=0A=
    appkey: '050a47d9d5d848029e1de3198d2abcda'=0A=
  }=0A=
});=0A=

------=_NextPart_000_0000_01CD1F00.DFC6EF30
Content-Type: application/x-js
Content-Transfer-Encoding: quoted-printable
Content-Location: http://pagead2.googlesyndication.com/pagead/show_ads.js

(function(){var g=3D!0,h=3Dnull,i=3D!1,j=3D(new Date).getTime();var =
aa=3Dthis,ba=3Dfunction(a,b){var c=3Da.split("."),d=3Daa;!(c[0]in =
d)&&d.execScript&&d.execScript("var "+c[0]);for(var =
e;c.length&&(e=3Dc.shift());)!c.length&&void =
0!=3D=3Db?d[e]=3Db:d=3Dd[e]?d[e]:d[e]=3D{}},ca=3Dfunction(a,b,c){return =
a.call.apply(a.bind,arguments)},da=3Dfunction(a,b,c){if(!a)throw =
Error();if(2<arguments.length){var =
d=3DArray.prototype.slice.call(arguments,2);return function(){var =
c=3DArray.prototype.slice.call(arguments);Array.prototype.unshift.apply(c=
,d);return a.apply(b,c)}}return function(){return a.apply(b,=0A=
arguments)}},k=3Dfunction(a,b,c){k=3DFunction.prototype.bind&&-1!=3DFunct=
ion.prototype.bind.toString().indexOf("native code")?ca:da;return =
k.apply(h,arguments)};var =
ea=3D/&/g,fa=3D/</g,ga=3D/>/g,ha=3D/\"/g,l=3D{"\x00":"\\0","\u0008":"\\b"=
,"\u000c":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"'=
,"\\":"\\\\"},n=3D{"'":"\\'"};var ia=3Ddocument,p=3Dwindow;var =
r=3Dfunction(a){return"true"=3D=3Da?g:i},ja=3D/^([\w-]+\.)*([\w-]{2,})(\:=
[0-9]+)?$/,t=3Dfunction(a){return!a?"pagead2.googlesyndication.com":(a=3D=
a.match(ja))?a[0]:"pagead2.googlesyndication.com"};var =
ka=3Dr("false"),la=3Dr("false"),ma=3Dr("false"),na=3Dr("false");var =
u=3Dfunction(a,b,c){c||(c=3Dna?"https":"http");return[c,"://",a,b].join("=
")};var v=3DparseFloat("0"),oa=3DisNaN(v)||1<v||0>v?0:v;var =
pa=3Dfunction(){return t("")};t("");var =
x=3Dfunction(a){return!!a&&"function"=3D=3Dtypeof =
a&&!!a.call},ra=3Dfunction(a,b){if(!(2>arguments.length))for(var =
c=3D1,d=3Darguments.length;c<d;++c)a.push(arguments[c])};function =
y(a){return"function"=3D=3Dtypeof =
encodeURIComponent?encodeURIComponent(a):escape(a)}function =
sa(a,b){a.addEventListener?a.addEventListener("load",b,i):a.attachEvent&&=
a.attachEvent("onload",b)}=0A=
var =
ta=3Dfunction(a,b){a.google_image_requests||(a.google_image_requests=3D[]=
);var =
c=3Da.document.createElement("img");c.src=3Db;a.google_image_requests.pus=
h(c)},ua=3Dfunction(a){try{return!!a.location.href||""=3D=3D=3Da.location=
.href}catch(b){return =
i}};ba("google_protectAndRun",function(a,b,c){a=3Dk(b,aa,a);b=3Dwindow.on=
error;window.onerror=3Da;try{c()}catch(d){var =
c=3Dd.toString(),e=3D"";d.fileName&&(e=3Dd.fileName);var =
f=3D-1;d.lineNumber&&(f=3Dd.lineNumber);if(!a(c,e,f))throw =
d;}window.onerror=3Db});=0A=
ba("google_handleError",function(a,b,c,d){0.01>Math.random()&&(a=3D["/pag=
ead/gen_204","?id=3Djserror","&jscb=3D",ka?1:0,"&jscd=3D",la?1:0,"&contex=
t=3D",y(a),"&msg=3D",y(b),"&file=3D",y(c),"&line=3D",y(d.toString()),"&ur=
l=3D",y(ia.URL.substring(0,512)),"&ref=3D",y(ia.referrer.substring(0,512)=
)],a.push(["&client=3D",y(p.google_ad_client),"&format=3D",y(p.google_ad_=
format),"&slotname=3D",y(p.google_ad_slot),"&output=3D",y(p.google_ad_out=
put),"&ad_type=3D",y(p.google_ad_type)].join("")),a=3Du(pa(),a.join("")),=
ta(p,a));return!ma});var z=3Dh,va=3Dfunction(){if(!z){for(var =
a=3Dwindow;a!=3Da.parent&&ua(a.parent);)a=3Da.parent;z=3Da}return z};var =
A,B=3Dfunction(a){this.c=3D[];this.a=3Da||window;this.b=3D0;this.d=3Dh},w=
a=3Dfunction(a,b){this.l=3Da;this.i=3Db};B.prototype.n=3Dfunction(a,b){0=3D=
=3Dthis.b&&0=3D=3Dthis.c.length&&(!b||b=3D=3Dwindow)?(this.b=3D2,this.g(n=
ew =
wa(a,window))):this.h(a,b)};B.prototype.h=3Dfunction(a,b){this.c.push(new=
 =
wa(a,b||this.a));C(this)};B.prototype.o=3Dfunction(a){this.b=3D1;a&&(this=
.d=3Dthis.a.setTimeout(k(this.f,this),a))};B.prototype.f=3Dfunction(){1=3D=
=3Dthis.b&&(this.d!=3Dh&&(this.a.clearTimeout(this.d),this.d=3Dh),this.b=3D=
0);C(this)};B.prototype.p=3Dfunction(){return g};=0A=
B.prototype.nq=3DB.prototype.n;B.prototype.nqa=3DB.prototype.h;B.prototyp=
e.al=3DB.prototype.o;B.prototype.rl=3DB.prototype.f;B.prototype.sz=3DB.pr=
ototype.p;var =
C=3Dfunction(a){a.a.setTimeout(k(a.m,a),0)};B.prototype.m=3Dfunction(){if=
(0=3D=3Dthis.b&&this.c.length){var =
a=3Dthis.c.shift();this.b=3D2;a.i.setTimeout(k(this.g,this,a),0);C(this)}=
};B.prototype.g=3Dfunction(a){this.b=3D0;a.l()};=0A=
var xa=3Dfunction(a){try{return a.sz()}catch(b){return =
i}},ya=3Dfunction(a){return!!a&&("object"=3D=3Dtypeof =
a||"function"=3D=3Dtypeof =
a)&&xa(a)&&x(a.nq)&&x(a.nqa)&&x(a.al)&&x(a.rl)},D=3Dfunction(){if(A&&xa(A=
))return A;var a=3Dva(),b=3Da.google_jobrunner;return =
ya(b)?A=3Db:a.google_jobrunner=3DA=3Dnew =
B(a)},za=3Dfunction(a,b){D().nq(a,b)},Aa=3Dfunction(a,b){D().nqa(a,b)};va=
r Ba=3D/MSIE =
[2-7]|PlayStation|Gecko\/20090226/i,Ca=3D/Android|Opera/,Da=3Dfunction(){=
var =
a=3DE,b=3DI.google_ad_width,c=3DI.google_ad_height,d=3D["<iframe"],e;for(=
e in =
a)a.hasOwnProperty(e)&&ra(d,e+"=3D"+a[e]);d.push('style=3D"left:0;positio=
n:absolute;top:0;"');d.push("></iframe>");b=3D"border:none;height:"+c+"px=
;margin:0;padding:0;position:relative;visibility:visible;width:"+b+"px";r=
eturn['<ins style=3D"display:inline-table;',b,'"><ins =
id=3D"',a.id+"_anchor",'" style=3D"display:block;',b,'">',d.join(" =
"),"</ins></ins>"].join("")};var =
Ea=3Dfunction(){},J=3Dfunction(a,b,c){switch(typeof b){case =
"string":Fa(b,c);break;case =
"number":c.push(isFinite(b)&&!isNaN(b)?b:"null");break;case =
"boolean":c.push(b);break;case "undefined":c.push("null");break;case =
"object":if(b=3D=3Dh){c.push("null");break}if(b instanceof Array){var =
d=3Db.length;c.push("[");for(var =
e=3D"",f=3D0;f<d;f++)c.push(e),J(a,b[f],c),e=3D",";c.push("]");break}c.pu=
sh("{");d=3D"";for(e in =
b)b.hasOwnProperty(e)&&(f=3Db[e],"function"!=3Dtypeof =
f&&(c.push(d),Fa(e,c),c.push(":"),J(a,f,c),d=3D","));=0A=
c.push("}");break;case "function":break;default:throw Error("Unknown =
type: "+typeof =
b);}},K=3D{'"':'\\"',"\\":"\\\\","/":"\\/","\u0008":"\\b","\u000c":"\\f",=
"\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Ga=3D/\uffff/.test("\u=
ffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g,Fa=3Dfun=
ction(a,b){b.push('"');b.push(a.replace(Ga,function(a){if(a in K)return =
K[a];var =
b=3Da.charCodeAt(0),e=3D"\\u";16>b?e+=3D"000":256>b?e+=3D"00":4096>b&&(e+=
=3D"0");return K[a]=3De+b.toString(16)}));b.push('"')};var =
L=3D"google_ad_block,google_ad_channel,google_ad_client,google_ad_format,=
google_ad_height,google_ad_host,google_ad_host_channel,google_ad_host_tie=
r_id,google_ad_output,google_ad_override,google_ad_region,google_ad_secti=
on,google_ad_slot,google_ad_type,google_ad_width,google_adtest,google_all=
ow_expandable_ads,google_alternate_ad_url,google_alternate_color,google_a=
nalytics_domain_name,google_analytics_uacct,google_bid,google_city,google=
_color_bg,google_color_border,google_color_line,google_color_link,google_=
color_text,google_color_url,google_container_id,google_contents,google_co=
untry,google_cpm,google_ctr_threshold,google_cust_age,google_cust_ch,goog=
le_cust_gender,google_cust_id,google_cust_interests,google_cust_job,googl=
e_cust_l,google_cust_lh,google_cust_u_url,google_disable_video_autoplay,g=
oogle_ed,google_eids,google_enable_ose,google_encoding,google_font_face,g=
oogle_font_size,google_frame_id,google_gl,google_hints,google_image_size,=
google_kw,google_kw_type,google_language,google_max_num_ads,google_max_ra=
dlink_len,google_num_radlinks,google_num_radlinks_per_unit,google_num_slo=
ts_to_rotate,google_only_ads_with_video,google_only_pyv_ads,google_only_u=
serchoice_ads,google_override_format,google_page_url,google_previous_watc=
h,google_previous_searches,google_referrer_url,google_region,google_reuse=
_colors,google_rl_dest_url,google_rl_filtering,google_rl_mode,google_rt,g=
oogle_safe,google_scs,google_skip,google_tag_info,google_targeting,google=
_tdsma,google_tfs,google_tl,google_ui_features,google_ui_version,google_v=
ideo_doc_id,google_video_product_type,google_with_pyv_ads".split(",");var=
 =
M=3Dfunction(a){this.a=3Da;a.google_iframe_oncopy||(a.google_iframe_oncop=
y=3D{handlers:{},log:[],shouldLog:0.01>Math.random()?g:i});this.e=3Da.goo=
gle_iframe_oncopy;a.setTimeout(k(this.k,this),3E4)},Ha;var N=3D"var =
i=3Dthis.id,s=3Dwindow.google_iframe_oncopy,H=3Ds&&s.handlers,h=3DH&&H[i]=
,w=3Dthis.contentWindow,d;try{d=3Dw.document}catch(e){}if(h&&d&&(!d.body|=
|!d.body.firstChild)){if(h.call){i+=3D'.call';setTimeout(h,0)}else =
if(h.match){i+=3D'.nav';w.location.replace(h)}s.log&&s.log.push(i)}";=0A=
/[&<>\"]/.test(N)&&(-1!=3DN.indexOf("&")&&(N=3DN.replace(ea,"&amp;")),-1!=
=3DN.indexOf("<")&&(N=3DN.replace(fa,"&lt;")),-1!=3DN.indexOf(">")&&(N=3D=
N.replace(ga,"&gt;")),-1!=3DN.indexOf('"')&&(N=3DN.replace(ha,"&quot;")))=
;Ha=3DN;M.prototype.set=3Dfunction(a,b){this.e.handlers[a]=3Db;this.a.add=
EventListener&&this.a.addEventListener("load",k(this.j,this,a),i)};M.prot=
otype.j=3Dfunction(a){var =
a=3Dthis.a.document.getElementById(a),b=3Da.contentWindow.document;if(a.o=
nload&&b&&(!b.body||!b.body.firstChild))a.onload()};=0A=
M.prototype.k=3Dfunction(){if(this.e.shouldLog){var =
a=3Dthis.e.log,b=3Dthis.a.document;if(a.length){b=3D["/pagead/gen_204?id=3D=
iframecopy&log=3D",y(a.join("-")),"&url=3D",y(b.URL.substring(0,512)),"&r=
ef=3D",y(b.referrer.substring(0,512))].join("");a.length=3D0;ta(this.a,u(=
pa(),b))}}};var Ia=3Dfunction(){var a=3D"script";return["<",a,' =
src=3D"',u(t(""),"/pagead/js/r20120411/r20120410/show_ads_impl.js",""),'"=
></',a,">"].join("")},Ja=3Dfunction(a,b,c,d){return function(){var =
e=3Di;d&&D().al(3E4);try{if(ua(a.document.getElementById(b).contentWindow=
)){var =
f=3Da.document.getElementById(b).contentWindow,q=3Df.document;if(!q.body|=
|=0A=
!q.body.firstChild)q.open(),f.google_async_iframe_close=3Dg,q.write(c)}el=
se{var =
F=3Da.document.getElementById(b).contentWindow,R;f=3Dc;f=3D""+f;if(f.quot=
e)R=3Df.quote();else{for(var q=3D['"'],G=3D0;G<f.length;G++){var =
H=3Df.charAt(G),qa=3DH.charCodeAt(0),Ta=3Dq,Ua=3DG+1,S;if(!(S=3Dl[H])){va=
r w;if(31<qa&&127>qa)w=3DH;else{var o=3DH;if(o in n)w=3Dn[o];else if(o =
in l)w=3Dn[o]=3Dl[o];else{var =
m=3Do,s=3Do.charCodeAt(0);if(31<s&&127>s)m=3Do;else{if(256>s){if(m=3D"\\x=
",16>s||256<s)m+=3D"0"}else =
m=3D"\\u",4096>s&&(m+=3D"0");m+=3Ds.toString(16).toUpperCase()}w=3D=0A=
n[o]=3Dm}}S=3Dw}Ta[Ua]=3DS}q.push('"');R=3Dq.join("")}F.location.replace(=
"javascript:"+R)}e=3Dg}catch(ab){F=3Dva().google_jobrunner,ya(F)&&F.rl()}=
e&&(new =
M(a)).set(b,Ja(a,b,c,i))}};window.google_loader_used=3Dg;(function(a){"go=
ogle_onload_fired"in =
a||(a.google_onload_fired=3Di,sa(a,function(){a.google_onload_fired=3Dg})=
)})(window);if(!window.google_loader_experiment){var O;a:{var =
Ka=3D["async_bad_black","block_bad_black"];if(!(1.0E-4>Math.random())){va=
r La=3DMath.random();if(La<oa){O=3DKa[Math.floor(La/oa*Ka.length)];break =
a}}O=3Dh}window.google_loader_experiment=3DO||""||"launch"}var P;=0A=
a:{try{if(window.google_enable_async!=3D=3Dg&&"blockodd"=3D=3Dwindow.goog=
le_loader_experiment&&1=3D=3Dwindow.top.location.hostname.length%2){P=3Di=
;break a}}catch(Ma){}P=3Dg}var Q;if(Q=3DP){var =
T;if(window.google_enable_async=3D=3D=3Di)T=3D0;else{var =
Na=3Dnavigator.userAgent,Oa=3Dwindow.google_loader_experiment;T=3D(Ba.tes=
t(Na)?i:Ca.test(Na)?"async_bad_black"=3D=3DOa:g)&&!window.google_containe=
r_id&&(!window.google_ad_output||"html"=3D=3Dwindow.google_ad_output)}Q=3D=
T}=0A=
if(Q){var =
U=3Dwindow;U.google_unique_id?++U.google_unique_id:U.google_unique_id=3D1=
;var =
V=3Dwindow;if(!V.google_slot_list||!V.google_slot_list.push)V.google_slot=
_list=3D[];V.google_slot_list.push([V.google_ad_slot||"",V.google_ad_form=
at||"",V.google_ad_width||"",V.google_ad_height||""].join("."));for(var =
I=3Dwindow,_script$$inline_76=3D"script",W,E=3D{allowtransparency:'"true"=
',frameborder:'"0"',height:'"'+I.google_ad_height+'"',hspace:'"0"',margin=
width:'"0"',marginheight:'"0"',onload:'"'+Ha+'"',scrolling:'"no"',=0A=
vspace:'"0"',width:'"'+I.google_ad_width+'"'},Pa=3DI.document,X=3DE.id,Qa=
=3D0;!X||I.document.getElementById(X);)X=3D"aswift_"+Qa++;E.id=3DX;E.name=
=3DX;Pa.write(Da());W=3DX;var =
Ra;I.google_page_url&&(I.google_page_url=3D""+I.google_page_url);for(var =
Sa=3D[],Y=3D0,Va=3DL.length;Y<Va;Y++){var Z=3DL[Y];if(I[Z]!=3Dh){var =
$;try{var Wa=3D[];J(new =
Ea,I[Z],Wa);$=3DWa.join("")}catch(Xa){}$&&ra(Sa,Z,"=3D",$,";")}}Ra=3DSa.j=
oin("");for(var Ya=3D0,Za=3DL.length;Ya<Za;Ya++)I[L[Ya]]=3Dh;var =
$a=3D(new Date).getTime(),bb=3Dwindow.google_loader_experiment,cb=3D=0A=
["<!doctype =
html><html><body><",_script$$inline_76,">",Ra,"google_show_ads_impl=3Dtru=
e;google_unique_id=3D",I.google_unique_id,';google_async_iframe_id=3D"',W=
,'";google_start_time=3D',j,";",bb?'google_loader_experiment=3D"'+bb+'";'=
:"","google_bpp=3D",$a>j?$a-j:1,";</",_script$$inline_76,">",Ia(),"</body=
></html>"].join("");(I.document.getElementById(W)?za:Aa)(Ja(I,W,cb,g))}el=
se window.q=3Dj,document.write(Ia());})();=0A=

------=_NextPart_000_0000_01CD1F00.DFC6EF30--
