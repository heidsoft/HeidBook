linux下的webserver BOA及CGIC库的使用指南

用C 语言编写cgi 程序的话，多半会用到CGIC 。 这是个非常流行的库，遇到文件上传之类的应用更是离不开它。官方页面及下载地址为：www.boutell.com/cgic/#obtain
 
不少网站都有文件上传的功能，本文展示如何用CGIC 库编写文件上传的服务端程序，最后给出一段简单的HTML 代码，供大家测试使用 。
 下载: upload.c
 
   1. #include<stdio.h>
    2. #include<string.h>
    3. #include<unistd.h>
    4. #include<fcntl.h>
    5. #include<sys/stat.h>
    6. #include"cgic.h"
    7. #define BufferLen 1024
    8. int cgiMain(void){
    9.     cgiFilePtr file;
   10.     int targetFile;
   11.     mode_t mode;
   12.     char name[128];
   13.     char fileNameOnServer[64];
   14.     char contentType[1024];
   15.     char buffer[BufferLen];
   16.     char *tmpStr=NULL;
   17.     int size;
   18.     int got,t;
   19.     cgiHeaderContentType("text/html");
   20.     // 取得html 页面中file 元素的值，应该是文件在客户机上的路径名
   21.     if (cgiFormFileName("file", name, sizeof(name)) !=cgiFormSuccess) {
   22.         fprintf(stderr,"could not retrieve filename\n");
   23.         goto FAIL;
   24.     }
   25.     cgiFormFileSize("file", &size);
   26.     // 取得文件类型，不过本例中并未使用
   27.     cgiFormFileContentType("file", contentType, sizeof(contentType));
   28.     // 目前文件存在于系统临时文件夹中，通常为/tmp ，通过该命令打开临时文件。临时文件的名字与用户文件的名字不同，所以不能通过路径/tmp/userfilename 的方式获得文件
   29.     if (cgiFormFileOpen("file", &file) != cgiFormSuccess) {
   30.         fprintf(stderr,"could not open the file\n");
   31.         goto FAIL;
   32.     }
   33.     t=-1;
   34.     // 从路径名解析出用户文件名
   35.     while(1){
   36.         tmpStr=strstr(name+t+1,"\\");
   37.         if(NULL==tmpStr)
   38.         tmpStr=strstr(name+t+1,"/");//if "\\" is not path separator, try "/"
   39.         if(NULL!=tmpStr)
   40.             t=(int)(tmpStr-name);
   41.         else
   42.             break;
   43.     }
   44.     strcpy(fileNameOnServer,name+t+1);
   45.     mode=S_IRWXU|S_IRGRP|S_IROTH;
   46.     // 在当前目录下建立新的文件，第一个参数实际上是路径名，此处的含义是在cgi 程序所在的目录（当前目录））建立新文件
   47.     targetFile=open(fileNameOnServer,O_RDWR|O_CREAT|O_TRUNC|O_APPEND,mode);
   48.     if(targetFile&lt;0){
   49.         fprintf(stderr,"could not create the new file,%s\n",fileNameOnServer);
   50.         goto FAIL;
   51.     }
   52.     // 从系统临时文件中读出文件内容，并放到刚创建的目标文件中
   53.     while (cgiFormFileRead(file, buffer, BufferLen, &got) ==cgiFormSuccess){
   54.         if(got>0)
   55.             write(targetFile,buffer,got);
   56.     }
   57.     cgiFormFileClose(file);
   58.     close(targetFile);
   59.     goto END;
   60. FAIL:
   61.     fprintf(stderr,"Failed to upload");
   62.     return 1;
   63. END:
   64.     printf("File \"%s\" has been uploaded",fileNameOnServer);
   65.     return 0;
   66. }
 
假设该文件存储为upload.c ，则使用如下命令编辑：
 gcc -Wall upload.c cgic.c -o upload.cgi
 
编译完成后把upload.cgi 复制到你部署cgi 程序的目录（通常命名为cgi-bin ）。
 正式部署时，请务必修改用open 创建新文件那一行代码。把open 的第一个参数设置为目标文件在服务器上存储的绝对路径，或者相对于cgi 程序的相对路径。本例中，出于简单考虑，在cgi 程序所在目录下创建新文件。
 
测试用HTML 代码:
 下载: upload.html
 
   1. <form target="_blank" method="post" action="cgi-bin/upload.cgi"> 
    2.     <input name="file" type="file" /> <input name="submit" type="submit" /> 
    3. </form>
 
最后的文件目录结构为
 /MyWebRoot
 |―/upload.html
 |―/cgi-bin
 |――/upload.cgi
 当然，你必须配置能够cgi-bin ，并且程序要有权限在cgi-bin 目录下创建文件（因为此例把文件上传到cgi-bin 目录下）。
 
那么如何控制上传文件的大小呢？因为你有时会不允许用户上传太大的文件。
 通过分析cgic.c 的源代码，我们发现它定义了一个变量cgiContentLength ，表示请求的长度。但我们需要首先判断这是一个上传文件的请求，然后才能根据cgiContentLength 来检查用户是否要上传一个太大的文件。
 cgic.c 的main 函数中进行了一系列if-else 判断来检查请求的类型，首先确定这是一个post 请求，然后确定数据的编码方式为 “multipart/form-data” ，这个判断通过之后，就要开始准备接收数据了。所以我们要在接收数据开始之前使用 cgiContentLength 判断大小，如果超过标准，就立即返回，不允许继续操作。
 下面贴出修改后代码片段（直接修改cgic.c 的源代码即可）：
 
   1. else if (cgiStrEqNc(cgiContentType, "multipart/form-data")) {
    2. #ifdef CGICDEBUG
    3. CGICDEBUGSTART
    4.     fprintf(dout, "Calling PostMultipartInput\n");
    5. CGICDEBUGEND
    6. #endif /* CGICDEBUG */
    7. // 我的代码
    8. //UpSize: 文件长度上限值，以byte 为单位，UpSize 是一个int 变量，因为cgiContentLength 的类型为int
    9.     if(cgiContentLength&gt;UpSize){
   10.         cgiHeaderContentType("text/html");
   11.         printf("File too large!\n");
   12.         cgiFreeResources();
   13.         return -1;
   14.     }
   15. // 我的代码结束
   16.     if (cgiParsePostMultipartInput() != cgiParseSuccess) {
   17. #ifdef CGICDEBUG
   18. CGICDEBUGSTART
   19.         fprintf(dout, "PostMultipartInput failed\n");
   20. CGICDEBUGEND
   21. #endif /* CGICDEBUG */
   22.         cgiFreeResources();
   23.         return -1;
   24.     }
   25. #ifdef CGICDEBUG
   26. CGICDEBUGSTART
   27.     fprintf(dout, "PostMultipartInput succeeded\n");
   28. CGICDEBUGEND
   29.     #endif /* CGICDEBUG */
   30. }
   31. }
 
变量UpSize 表示文件大小的上限。在cgic.c 的main 中找到相关代码，并修改成上面这样即可。你可以在cgic.c 中定义UpSize ，也可以在刚才完成的upload.c 中定义，然后在cgic.c 中用extern 方式引用。
