FastCGI/CGI验证码

一个简单的FastCGI验证码程序: 利用OpenGL生成验证码图片并通过FastCGI输出:

/*
 * test.c
 *
 *  Created on: 2011-4-6
 *      Author: david
 */

#include "fcgi_stdio.h"
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>

int main() {
    char checkChar[36] = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9'};

    while (FCGI_Accept() >= 0) {
        int i=0;
        setenv("DISPLAY",":0.0",0);

        srand((int)time(0));
        char randomChar[5] = {0};
        for(i=0;i<5;i++){
            randomChar[i] = checkChar[(rand()%36)];
        }
        randomChar[5] = '\0';


        printf("Content-type: text/html\r\n\r\n");
        printf("<html>");
        printf("Before Invoke!!<br>\r\n");


        char fileStr[50] = {0};
        char execStr[100] = {0};
        sprintf(fileStr,"%s_%d.bmp",randomChar,(int)time((time_t*)NULL));
        sprintf(execStr,"/var/www/ExecTest/Debug/OpenglDemo %s#%s",randomChar,fileStr);

        int status = WIFEXITED(system(execStr));
        if(status != 0){
            printf("Waiting for normal exit<br>");
            printf("<img src=\"%s\"/><br>",fileStr);
        }


        printf("ExecFile %s<br>\r\n",execStr);
        printf("After Invoke!!<br>\r\n");
        printf("</html>");
    }

    return 0;
}

//----------------------------------------------------------------------------------------------------------------------------------

上面/var/www/ExecTest/Debug/OpenglDemo

其中OpenGL生成验证码的程序代码(OpenglDemo):

 

#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>
#include "bmp.h"
#include <string.h>
#include <time.h>

BITMAPFILEHEADER fileHeader;
BITMAPINFOHEADER infoHeader;

int isExit = 0;
int currlWnd = 0;
char * str = "12345";
char * fileName = "default.bmp";

void display(void) {
    /* clear all pixels  */
    glClear(GL_COLOR_BUFFER_BIT);
    int x = 20;
    int y = 8;
    int i=0;
    int flowOffset = x;

    for(i=0;i<strlen(str);i++){
        GLfloat r = (rand()*1.0)/RAND_MAX;
        GLfloat g = (rand()*1.0)/RAND_MAX;
        GLfloat b = (rand()*1.0)/RAND_MAX;
        if(g>0.5){
            g = 0.5;
        }
        if(b>0.5){
            b = 0.5;
        }
        glColor3f(r,g,b);
        glRasterPos2i(flowOffset,y+(rand()%10));
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24,(int)(str[i]));//&glutBitmapTimesRoman24
        flowOffset += 30;
    }
    glEnable (GL_LINE_STIPPLE);
    glLineStipple (1, 0x0008);
    glBegin(GL_LINES);
    for(i=0;i<150;i++){
        GLfloat r = (rand()*1.0)/RAND_MAX;
        GLfloat g = (rand()*1.0)/RAND_MAX;
        GLfloat b = (rand()*1.0)/RAND_MAX;
        glColor3f(r,g,b);
        glVertex2f((rand()%(flowOffset-5))+5,(rand()%(y+23)+5));
        glVertex2f((rand()%(flowOffset-5))+5,(rand()%(y+23)+5));
    }
    glEnd();
    glDisable (GL_LINE_STIPPLE);

    glFlush();
    isExit = 1;
}

void init(void) {
    glPixelStorei (GL_UNPACK_ALIGNMENT, 1);
    glClearColor (1.0, 1.0, 1.0, 0.0);
}

void LongToByte(unsigned long value, unsigned char * outResult) {
    int i = 0;
    for (i = 0; i < 4; i++) {
        outResult[i] = (unsigned char) (value % 16);
        value = value / 16;
        outResult[i] += (unsigned char) (value % 16) * 16;
        value = value / 16;
    }
    outResult[4] = '\0';
}
void testPrint() {
    GLint viewPort[4] = { 0 };
    glGetIntegerv(GL_VIEWPORT, viewPort);
    GLbyte * buffer = malloc(viewPort[2] * viewPort[3] * sizeof(GLbyte) * 3);
    glReadPixels(viewPort[0], viewPort[1], viewPort[2], viewPort[3], GL_BGR,
            GL_UNSIGNED_BYTE, buffer);
    long fileSize = viewPort[2] * viewPort[3] * 3 + 54;

    fileHeader.bfType[0] = 0x42;
    fileHeader.bfType[1] = 0x4d;
    LongToByte(fileSize, fileHeader.bfSize);
    LongToByte(54, fileHeader.bfOffBits);

    LongToByte(sizeof(infoHeader), infoHeader.biSize);
    LongToByte(viewPort[2], infoHeader.biWidth);
    LongToByte(viewPort[3], infoHeader.biHeight);

    infoHeader.biPlanes[0] = 0x01;
    infoHeader.biPlanes[1] = 0x00;
    infoHeader.biBitCount[0] = 0x18;
    infoHeader.biBitCount[1] = 0x00;
    LongToByte(0, infoHeader.biCompression);
    LongToByte((viewPort[2] * viewPort[3]), infoHeader.biSizeImage);

    FILE * fp = fopen(fileName, "w+");
    fwrite(&fileHeader, sizeof(fileHeader), 1, fp);
    fwrite(&infoHeader, sizeof(infoHeader), 1, fp);
    fwrite(buffer, 1, (viewPort[2] * viewPort[3] * 3), fp);
    fclose(fp);

    //free(buffer);
}

void idleFunc(){
    if(isExit == 1){
        testPrint();
        glutDestroyWindow(currlWnd);
    }
}

void reshape(int x, int y)
{
   glViewport(0, 0, (GLsizei) x, (GLsizei) y);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();
   glOrtho (0, x, 0, y, -1.0, 1.0);
   glMatrixMode(GL_MODELVIEW);
}


int main(int argc, char** argv) { // xxx 12345 xxx.bmp

    srand((int)time(0));
    char params[50]={0};
    if(argv[1] != NULL){
        strcpy(params,argv[1]);
        str = strtok(params,"#");
        fileName = strtok(NULL,"#");
    }

    printf("Random Char:%s \n",str);
    printf("File Name:%s \n",fileName);

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(175, 42);
    currlWnd = glutCreateWindow("");
    glutPositionWindow((rand()%10000+10000),(rand()%10000+10000));
    init();
    glutReshapeFunc(reshape);
    glutDisplayFunc(display);
    glutIdleFunc(idleFunc);
    glutMainLoop();
    return 0; /* ANSI C requires main to return int. */
}

//----------------------------------------------------------------------------------------------

头文件: bmp.h

typedef struct tagBITMAPFILEHEADER {

    unsigned char bfType[2];

    unsigned char bfSize[4];

    unsigned char bfReserved1[2];

    unsigned char bfReserved2[2];

    unsigned char bfOffBits[4];

} BITMAPFILEHEADER;

typedef struct tagBITMAPINFOHEADER {

    unsigned char biSize[4];

    unsigned char biWidth[4];

    unsigned char biHeight[4];

    unsigned char biPlanes[2];

    unsigned char biBitCount[2];

    unsigned char biCompression[4];

    unsigned char biSizeImage[4];

    unsigned char biXPelsPerMeter[4];

    unsigned char biYPelsPerMeter[4];

    unsigned char biClrUsed[4];

    unsigned char biClrImportant[4];

} BITMAPINFOHEADER;