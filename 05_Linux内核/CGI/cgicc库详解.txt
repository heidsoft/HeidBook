例子中的一句代码，用来取得用户从浏览器的输入信息。
cgicc::form_iterator name = cgi.getElement("name");之前已经创建好Cgicc类。想研究一下Cgicc类究竟做了什么。
可以猜测，在调用getElement之前，Cgicc已经存储好了所有的输入。
Cgicc的构造函数主体如下：
CGICCNS Cgicc::Cgicc(reader_function_t stream_reader)
  : fEnvironment(stream_reader)
{
  fFormData.reserve(40);
  fFormFiles.reserve(5);

  if(stringsAreEqual(getEnvironment().getRequestMethod(), "post"))
    parseFormInput(getEnvironment().getPostData());
  else
    parseFormInput(getEnvironment().getQueryString());
}在初始化参数表中，首先创建一个CgiEnvironment的类的实例，用来初始化系统信息，读取从服务器传来的各个参数。其中包括请求的方法（POST或者GET）。
然后为两个vector分配存储空间。然后通过查看请求的方法调用相应的函数。下面以post为例：
getEnvironment是一个内联函数，用来返回Cgicc的私有变量fEnvironment.fEnvironment的getPostData()方法返回其私有变量fPostData（std::string);
而在CgiEnvirontment的构造函数中：
    STDNS auto_ptr<char> temp(new char[getContentLength()]);

    // use the appropriate reader function
    if(stream_reader == NULL) {
      STDNS cin.read(temp.get(), getContentLength());
      if((unsigned long)STDNS cin.gcount() != getContentLength())
    throw STDNS runtime_error("I/O error");
    }
    else {
      // user specified a reader function
      if((*stream_reader)
     (temp.get(), getContentLength()) != getContentLength())
    throw STDNS runtime_error("I/O error");
    }

    fPostData = STDNS string(temp.get(), getContentLength());
cin读取用户请求并存至temp中，并复制至fPostData中。这就是我们要处理的数据。（temp使用标准库的auto_ptr，会自动销毁）。


对fPostData的进一步处理则由Cgicc::parserFormInput来做。而parserFormInput则通过对整个字符串的解析将其分成键值对，形成一个FormEntry对象，并存入
fFormData(vector)中。所以，在cgicc类创建之后就可以直接通过查询相应的输入数据。getElement利用标准库算法find_if在vector中查找相应的值。STL中一般
用迭代器查找时若无结果都会将迭代器置于容器后一位，所以判断是否查找成功的代码应该这样写：
if(name != cgi.getElements().end()) {
   // iterator refers to a valid element
}










#include <iostream>
#include <vector>
#include <string>

#include "cgicc/Cgicc.h"
#include "cgicc/HTTPHTMLHeader.h"
#include "cgicc/HTMLClasses.h"

using namespace std;
using namespace cgicc;

int 
main(int argc, 
     char **argv)
{
   try {
      Cgicc cgi;

      // Send HTTP header
      cout << HTTPHTMLHeader() << endl;

      // Set up the HTML document
      cout << html() << head(title("cgicc example")) << endl;
      cout << body() << endl;

      // Print out the submitted element
      form_iterator name = cgi.getElement("name");
      if(name != cgi.getElements().end()) {
         cout << "Your name: " << **name << endl;
      }

      // Close the HTML document
      cout << body() << html();
   }
   catch(exception& e) {
      // handle any errors - omitted for brevity
   }
}这是官方教程中的一个例子，我想从这个例子的分析中弄明白cigcc库工作的一些基本原理。这个例子中包括了对接收
数据的处理以及对浏览器的输出。

首先输出http header。HTTPHTMLHeader是一个类，它的继承体系是MStreamable->HTTPHeader->
HTTPContentHeader->(HTTPHTMLHeader,HTTPPlainHeader,HTTPXHTMLHeader).从名字上可以看出，因为继承自MStreamable,HTTPHTMLHeader应该是重载了cout操作符。

MStreamable中的提供了一个纯虚函数：
 virtual void
  render(STDNS ostream& out)                 const = 0;还有一个右元函数：
friend CGICC_API STDNS ostream& 
  operator<<(STDNS ostream& out, const MStreamable& obj);这就是其中实现重载的函数。其实现就是调用obj.reader(out);基类想要实现相应的功能，只需实现reader函数即可.HTTPHeader是一个抽象基类，不需要实现此函数。HTTPContentHeader实现了这个函数。
CGICCNS HTTPContentHeader::render(STDNS ostream& out)    const
{
  out << "Content-Type: " << getData() << STDNS endl;

  STDNS vector<HTTPCookie>::const_iterator iter; 
  for(iter = getCookies().begin(); iter != getCookies().end(); ++iter)
    out << *iter << STDNS endl;
  
  out << STDNS endl;
}HTTPContentHeader创建时，将“text/html"传给HTTPContentHeader的构造函数即可，HTTPContentHeader会继续将此参数往上传至HTTPHeader,然后通过getData调用取出。


CIGCC中将每一个标签都定义为一个类。比如以下几个
BOOLEAN_ELEMENT (html,       "html");       // HTML document
BOOLEAN_ELEMENT (head,       "head");       // document head
BOOLEAN_ELEMENT (title,      "title");      // document title
ATOMIC_ELEMENT  (meta,       "meta");       // meta data
BOOLEAN_ELEMENT (style,      "style");      // style sheet
BOOLEAN_ELEMENT (body,       "body");       // document body
BOOLEAN_ELEMENT是一个宏
#define BOOLEAN_ELEMENT(name, tag) \
TAG(name, tag); typedef HTMLBooleanElement<name##Tag> name
TAG也是一个宏
#define TAG(name, tag) \
class name##Tag   \
{ public: inline static const char* getName() { return tag; } }这个宏展开就是一个类。
以“html"为例，其相应的类为
class htmlTag
{
       public:
      inline static const char* getName()
      {return "html";}
};而后面的typedef则导致
html= HTMLBooleanElement<htmlTag>. 
HTMLBooleanElement是一个模板类，用相应的标签实例化后，
html()=HTMLBooleanElemnt<htmlTag>()-------->构造函数。而HTMLBooleanElement
的继承体系则是MStreamable-->HTMLElement-->HTMLBooleanELemnt<Tag>，依然是可输出的。
这一次reader的函数实现是在HTMLELement类中。其实现的细节暂时可不必探究。

获取输入那块上篇已讲过，此处略去。





Cgicc类是主类。
首先是一些常用的typedef
//! A vector of FormEntry objectstypedef STDNS vector<FormEntry>::iterator  form_iterator;//! A vector of \c const FormEntry objectstypedef STDNS vector<FormEntry>::const_iterator const_form_iterator;//! A vector of FormFile objectstypedef STDNS vector<FormFile>::iterator  file_iterator;//! A vector of \c const FormFile objectstypedef STDNS vector<FormFile>::const_iterator  const_file_iterator;
cigcc里面很多地方用到了STL的vector.STDNS就就是std::,因为整个文件的定义是在namespace cgicc里面，所以此处要声明std.。网页文件的元素很适合用vector来标示，迭代器也是直接使用vector的。
cgicc主要是用来存取form的元素信息的。
cigcc通常的用法是：
int  main(int argc, char **argv) { try {      cgicc::Cgicc cgi; // do something with cgi }  catch(const exception& e) { //handle the error } }
类的定义相关，简单的成员函数不再介绍，只在后面介绍具体的重要的成员函数。下面是类的私有数据与函数：
private: CgiEnvironment   fEnvironment;  STDNS vector<FormEntry>  fFormData;  STDNS vector<FormFile>  fFormFiles;  // Convert query string into a list of FormEntries void parseFormInput(const STDNS string& data); // Parse a multipart/form-data header MultipartHeader parseHeader(const STDNS string& data); // Parse a (name=value) form entry void  parsePair(const STDNS string& data); // Parse a MIME entry for ENCTYPE="" void parseMIME(const STDNS string& data)； // Find elements in the list of entries bool  findEntries(const STDNS string& param,  bool byName,STDNS vector<FormEntry>& result) const;};
构造函数：

Cgicc(reader_function_t stream_reader = NULL);
如果使用的是FastCGI(CGI的一个扩展版本）的话，会需要一个reader_function_t的参数，用来读取输入。如果忽略或者是NULL的话，
则使用标准输入
read_function_t也是一个typedef .定义在CgiEnvironment.h中
typedef size_t (* reader_function_t)(void *, size_t);
是一种函数指针类型。size_t 是Linux上常用的一种数据类型。一般为long unsigned int.这种函数类型接受两个参数，返回一个size_t.
实现：
CGICCNS Cgicc::Cgicc(reader_function_t stream_reader) //CGICCNS--->cgicc:: : fEnvironment(stream_reader) //fEnvironment是一个CgiEnvironment 实例。 {#if DEBUG#if HAVE_STRFTIME                     //是否有strftime这个函数，有的话就会有下面的调用。LINUX上一般都有。 time_t  now;  tm   *date; char   s[80];  now = time(0); //获取UNIX时间（秒数）。  date = localtime(&now); //转换成通常用的时间格式  strftime(s, 80, "%A, %B %d, %Y %I:%M:%S %p", date); //写入字符数组s中  LOG("Cgicc debugging log started on ") //LOG和下面的stringsAreEqual都是Cgiutils.h中定义的一些实用函数，见本文  LOGLN(s) //附录。#else  LOGLN("Cgicc debugging log started.")#endif /* HAVE_STRFTIME */ #endif /* DEBUG */  // this can be tweaked for performance  fFormData.reserve(40); //请求存储空间，最少能容纳40个元素，STL中的接口  fFormFiles.reserve(5); //同上。Cgicc提供了整个库最主要的也是最基本的接口，其中就包括存贮取得的信息。 if(stringsAreEqual(getEnvironment().getRequestMethod(), "post")) //具体函数见附录2.    parseFormInput(getEnvironment().getPostData()); else    parseFormInput(getEnvironment().getQueryString());}析构函数：1 CGICCNS Cgicc::~Cgicc()2 {3   LOGLN("Cleaning up")4   LOGLN("Cgicc debugging log closed.")5 }
同构造函数一样，若开启DEBUG宏，输出一些提示信息。否则什么也不做。

附录：
1.LOG。一个宏，牵扯到DEBUG这个宏，默认情况下DEBUG为0，此时LOG（S）和LOGIN（S）都为空。若DEBUG=1，则定义为：
extern STDNS ofstream gLogFile;#define LOGLN(s)  gLogFile << s << STDNS endl;#define LOG(s)   gLogFile << s; 
所以此时上面的构造函数的输出为（标准输出）：Cgicc debugging log started on\n+一个时间
2.stringsAreEqual比较两个字符串是否相等，忽视大小写。
bool CGICCNS stringsAreEqual(const STDNS string& s1, //CGICCNS------>cgicc:: STDNS----->std:: const STDNS string& s2){  STDNS string::const_iterator p1 = s1.begin();  STDNS string::const_iterator p2 = s2.begin();  STDNS string::const_iterator l1 = s1.end();  STDNS string::const_iterator l2 = s2.end(); while(p1 != l1 && p2 != l2) { if(toupper(*(p1++)) != toupper(*(p2++)))        //忽略大小写 return false; } return (s2.size() == s1.size()) ? true : false;}




cgicc是一个C++的cgi库。
这个头文件里主要定义了一些平台相关的宏定义。
#if HAVE_CONFIG_H#  include "config.h"#endif
我的版本里有config.h这个文件。内容：
/* Name of package. */#define PACKAGE "cgicc"/* Version of package. */#define VERSION "3.2"/* System cgicc was configured for */#define HOST "i686-pc-linux-gnu"/* Whether to enable debug logging */#define DEBUG 0/* Define if you have the <dlfcn.h> header file. */#define HAVE_DLFCN_H 1/* Define if you have the `gettimeofday' function. */#define HAVE_GETTIMEOFDAY 1/* Define if you have the `strftime' function. */#define HAVE_STRFTIME 1/* Define if you have the <sys/time.h> header file. */#define HAVE_SYS_TIME_H 1/* Define if you have the `uname' function. */#define HAVE_UNAME 1/* Name of package */#define PACKAGE "cgicc"/* Define if you have the ANSI C header files. */#define STDC_HEADERS 1/* Define if you can safely include both <sys/time.h> and <time.h>. */#define TIME_WITH_SYS_TIME 1/* Define if your <sys/time.h> declares `struct tm'. *//* #undef TM_IN_SYS_TIME *//* Version number of package */#define VERSION "3.2"
主要是一些配置信息，是在编译时生成的。Cgicc这个类里面提供了一些API用来获取这些信息，感觉没什么实际用处。
WIN32那快略去，只看LINUX部分的。
 # define CGICC_USE_NAMESPACES 1#  define CGICC_API
这两个宏在其他文件里用的很多，所以要注意一下，CGICC_API为空，LINUX版的很多类定义前都
有它，只要忽略它就醒了。
 

#if CGICC_USE_NAMESPACES#  define CGICC_BEGIN_NAMESPACE namespace cgicc {#  define CGICC_END_NAMESPACE }#  define CGICCNS cgicc::#  define STDNS std::
其他常用的宏。感觉主要的作用还是为了一种明显的标示。使逻辑结构更清楚一些。
