网络上几乎没有c版的spider开源源码，我们可能会找到一些c++的部分资料，还有java的，spider简单的分为三部分，访问url，分析url，分析url内容存取超链接。第三部分是重点，而且也是难点，涉及到很多的算法和设计思想问题。

先从简单的做起，一个下午，把url分析的代码写好了，写的很烂，代码有如下的问题：

1.没注释，说明自己写的不规范，但是等待这个代码稳定之后，必要的注释会加上

2.函数功能区分的不是很好，封装特点不是很明显

3.函数重用性的问题

4.代码稳定性，容错性怎么样，有待测试。

5.代码如下，运行参数为url（目前是支持一个），输出url的相关信息

#include"../include/unp.h"
#include "string.h"
#define MAXPARM 64
struct URL{

        char url[1024]; /*原始url连接*/
        char protocol[10]; /*使用的协议*/
        char pathname[512];
        char host[512];/*主机 www.baidu.com*/
        int port;
        char file[512];         /*文件 index.html*/
        int para_num,query_para_num;
        char parm[MAXPARM][1024];         /*参数列表 最大64个*/
        char query_parm[MAXPARM][1024];
        char fragment[512];
};
static void set_url(struct URL *u,const char * urlstr)
{
    if(strlen(urlstr)>1024)
        err_quit("sorry url too long\n");
    strcpy(u->url,urlstr);
}
static void set_pathname(struct URL *u,const char * urlstr)
{
    
    if(strlen(urlstr)>1024)
        err_quit("sorry url too long\n");
    strcpy(u->pathname,urlstr);
}
static void set_host(struct URL *u,const char * urlstr)
{
    if(strlen(urlstr)>1024)
        err_quit("sorry url too long\n");
    strcpy(u->host,urlstr);
}
static void set_protocol(struct URL *u,const char * urlstr)
{
    if(strlen(urlstr)>1024)
        err_quit("sorry url too long\n");
    strcpy(u->protocol,urlstr);
}
static int set_port(struct URL *u,const char * urlstr)
{
    int numread=0;
    if( urlstr[0]==':' )
    {
        sscanf(&urlstr[1],"%d%n",&u->port,&numread);
        numread++;
    }
    else
    {
        printf("!=:\n");
        u->port=80;
    }
    return numread;
}
static void set_file(struct URL *u,const char * urlstr)
{   
    //attention:urlstr is pathname aaa/ss/sss/a.html
    char * str=(char *)malloc(1024);
    char * tempstr=(char *)malloc(1024);
    strcpy(tempstr,urlstr);
    while(1){
        memset(str,0,strlen(str));
        sscanf(tempstr,"%255[^/]",str);
        //printf("got file? str %s\n",str);
        tempstr=tempstr+strlen(str);
        //printf("tempstr is %s\n",tempstr);
        if(tempstr[0]=='\0')break;
        tempstr++;
    }
    strcpy(u->file,str);
}
static void set_parm(struct URL * u,const char * urlstr)
{
    u->para_num=0;
    char * str=(char *)malloc(1024);
    int i=0;
    for(;;){
        if(i==64)break;
        sscanf(urlstr,"%255[^;#]",str);
        //printf("str is %s\n",str);
        strcpy(u->parm[i],str);
        urlstr=urlstr+strlen(str);
        u->para_num++;
        if(urlstr[0]==';'){
            urlstr++;        
        }
        else{
            break;
        }
        i++;
    }


}
static void set_query_parm(struct URL * u,const char * urlstr)
{ 
    u->query_para_num=0;
    char * str=(char *)malloc(1024);
    int i=0;
    for(;;){
        if(i==64)break;
        sscanf(urlstr,"%255[^&;#]",str);
        //printf("str is %s\n",str);
        strcpy(u->query_parm[i],str);
        urlstr=urlstr+strlen(str);
        u->query_para_num++;
        if(urlstr[0]=='&'){
            urlstr++;        
        }
        else{
            break;
        }
        i++;
    }
}
static void set_all_para(struct URL *u,const char * tempstr)
{
        char * buf=(char *)malloc(1024);
        if(tempstr[0]=='?'){
            set_query_parm(u,tempstr+1);
            sscanf( tempstr,"%255[^;#]",buf);
            tempstr=tempstr+strlen(buf);
            if(tempstr[0]==';'){
                set_parm(u,tempstr+1);
                sscanf( tempstr,"%255[^#]",buf);
                tempstr=tempstr+strlen(buf);
                if(tempstr[0]=='#'){
                    tempstr=tempstr+1;
                    strcpy(u->fragment,tempstr);
                }
            }
            else if(tempstr[0]=='#'){
                tempstr=tempstr+1;
                strcpy(u->fragment,tempstr);    
            }
                printf("format error4\n");
        }
        else if(tempstr[0]==';'){
            set_parm(u,tempstr+1);
            sscanf( tempstr,"%255[^#]",buf);
            tempstr=tempstr+strlen(buf);
            if(tempstr[0]=='#'){
                tempstr=tempstr+1;
                strcpy(u->fragment,tempstr);
            }
            else 
                printf("format error4\n");

        }
         else if(tempstr[0]=='#'){
            tempstr=tempstr+1;
            strcpy(u->fragment,tempstr);
         }
        else
            printf("format error4\n");

     
}
void parse_url(struct URL * u,const char *urlstr)
{
    char * tempstr=(char *)malloc(1024);
    char * buf=(char *)malloc(1024);
    int numread=0,i;
    memcpy(tempstr,urlstr,strlen(urlstr));

    set_url(u,tempstr);//set the URL::url 
    
    strtok(tempstr,"://");
    set_protocol(u,tempstr);
    
    tempstr=strstr(urlstr,"://");
    tempstr=tempstr+3;

    sscanf(tempstr,"%255[^/:]",buf);
    set_host(u,buf);

    tempstr=tempstr+strlen(buf);
    numread=set_port(u,tempstr);
    tempstr+=numread;

    if(tempstr[0]=='\0'||(tempstr[0]=='/'&&tempstr[1]=='\0')){//default mode i.e. http://www.sina.com
        strcpy(u->pathname,"default");
    }
    else
    {
        sscanf(&tempstr[1],"%255[^?;#]",buf);
    
        set_pathname(u,buf);//got /abc/def from http://www/sina.com/abc/def[?skfh[&gfg]][;dgdgf;fdgdgg][#gdfg]
        //set_file(u,buf);

        tempstr=tempstr+strlen(buf)+1;
        //dealing with /.../.../index.html[?...]
        u->para_num=0;
        
        printf("before all set %s\n",tempstr);
        set_all_para(u,tempstr);//got all para from http://www/sina.com/abc/def[?querypara1[&querypara2]][;para1;para2][#fragment]
    }
}
int main(int argc, char *argv[])
{
    int i;
    char p[1024];
    strcpy(p,argv[1]);
    char * delim=":";
    struct URL * u;
    u=(struct URL *)malloc(sizeof( struct URL));
    parse_url(u,p);
    printf("url is %s\nprotocol is %s\n",u->url,u->protocol);
    printf("-------------------------------------\n");
    printf("host is %s\n",u->host);
    printf("pathname is %s\n",u->pathname);
    printf("port is %d\n",u->port);
    printf("file is %s\n",u->file);
    printf("-------------------------------------\n");
    printf("para num is %d\n",u->para_num);
    for(i=0;i<u->para_num;i++)
        printf("parm %d is %s\n",i,u->parm[i]);
    for(i=0;i<u->query_para_num;i++)
        printf("query_parm %d is %s\n",i,u->query_parm[i]);
    printf("fragment is %s\n",u->fragment);
    return 0;

     
}


6.注解，我无私的奉献了全部代码，希望大家提出意见，互相讨论，有想做搜索引擎的可以交流

7.代码运行环境为linux，如果下载后可能会无法运行，需要把我的unp.h进行替换，我的unp.h只是包含了常见的头文件（在一般的linux下编程所需要的）。和err_quit的原型声明实现（读者可以用perror+exit实现）

8.运行结果如下，显然还属于调试版本，输出很混乱

./url "http://blog.sina.com.cn:5000/lm/eladies/a.html?a=123&b=456;c=345#werrfd"
url is http://blog.sina.com.cn:5000/lm/eladies/a.html?a=123&b=456;c=345#werrfd
protocol is http
-------------------------------------
host is blog.sina.com.cn
pathname is lm/eladies/a.html
port is 5000
file is 
-------------------------------------
para num is 1
parm 0 is c=345
query_parm 0 is a=123
query_parm 1 is b=456
fragment is werrfd
